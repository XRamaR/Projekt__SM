
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003508  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080036d0  080036d0  000136d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036e8  080036e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080036e8  080036e8  000136e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036f0  080036f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036f0  080036f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036f4  080036f4  000136f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  2000000c  08003704  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  08003704  000204b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1d7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d08  00000000  00000000  0002c213  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ac0  00000000  00000000  0002df20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c8  00000000  00000000  0002e9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024171  00000000  00000000  0002f3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000939c  00000000  00000000  00053519  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df8d3  00000000  00000000  0005c8b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013c188  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd8  00000000  00000000  0013c204  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080036b8 	.word	0x080036b8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080036b8 	.word	0x080036b8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f94b 	bl	80007a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f000 f806 	bl	8000524 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f002 ff3e 	bl	8003398 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_InitTick+0x54>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_InitTick+0x58>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053a:	fbb3 f3f1 	udiv	r3, r3, r1
 800053e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f965 	bl	8000812 <HAL_SYSTICK_Config>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	e00e      	b.n	8000570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	d80a      	bhi.n	800056e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000558:	2200      	movs	r2, #0
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	f04f 30ff 	mov.w	r0, #4294967295
 8000560:	f000 f92d 	bl	80007be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000564:	4a06      	ldr	r2, [pc, #24]	; (8000580 <HAL_InitTick+0x5c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056a:	2300      	movs	r3, #0
 800056c:	e000      	b.n	8000570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800056e:	2301      	movs	r3, #1
}
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000008 	.word	0x20000008
 800057c:	20000004 	.word	0x20000004
 8000580:	20000000 	.word	0x20000000

08000584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_IncTick+0x20>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	461a      	mov	r2, r3
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_IncTick+0x24>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4413      	add	r3, r2
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <HAL_IncTick+0x24>)
 8000596:	6013      	str	r3, [r2, #0]
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004
 80005a8:	20000028 	.word	0x20000028

080005ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return uwTick;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <HAL_GetTick+0x14>)
 80005b2:	681b      	ldr	r3, [r3, #0]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000028 	.word	0x20000028

080005c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005cc:	f7ff ffee 	bl	80005ac <HAL_GetTick>
 80005d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005dc:	d005      	beq.n	80005ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <HAL_Delay+0x40>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4413      	add	r3, r2
 80005e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005ea:	bf00      	nop
 80005ec:	f7ff ffde 	bl	80005ac <HAL_GetTick>
 80005f0:	4602      	mov	r2, r0
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d8f7      	bhi.n	80005ec <HAL_Delay+0x28>
  {
  }
}
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000004 	.word	0x20000004

08000608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <__NVIC_SetPriorityGrouping+0x40>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 8000632:	4313      	orrs	r3, r2
 8000634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <__NVIC_SetPriorityGrouping+0x40>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	60d3      	str	r3, [r2, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00
 800064c:	05fa0000 	.word	0x05fa0000

08000650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <__NVIC_GetPriorityGrouping+0x18>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	f003 0307 	and.w	r3, r3, #7
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	2b00      	cmp	r3, #0
 800067c:	db0b      	blt.n	8000696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f003 021f 	and.w	r2, r3, #31
 8000684:	4907      	ldr	r1, [pc, #28]	; (80006a4 <__NVIC_EnableIRQ+0x38>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	095b      	lsrs	r3, r3, #5
 800068c:	2001      	movs	r0, #1
 800068e:	fa00 f202 	lsl.w	r2, r0, r2
 8000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db0a      	blt.n	80006d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	490c      	ldr	r1, [pc, #48]	; (80006f4 <__NVIC_SetPriority+0x4c>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d0:	e00a      	b.n	80006e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4908      	ldr	r1, [pc, #32]	; (80006f8 <__NVIC_SetPriority+0x50>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	3b04      	subs	r3, #4
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	761a      	strb	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	; 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f1c3 0307 	rsb	r3, r3, #7
 8000716:	2b04      	cmp	r3, #4
 8000718:	bf28      	it	cs
 800071a:	2304      	movcs	r3, #4
 800071c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3304      	adds	r3, #4
 8000722:	2b06      	cmp	r3, #6
 8000724:	d902      	bls.n	800072c <NVIC_EncodePriority+0x30>
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3b03      	subs	r3, #3
 800072a:	e000      	b.n	800072e <NVIC_EncodePriority+0x32>
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	f04f 32ff 	mov.w	r2, #4294967295
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	43da      	mvns	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	401a      	ands	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000744:	f04f 31ff 	mov.w	r1, #4294967295
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43d9      	mvns	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	4313      	orrs	r3, r2
         );
}
 8000756:	4618      	mov	r0, r3
 8000758:	3724      	adds	r7, #36	; 0x24
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000774:	d301      	bcc.n	800077a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000776:	2301      	movs	r3, #1
 8000778:	e00f      	b.n	800079a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <SysTick_Config+0x40>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000782:	210f      	movs	r1, #15
 8000784:	f04f 30ff 	mov.w	r0, #4294967295
 8000788:	f7ff ff8e 	bl	80006a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <SysTick_Config+0x40>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000792:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <SysTick_Config+0x40>)
 8000794:	2207      	movs	r2, #7
 8000796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	e000e010 	.word	0xe000e010

080007a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff29 	bl	8000608 <__NVIC_SetPriorityGrouping>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007be:	b580      	push	{r7, lr}
 80007c0:	b086      	sub	sp, #24
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
 80007ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d0:	f7ff ff3e 	bl	8000650 <__NVIC_GetPriorityGrouping>
 80007d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	68b9      	ldr	r1, [r7, #8]
 80007da:	6978      	ldr	r0, [r7, #20]
 80007dc:	f7ff ff8e 	bl	80006fc <NVIC_EncodePriority>
 80007e0:	4602      	mov	r2, r0
 80007e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff5d 	bl	80006a8 <__NVIC_SetPriority>
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff31 	bl	800066c <__NVIC_EnableIRQ>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ffa2 	bl	8000764 <SysTick_Config>
 8000820:	4603      	mov	r3, r0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b02      	cmp	r3, #2
 800083c:	d004      	beq.n	8000848 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000844:	2301      	movs	r3, #1
 8000846:	e00c      	b.n	8000862 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2205      	movs	r2, #5
 800084c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f022 0201 	bic.w	r2, r2, #1
 800085e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000870:	b480      	push	{r7}
 8000872:	b089      	sub	sp, #36	; 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
 800088e:	e175      	b.n	8000b7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000890:	2201      	movs	r2, #1
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	697a      	ldr	r2, [r7, #20]
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	f040 8164 	bne.w	8000b76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d003      	beq.n	80008be <HAL_GPIO_Init+0x4e>
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b12      	cmp	r3, #18
 80008bc:	d123      	bne.n	8000906 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	08da      	lsrs	r2, r3, #3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3208      	adds	r2, #8
 80008c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	220f      	movs	r2, #15
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	4013      	ands	r3, r2
 80008e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	691a      	ldr	r2, [r3, #16]
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	08da      	lsrs	r2, r3, #3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3208      	adds	r2, #8
 8000900:	69b9      	ldr	r1, [r7, #24]
 8000902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	2203      	movs	r2, #3
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	4013      	ands	r3, r2
 800091c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f003 0203 	and.w	r2, r3, #3
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4313      	orrs	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d00b      	beq.n	800095a <HAL_GPIO_Init+0xea>
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2b02      	cmp	r3, #2
 8000948:	d007      	beq.n	800095a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800094e:	2b11      	cmp	r3, #17
 8000950:	d003      	beq.n	800095a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b12      	cmp	r3, #18
 8000958:	d130      	bne.n	80009bc <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	2203      	movs	r2, #3
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43db      	mvns	r3, r3
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	4013      	ands	r3, r2
 8000970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	68da      	ldr	r2, [r3, #12]
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4313      	orrs	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000990:	2201      	movs	r2, #1
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	69ba      	ldr	r2, [r7, #24]
 800099c:	4013      	ands	r3, r2
 800099e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	091b      	lsrs	r3, r3, #4
 80009a6:	f003 0201 	and.w	r2, r3, #1
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	2203      	movs	r2, #3
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	4013      	ands	r3, r2
 80009d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	f000 80be 	beq.w	8000b76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	4b65      	ldr	r3, [pc, #404]	; (8000b90 <HAL_GPIO_Init+0x320>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a64      	ldr	r2, [pc, #400]	; (8000b90 <HAL_GPIO_Init+0x320>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b62      	ldr	r3, [pc, #392]	; (8000b90 <HAL_GPIO_Init+0x320>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000a12:	4a60      	ldr	r2, [pc, #384]	; (8000b94 <HAL_GPIO_Init+0x324>)
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	089b      	lsrs	r3, r3, #2
 8000a18:	3302      	adds	r3, #2
 8000a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	f003 0303 	and.w	r3, r3, #3
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	220f      	movs	r2, #15
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	4013      	ands	r3, r2
 8000a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a57      	ldr	r2, [pc, #348]	; (8000b98 <HAL_GPIO_Init+0x328>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d037      	beq.n	8000aae <HAL_GPIO_Init+0x23e>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a56      	ldr	r2, [pc, #344]	; (8000b9c <HAL_GPIO_Init+0x32c>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d031      	beq.n	8000aaa <HAL_GPIO_Init+0x23a>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a55      	ldr	r2, [pc, #340]	; (8000ba0 <HAL_GPIO_Init+0x330>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d02b      	beq.n	8000aa6 <HAL_GPIO_Init+0x236>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a54      	ldr	r2, [pc, #336]	; (8000ba4 <HAL_GPIO_Init+0x334>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d025      	beq.n	8000aa2 <HAL_GPIO_Init+0x232>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a53      	ldr	r2, [pc, #332]	; (8000ba8 <HAL_GPIO_Init+0x338>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d01f      	beq.n	8000a9e <HAL_GPIO_Init+0x22e>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a52      	ldr	r2, [pc, #328]	; (8000bac <HAL_GPIO_Init+0x33c>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d019      	beq.n	8000a9a <HAL_GPIO_Init+0x22a>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a51      	ldr	r2, [pc, #324]	; (8000bb0 <HAL_GPIO_Init+0x340>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d013      	beq.n	8000a96 <HAL_GPIO_Init+0x226>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a50      	ldr	r2, [pc, #320]	; (8000bb4 <HAL_GPIO_Init+0x344>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d00d      	beq.n	8000a92 <HAL_GPIO_Init+0x222>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a4f      	ldr	r2, [pc, #316]	; (8000bb8 <HAL_GPIO_Init+0x348>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d007      	beq.n	8000a8e <HAL_GPIO_Init+0x21e>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a4e      	ldr	r2, [pc, #312]	; (8000bbc <HAL_GPIO_Init+0x34c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_GPIO_Init+0x21a>
 8000a86:	2309      	movs	r3, #9
 8000a88:	e012      	b.n	8000ab0 <HAL_GPIO_Init+0x240>
 8000a8a:	230a      	movs	r3, #10
 8000a8c:	e010      	b.n	8000ab0 <HAL_GPIO_Init+0x240>
 8000a8e:	2308      	movs	r3, #8
 8000a90:	e00e      	b.n	8000ab0 <HAL_GPIO_Init+0x240>
 8000a92:	2307      	movs	r3, #7
 8000a94:	e00c      	b.n	8000ab0 <HAL_GPIO_Init+0x240>
 8000a96:	2306      	movs	r3, #6
 8000a98:	e00a      	b.n	8000ab0 <HAL_GPIO_Init+0x240>
 8000a9a:	2305      	movs	r3, #5
 8000a9c:	e008      	b.n	8000ab0 <HAL_GPIO_Init+0x240>
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	e006      	b.n	8000ab0 <HAL_GPIO_Init+0x240>
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	e004      	b.n	8000ab0 <HAL_GPIO_Init+0x240>
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	e002      	b.n	8000ab0 <HAL_GPIO_Init+0x240>
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e000      	b.n	8000ab0 <HAL_GPIO_Init+0x240>
 8000aae:	2300      	movs	r3, #0
 8000ab0:	69fa      	ldr	r2, [r7, #28]
 8000ab2:	f002 0203 	and.w	r2, r2, #3
 8000ab6:	0092      	lsls	r2, r2, #2
 8000ab8:	4093      	lsls	r3, r2
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ac0:	4934      	ldr	r1, [pc, #208]	; (8000b94 <HAL_GPIO_Init+0x324>)
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	089b      	lsrs	r3, r3, #2
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ace:	4b3c      	ldr	r3, [pc, #240]	; (8000bc0 <HAL_GPIO_Init+0x350>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	4013      	ands	r3, r2
 8000adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000af2:	4a33      	ldr	r2, [pc, #204]	; (8000bc0 <HAL_GPIO_Init+0x350>)
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000af8:	4b31      	ldr	r3, [pc, #196]	; (8000bc0 <HAL_GPIO_Init+0x350>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	43db      	mvns	r3, r3
 8000b02:	69ba      	ldr	r2, [r7, #24]
 8000b04:	4013      	ands	r3, r2
 8000b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d003      	beq.n	8000b1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b1c:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <HAL_GPIO_Init+0x350>)
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b22:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <HAL_GPIO_Init+0x350>)
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b46:	4a1e      	ldr	r2, [pc, #120]	; (8000bc0 <HAL_GPIO_Init+0x350>)
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <HAL_GPIO_Init+0x350>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	69ba      	ldr	r2, [r7, #24]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d003      	beq.n	8000b70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b70:	4a13      	ldr	r2, [pc, #76]	; (8000bc0 <HAL_GPIO_Init+0x350>)
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	61fb      	str	r3, [r7, #28]
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	2b0f      	cmp	r3, #15
 8000b80:	f67f ae86 	bls.w	8000890 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000b84:	bf00      	nop
 8000b86:	3724      	adds	r7, #36	; 0x24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40013800 	.word	0x40013800
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40021400 	.word	0x40021400
 8000bb0:	40021800 	.word	0x40021800
 8000bb4:	40021c00 	.word	0x40021c00
 8000bb8:	40022000 	.word	0x40022000
 8000bbc:	40022400 	.word	0x40022400
 8000bc0:	40013c00 	.word	0x40013c00

08000bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	807b      	strh	r3, [r7, #2]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bd4:	787b      	ldrb	r3, [r7, #1]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bda:	887a      	ldrh	r2, [r7, #2]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000be0:	e003      	b.n	8000bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	041a      	lsls	r2, r3, #16
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	619a      	str	r2, [r3, #24]
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf8:	b08f      	sub	sp, #60	; 0x3c
 8000bfa:	af0a      	add	r7, sp, #40	; 0x28
 8000bfc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d101      	bne.n	8000c08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e10a      	b.n	8000e1e <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d106      	bne.n	8000c22 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f002 fc2b 	bl	8003478 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2203      	movs	r2, #3
 8000c26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 ff62 	bl	8002af8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	687e      	ldr	r6, [r7, #4]
 8000c3c:	466d      	mov	r5, sp
 8000c3e:	f106 0410 	add.w	r4, r6, #16
 8000c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c52:	1d33      	adds	r3, r6, #4
 8000c54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c56:	6838      	ldr	r0, [r7, #0]
 8000c58:	f001 fef6 	bl	8002a48 <USB_CoreInit>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d005      	beq.n	8000c6e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2202      	movs	r2, #2
 8000c66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e0d7      	b.n	8000e1e <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f001 ff50 	bl	8002b1a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e04a      	b.n	8000d16 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c80:	7bfa      	ldrb	r2, [r7, #15]
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	4613      	mov	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	1a9b      	subs	r3, r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	333d      	adds	r3, #61	; 0x3d
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c94:	7bfa      	ldrb	r2, [r7, #15]
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	1a9b      	subs	r3, r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	333c      	adds	r3, #60	; 0x3c
 8000ca4:	7bfa      	ldrb	r2, [r7, #15]
 8000ca6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ca8:	7bfa      	ldrb	r2, [r7, #15]
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	b298      	uxth	r0, r3
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	1a9b      	subs	r3, r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	440b      	add	r3, r1
 8000cba:	3342      	adds	r3, #66	; 0x42
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cc0:	7bfa      	ldrb	r2, [r7, #15]
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	1a9b      	subs	r3, r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	440b      	add	r3, r1
 8000cce:	333f      	adds	r3, #63	; 0x3f
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cd4:	7bfa      	ldrb	r2, [r7, #15]
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	1a9b      	subs	r3, r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	3344      	adds	r3, #68	; 0x44
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ce8:	7bfa      	ldrb	r2, [r7, #15]
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	1a9b      	subs	r3, r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	3348      	adds	r3, #72	; 0x48
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cfc:	7bfa      	ldrb	r2, [r7, #15]
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	4613      	mov	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	1a9b      	subs	r3, r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	440b      	add	r3, r1
 8000d0a:	3350      	adds	r3, #80	; 0x50
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	3301      	adds	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	7bfa      	ldrb	r2, [r7, #15]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d3af      	bcc.n	8000c80 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	e044      	b.n	8000db0 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d26:	7bfa      	ldrb	r2, [r7, #15]
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	1a9b      	subs	r3, r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	440b      	add	r3, r1
 8000d34:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d3c:	7bfa      	ldrb	r2, [r7, #15]
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	4613      	mov	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	1a9b      	subs	r3, r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	440b      	add	r3, r1
 8000d4a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000d4e:	7bfa      	ldrb	r2, [r7, #15]
 8000d50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	4613      	mov	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d68:	7bfa      	ldrb	r2, [r7, #15]
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	1a9b      	subs	r3, r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d7e:	7bfa      	ldrb	r2, [r7, #15]
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	4613      	mov	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d94:	7bfa      	ldrb	r2, [r7, #15]
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	1a9b      	subs	r3, r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	440b      	add	r3, r1
 8000da2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	3301      	adds	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	7bfa      	ldrb	r2, [r7, #15]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d3b5      	bcc.n	8000d26 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	687e      	ldr	r6, [r7, #4]
 8000dc2:	466d      	mov	r5, sp
 8000dc4:	f106 0410 	add.w	r4, r6, #16
 8000dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dd8:	1d33      	adds	r3, r6, #4
 8000dda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ddc:	6838      	ldr	r0, [r7, #0]
 8000dde:	f001 fec7 	bl	8002b70 <USB_DevInit>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d005      	beq.n	8000df4 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2202      	movs	r2, #2
 8000dec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e014      	b.n	8000e1e <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d102      	bne.n	8000e12 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 f80b 	bl	8000e28 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 f887 	bl	8002f2a <USB_DevDisconnect>

  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000e28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_PCDEx_ActivateLPM+0x44>)
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	10000003 	.word	0x10000003

08000e70 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40007000 	.word	0x40007000

08000e90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e25c      	b.n	8001360 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 8087 	beq.w	8000fc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eb4:	4b96      	ldr	r3, [pc, #600]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d00c      	beq.n	8000eda <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ec0:	4b93      	ldr	r3, [pc, #588]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f003 030c 	and.w	r3, r3, #12
 8000ec8:	2b08      	cmp	r3, #8
 8000eca:	d112      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x62>
 8000ecc:	4b90      	ldr	r3, [pc, #576]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ed8:	d10b      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eda:	4b8d      	ldr	r3, [pc, #564]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d06c      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x130>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d168      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e236      	b.n	8001360 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000efa:	d106      	bne.n	8000f0a <HAL_RCC_OscConfig+0x7a>
 8000efc:	4b84      	ldr	r3, [pc, #528]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a83      	ldr	r2, [pc, #524]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	e02e      	b.n	8000f68 <HAL_RCC_OscConfig+0xd8>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10c      	bne.n	8000f2c <HAL_RCC_OscConfig+0x9c>
 8000f12:	4b7f      	ldr	r3, [pc, #508]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a7e      	ldr	r2, [pc, #504]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b7c      	ldr	r3, [pc, #496]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a7b      	ldr	r2, [pc, #492]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e01d      	b.n	8000f68 <HAL_RCC_OscConfig+0xd8>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f34:	d10c      	bne.n	8000f50 <HAL_RCC_OscConfig+0xc0>
 8000f36:	4b76      	ldr	r3, [pc, #472]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a75      	ldr	r2, [pc, #468]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	4b73      	ldr	r3, [pc, #460]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a72      	ldr	r2, [pc, #456]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e00b      	b.n	8000f68 <HAL_RCC_OscConfig+0xd8>
 8000f50:	4b6f      	ldr	r3, [pc, #444]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a6e      	ldr	r2, [pc, #440]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b6c      	ldr	r3, [pc, #432]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a6b      	ldr	r2, [pc, #428]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d013      	beq.n	8000f98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f70:	f7ff fb1c 	bl	80005ac <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f78:	f7ff fb18 	bl	80005ac <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b64      	cmp	r3, #100	; 0x64
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e1ea      	b.n	8001360 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8a:	4b61      	ldr	r3, [pc, #388]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f0      	beq.n	8000f78 <HAL_RCC_OscConfig+0xe8>
 8000f96:	e014      	b.n	8000fc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f98:	f7ff fb08 	bl	80005ac <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa0:	f7ff fb04 	bl	80005ac <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b64      	cmp	r3, #100	; 0x64
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e1d6      	b.n	8001360 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb2:	4b57      	ldr	r3, [pc, #348]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f0      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x110>
 8000fbe:	e000      	b.n	8000fc2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d069      	beq.n	80010a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fce:	4b50      	ldr	r3, [pc, #320]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00b      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fda:	4b4d      	ldr	r3, [pc, #308]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	2b08      	cmp	r3, #8
 8000fe4:	d11c      	bne.n	8001020 <HAL_RCC_OscConfig+0x190>
 8000fe6:	4b4a      	ldr	r3, [pc, #296]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d116      	bne.n	8001020 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff2:	4b47      	ldr	r3, [pc, #284]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d005      	beq.n	800100a <HAL_RCC_OscConfig+0x17a>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d001      	beq.n	800100a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e1aa      	b.n	8001360 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100a:	4b41      	ldr	r3, [pc, #260]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	493d      	ldr	r1, [pc, #244]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 800101a:	4313      	orrs	r3, r2
 800101c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101e:	e040      	b.n	80010a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d023      	beq.n	8001070 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001028:	4b39      	ldr	r3, [pc, #228]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a38      	ldr	r2, [pc, #224]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001034:	f7ff faba 	bl	80005ac <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800103c:	f7ff fab6 	bl	80005ac <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e188      	b.n	8001360 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104e:	4b30      	ldr	r3, [pc, #192]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105a:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4929      	ldr	r1, [pc, #164]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 800106a:	4313      	orrs	r3, r2
 800106c:	600b      	str	r3, [r1, #0]
 800106e:	e018      	b.n	80010a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001070:	4b27      	ldr	r3, [pc, #156]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a26      	ldr	r2, [pc, #152]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8001076:	f023 0301 	bic.w	r3, r3, #1
 800107a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107c:	f7ff fa96 	bl	80005ac <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001084:	f7ff fa92 	bl	80005ac <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e164      	b.n	8001360 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001096:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f0      	bne.n	8001084 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d038      	beq.n	8001120 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d019      	beq.n	80010ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 80010b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ba:	4a15      	ldr	r2, [pc, #84]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c2:	f7ff fa73 	bl	80005ac <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ca:	f7ff fa6f 	bl	80005ac <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e141      	b.n	8001360 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 80010de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0f0      	beq.n	80010ca <HAL_RCC_OscConfig+0x23a>
 80010e8:	e01a      	b.n	8001120 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 80010ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_RCC_OscConfig+0x280>)
 80010f0:	f023 0301 	bic.w	r3, r3, #1
 80010f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010f6:	f7ff fa59 	bl	80005ac <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010fc:	e00a      	b.n	8001114 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010fe:	f7ff fa55 	bl	80005ac <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d903      	bls.n	8001114 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e127      	b.n	8001360 <HAL_RCC_OscConfig+0x4d0>
 8001110:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001114:	4b94      	ldr	r3, [pc, #592]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 8001116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1ee      	bne.n	80010fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80a4 	beq.w	8001276 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800112e:	4b8e      	ldr	r3, [pc, #568]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10d      	bne.n	8001156 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	4b8b      	ldr	r3, [pc, #556]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a8a      	ldr	r2, [pc, #552]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b88      	ldr	r3, [pc, #544]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001152:	2301      	movs	r3, #1
 8001154:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001156:	4b85      	ldr	r3, [pc, #532]	; (800136c <HAL_RCC_OscConfig+0x4dc>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115e:	2b00      	cmp	r3, #0
 8001160:	d118      	bne.n	8001194 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001162:	4b82      	ldr	r3, [pc, #520]	; (800136c <HAL_RCC_OscConfig+0x4dc>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a81      	ldr	r2, [pc, #516]	; (800136c <HAL_RCC_OscConfig+0x4dc>)
 8001168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800116e:	f7ff fa1d 	bl	80005ac <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001176:	f7ff fa19 	bl	80005ac <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b64      	cmp	r3, #100	; 0x64
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e0eb      	b.n	8001360 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001188:	4b78      	ldr	r3, [pc, #480]	; (800136c <HAL_RCC_OscConfig+0x4dc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d106      	bne.n	80011aa <HAL_RCC_OscConfig+0x31a>
 800119c:	4b72      	ldr	r3, [pc, #456]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 800119e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a0:	4a71      	ldr	r2, [pc, #452]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6713      	str	r3, [r2, #112]	; 0x70
 80011a8:	e02d      	b.n	8001206 <HAL_RCC_OscConfig+0x376>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0x33c>
 80011b2:	4b6d      	ldr	r3, [pc, #436]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 80011b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b6:	4a6c      	ldr	r2, [pc, #432]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 80011b8:	f023 0301 	bic.w	r3, r3, #1
 80011bc:	6713      	str	r3, [r2, #112]	; 0x70
 80011be:	4b6a      	ldr	r3, [pc, #424]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 80011c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c2:	4a69      	ldr	r2, [pc, #420]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 80011c4:	f023 0304 	bic.w	r3, r3, #4
 80011c8:	6713      	str	r3, [r2, #112]	; 0x70
 80011ca:	e01c      	b.n	8001206 <HAL_RCC_OscConfig+0x376>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	2b05      	cmp	r3, #5
 80011d2:	d10c      	bne.n	80011ee <HAL_RCC_OscConfig+0x35e>
 80011d4:	4b64      	ldr	r3, [pc, #400]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 80011d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d8:	4a63      	ldr	r2, [pc, #396]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6713      	str	r3, [r2, #112]	; 0x70
 80011e0:	4b61      	ldr	r3, [pc, #388]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 80011e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e4:	4a60      	ldr	r2, [pc, #384]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6713      	str	r3, [r2, #112]	; 0x70
 80011ec:	e00b      	b.n	8001206 <HAL_RCC_OscConfig+0x376>
 80011ee:	4b5e      	ldr	r3, [pc, #376]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 80011f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f2:	4a5d      	ldr	r2, [pc, #372]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6713      	str	r3, [r2, #112]	; 0x70
 80011fa:	4b5b      	ldr	r3, [pc, #364]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 80011fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fe:	4a5a      	ldr	r2, [pc, #360]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 8001200:	f023 0304 	bic.w	r3, r3, #4
 8001204:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d015      	beq.n	800123a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120e:	f7ff f9cd 	bl	80005ac <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001214:	e00a      	b.n	800122c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001216:	f7ff f9c9 	bl	80005ac <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	f241 3288 	movw	r2, #5000	; 0x1388
 8001224:	4293      	cmp	r3, r2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e099      	b.n	8001360 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122c:	4b4e      	ldr	r3, [pc, #312]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 800122e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0ee      	beq.n	8001216 <HAL_RCC_OscConfig+0x386>
 8001238:	e014      	b.n	8001264 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123a:	f7ff f9b7 	bl	80005ac <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001240:	e00a      	b.n	8001258 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001242:	f7ff f9b3 	bl	80005ac <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001250:	4293      	cmp	r3, r2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e083      	b.n	8001360 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001258:	4b43      	ldr	r3, [pc, #268]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 800125a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1ee      	bne.n	8001242 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d105      	bne.n	8001276 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800126a:	4b3f      	ldr	r3, [pc, #252]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	4a3e      	ldr	r2, [pc, #248]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 8001270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001274:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d06f      	beq.n	800135e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800127e:	4b3a      	ldr	r3, [pc, #232]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b08      	cmp	r3, #8
 8001288:	d067      	beq.n	800135a <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d149      	bne.n	8001326 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001292:	4b35      	ldr	r3, [pc, #212]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a34      	ldr	r2, [pc, #208]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 8001298:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800129c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129e:	f7ff f985 	bl	80005ac <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a6:	f7ff f981 	bl	80005ac <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e053      	b.n	8001360 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b8:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f0      	bne.n	80012a6 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69da      	ldr	r2, [r3, #28]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	019b      	lsls	r3, r3, #6
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	085b      	lsrs	r3, r3, #1
 80012dc:	3b01      	subs	r3, #1
 80012de:	041b      	lsls	r3, r3, #16
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e6:	061b      	lsls	r3, r3, #24
 80012e8:	4313      	orrs	r3, r2
 80012ea:	4a1f      	ldr	r2, [pc, #124]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 80012ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012f0:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 80012f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fe:	f7ff f955 	bl	80005ac <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001306:	f7ff f951 	bl	80005ac <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e023      	b.n	8001360 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x476>
 8001324:	e01b      	b.n	800135e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a0f      	ldr	r2, [pc, #60]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 800132c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001332:	f7ff f93b 	bl	80005ac <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133a:	f7ff f937 	bl	80005ac <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e009      	b.n	8001360 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_RCC_OscConfig+0x4d8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f0      	bne.n	800133a <HAL_RCC_OscConfig+0x4aa>
 8001358:	e001      	b.n	800135e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000

08001370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0ce      	b.n	8001526 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001388:	4b69      	ldr	r3, [pc, #420]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 030f 	and.w	r3, r3, #15
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d910      	bls.n	80013b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001396:	4b66      	ldr	r3, [pc, #408]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 020f 	bic.w	r2, r3, #15
 800139e:	4964      	ldr	r1, [pc, #400]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a6:	4b62      	ldr	r3, [pc, #392]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0b6      	b.n	8001526 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d020      	beq.n	8001406 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d0:	4b58      	ldr	r3, [pc, #352]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	4a57      	ldr	r2, [pc, #348]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e8:	4b52      	ldr	r3, [pc, #328]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	4a51      	ldr	r2, [pc, #324]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f4:	4b4f      	ldr	r3, [pc, #316]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	494c      	ldr	r1, [pc, #304]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	4313      	orrs	r3, r2
 8001404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d040      	beq.n	8001494 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d107      	bne.n	800142a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	4b46      	ldr	r3, [pc, #280]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d115      	bne.n	8001452 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e07d      	b.n	8001526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d107      	bne.n	8001442 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001432:	4b40      	ldr	r3, [pc, #256]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d109      	bne.n	8001452 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e071      	b.n	8001526 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001442:	4b3c      	ldr	r3, [pc, #240]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e069      	b.n	8001526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001452:	4b38      	ldr	r3, [pc, #224]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f023 0203 	bic.w	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4935      	ldr	r1, [pc, #212]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	4313      	orrs	r3, r2
 8001462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001464:	f7ff f8a2 	bl	80005ac <HAL_GetTick>
 8001468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146a:	e00a      	b.n	8001482 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146c:	f7ff f89e 	bl	80005ac <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	; 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e051      	b.n	8001526 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001482:	4b2c      	ldr	r3, [pc, #176]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 020c 	and.w	r2, r3, #12
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	429a      	cmp	r2, r3
 8001492:	d1eb      	bne.n	800146c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001494:	4b26      	ldr	r3, [pc, #152]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d210      	bcs.n	80014c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	4b23      	ldr	r3, [pc, #140]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 020f 	bic.w	r2, r3, #15
 80014aa:	4921      	ldr	r1, [pc, #132]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e030      	b.n	8001526 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4915      	ldr	r1, [pc, #84]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d009      	beq.n	8001502 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	490d      	ldr	r1, [pc, #52]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001502:	f000 f81d 	bl	8001540 <HAL_RCC_GetSysClockFreq>
 8001506:	4601      	mov	r1, r0
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	4a09      	ldr	r2, [pc, #36]	; (8001538 <HAL_RCC_ClockConfig+0x1c8>)
 8001514:	5cd3      	ldrb	r3, [r2, r3]
 8001516:	fa21 f303 	lsr.w	r3, r1, r3
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <HAL_RCC_ClockConfig+0x1cc>)
 800151c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800151e:	2000      	movs	r0, #0
 8001520:	f7ff f800 	bl	8000524 <HAL_InitTick>

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023c00 	.word	0x40023c00
 8001534:	40023800 	.word	0x40023800
 8001538:	080036d0 	.word	0x080036d0
 800153c:	20000008 	.word	0x20000008

08001540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001556:	4b63      	ldr	r3, [pc, #396]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b04      	cmp	r3, #4
 8001560:	d007      	beq.n	8001572 <HAL_RCC_GetSysClockFreq+0x32>
 8001562:	2b08      	cmp	r3, #8
 8001564:	d008      	beq.n	8001578 <HAL_RCC_GetSysClockFreq+0x38>
 8001566:	2b00      	cmp	r3, #0
 8001568:	f040 80b4 	bne.w	80016d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800156c:	4b5e      	ldr	r3, [pc, #376]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800156e:	60bb      	str	r3, [r7, #8]
       break;
 8001570:	e0b3      	b.n	80016da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001572:	4b5e      	ldr	r3, [pc, #376]	; (80016ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001574:	60bb      	str	r3, [r7, #8]
      break;
 8001576:	e0b0      	b.n	80016da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001578:	4b5a      	ldr	r3, [pc, #360]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001580:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001582:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d04a      	beq.n	8001624 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800158e:	4b55      	ldr	r3, [pc, #340]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	099b      	lsrs	r3, r3, #6
 8001594:	f04f 0400 	mov.w	r4, #0
 8001598:	f240 11ff 	movw	r1, #511	; 0x1ff
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	ea03 0501 	and.w	r5, r3, r1
 80015a4:	ea04 0602 	and.w	r6, r4, r2
 80015a8:	4629      	mov	r1, r5
 80015aa:	4632      	mov	r2, r6
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	f04f 0400 	mov.w	r4, #0
 80015b4:	0154      	lsls	r4, r2, #5
 80015b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015ba:	014b      	lsls	r3, r1, #5
 80015bc:	4619      	mov	r1, r3
 80015be:	4622      	mov	r2, r4
 80015c0:	1b49      	subs	r1, r1, r5
 80015c2:	eb62 0206 	sbc.w	r2, r2, r6
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	f04f 0400 	mov.w	r4, #0
 80015ce:	0194      	lsls	r4, r2, #6
 80015d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015d4:	018b      	lsls	r3, r1, #6
 80015d6:	1a5b      	subs	r3, r3, r1
 80015d8:	eb64 0402 	sbc.w	r4, r4, r2
 80015dc:	f04f 0100 	mov.w	r1, #0
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	00e2      	lsls	r2, r4, #3
 80015e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015ea:	00d9      	lsls	r1, r3, #3
 80015ec:	460b      	mov	r3, r1
 80015ee:	4614      	mov	r4, r2
 80015f0:	195b      	adds	r3, r3, r5
 80015f2:	eb44 0406 	adc.w	r4, r4, r6
 80015f6:	f04f 0100 	mov.w	r1, #0
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	0262      	lsls	r2, r4, #9
 8001600:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001604:	0259      	lsls	r1, r3, #9
 8001606:	460b      	mov	r3, r1
 8001608:	4614      	mov	r4, r2
 800160a:	4618      	mov	r0, r3
 800160c:	4621      	mov	r1, r4
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f04f 0400 	mov.w	r4, #0
 8001614:	461a      	mov	r2, r3
 8001616:	4623      	mov	r3, r4
 8001618:	f7fe fdf6 	bl	8000208 <__aeabi_uldivmod>
 800161c:	4603      	mov	r3, r0
 800161e:	460c      	mov	r4, r1
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	e049      	b.n	80016b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001624:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	099b      	lsrs	r3, r3, #6
 800162a:	f04f 0400 	mov.w	r4, #0
 800162e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	ea03 0501 	and.w	r5, r3, r1
 800163a:	ea04 0602 	and.w	r6, r4, r2
 800163e:	4629      	mov	r1, r5
 8001640:	4632      	mov	r2, r6
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	f04f 0400 	mov.w	r4, #0
 800164a:	0154      	lsls	r4, r2, #5
 800164c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001650:	014b      	lsls	r3, r1, #5
 8001652:	4619      	mov	r1, r3
 8001654:	4622      	mov	r2, r4
 8001656:	1b49      	subs	r1, r1, r5
 8001658:	eb62 0206 	sbc.w	r2, r2, r6
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	f04f 0400 	mov.w	r4, #0
 8001664:	0194      	lsls	r4, r2, #6
 8001666:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800166a:	018b      	lsls	r3, r1, #6
 800166c:	1a5b      	subs	r3, r3, r1
 800166e:	eb64 0402 	sbc.w	r4, r4, r2
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	00e2      	lsls	r2, r4, #3
 800167c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001680:	00d9      	lsls	r1, r3, #3
 8001682:	460b      	mov	r3, r1
 8001684:	4614      	mov	r4, r2
 8001686:	195b      	adds	r3, r3, r5
 8001688:	eb44 0406 	adc.w	r4, r4, r6
 800168c:	f04f 0100 	mov.w	r1, #0
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	02a2      	lsls	r2, r4, #10
 8001696:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800169a:	0299      	lsls	r1, r3, #10
 800169c:	460b      	mov	r3, r1
 800169e:	4614      	mov	r4, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	4621      	mov	r1, r4
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f04f 0400 	mov.w	r4, #0
 80016aa:	461a      	mov	r2, r3
 80016ac:	4623      	mov	r3, r4
 80016ae:	f7fe fdab 	bl	8000208 <__aeabi_uldivmod>
 80016b2:	4603      	mov	r3, r0
 80016b4:	460c      	mov	r4, r1
 80016b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	0c1b      	lsrs	r3, r3, #16
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	3301      	adds	r3, #1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d0:	60bb      	str	r3, [r7, #8]
      break;
 80016d2:	e002      	b.n	80016da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80016d6:	60bb      	str	r3, [r7, #8]
      break;
 80016d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016da:	68bb      	ldr	r3, [r7, #8]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e4:	40023800 	.word	0x40023800
 80016e8:	00f42400 	.word	0x00f42400
 80016ec:	007a1200 	.word	0x007a1200

080016f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_RCC_GetHCLKFreq+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000008 	.word	0x20000008

08001708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800170c:	f7ff fff0 	bl	80016f0 <HAL_RCC_GetHCLKFreq>
 8001710:	4601      	mov	r1, r0
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	0a9b      	lsrs	r3, r3, #10
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	4a03      	ldr	r2, [pc, #12]	; (800172c <HAL_RCC_GetPCLK1Freq+0x24>)
 800171e:	5cd3      	ldrb	r3, [r2, r3]
 8001720:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001724:	4618      	mov	r0, r3
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40023800 	.word	0x40023800
 800172c:	080036e0 	.word	0x080036e0

08001730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001734:	f7ff ffdc 	bl	80016f0 <HAL_RCC_GetHCLKFreq>
 8001738:	4601      	mov	r1, r0
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	0b5b      	lsrs	r3, r3, #13
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	4a03      	ldr	r2, [pc, #12]	; (8001754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001746:	5cd3      	ldrb	r3, [r2, r3]
 8001748:	fa21 f303 	lsr.w	r3, r1, r3
}
 800174c:	4618      	mov	r0, r3
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40023800 	.word	0x40023800
 8001754:	080036e0 	.word	0x080036e0

08001758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d012      	beq.n	80017a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001780:	4b69      	ldr	r3, [pc, #420]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a68      	ldr	r2, [pc, #416]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001786:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800178a:	6093      	str	r3, [r2, #8]
 800178c:	4b66      	ldr	r3, [pc, #408]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001794:	4964      	ldr	r1, [pc, #400]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80017a2:	2301      	movs	r3, #1
 80017a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d017      	beq.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017b2:	4b5d      	ldr	r3, [pc, #372]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c0:	4959      	ldr	r1, [pc, #356]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017d0:	d101      	bne.n	80017d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d017      	beq.n	800181e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80017ee:	4b4e      	ldr	r3, [pc, #312]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	494a      	ldr	r1, [pc, #296]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800180c:	d101      	bne.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800181a:	2301      	movs	r3, #1
 800181c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800182a:	2301      	movs	r3, #1
 800182c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0320 	and.w	r3, r3, #32
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 808b 	beq.w	8001952 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800183c:	4b3a      	ldr	r3, [pc, #232]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	4a39      	ldr	r2, [pc, #228]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001846:	6413      	str	r3, [r2, #64]	; 0x40
 8001848:	4b37      	ldr	r3, [pc, #220]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001854:	4b35      	ldr	r3, [pc, #212]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a34      	ldr	r2, [pc, #208]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800185a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001860:	f7fe fea4 	bl	80005ac <HAL_GetTick>
 8001864:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001866:	e008      	b.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001868:	f7fe fea0 	bl	80005ac <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	; 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e355      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800187a:	4b2c      	ldr	r3, [pc, #176]	; (800192c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001886:	4b28      	ldr	r3, [pc, #160]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800188e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d035      	beq.n	8001902 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d02e      	beq.n	8001902 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018a4:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018ae:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	4a1a      	ldr	r2, [pc, #104]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80018c6:	4a18      	ldr	r2, [pc, #96]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80018cc:	4b16      	ldr	r3, [pc, #88]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d114      	bne.n	8001902 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7fe fe68 	bl	80005ac <HAL_GetTick>
 80018dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018de:	e00a      	b.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e0:	f7fe fe64 	bl	80005ac <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e317      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0ee      	beq.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800190a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800190e:	d111      	bne.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800191e:	400b      	ands	r3, r1
 8001920:	4901      	ldr	r1, [pc, #4]	; (8001928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
 8001926:	e00b      	b.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001928:	40023800 	.word	0x40023800
 800192c:	40007000 	.word	0x40007000
 8001930:	0ffffcff 	.word	0x0ffffcff
 8001934:	4bb0      	ldr	r3, [pc, #704]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	4aaf      	ldr	r2, [pc, #700]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800193a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800193e:	6093      	str	r3, [r2, #8]
 8001940:	4bad      	ldr	r3, [pc, #692]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001942:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194c:	49aa      	ldr	r1, [pc, #680]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800194e:	4313      	orrs	r3, r2
 8001950:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	2b00      	cmp	r3, #0
 800195c:	d010      	beq.n	8001980 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800195e:	4ba6      	ldr	r3, [pc, #664]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001964:	4aa4      	ldr	r2, [pc, #656]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800196a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800196e:	4ba2      	ldr	r3, [pc, #648]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001970:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001978:	499f      	ldr	r1, [pc, #636]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800197a:	4313      	orrs	r3, r2
 800197c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00a      	beq.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800198c:	4b9a      	ldr	r3, [pc, #616]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800198e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001992:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800199a:	4997      	ldr	r1, [pc, #604]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800199c:	4313      	orrs	r3, r2
 800199e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00a      	beq.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80019ae:	4b92      	ldr	r3, [pc, #584]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019bc:	498e      	ldr	r1, [pc, #568]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00a      	beq.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80019d0:	4b89      	ldr	r3, [pc, #548]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019de:	4986      	ldr	r1, [pc, #536]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00a      	beq.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80019f2:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a00:	497d      	ldr	r1, [pc, #500]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00a      	beq.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a14:	4b78      	ldr	r3, [pc, #480]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1a:	f023 0203 	bic.w	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4975      	ldr	r1, [pc, #468]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00a      	beq.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a36:	4b70      	ldr	r3, [pc, #448]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3c:	f023 020c 	bic.w	r2, r3, #12
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a44:	496c      	ldr	r1, [pc, #432]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00a      	beq.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001a58:	4b67      	ldr	r3, [pc, #412]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	4964      	ldr	r1, [pc, #400]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00a      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a7a:	4b5f      	ldr	r3, [pc, #380]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a80:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a88:	495b      	ldr	r1, [pc, #364]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00a      	beq.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001a9c:	4b56      	ldr	r3, [pc, #344]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aaa:	4953      	ldr	r1, [pc, #332]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00a      	beq.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001abe:	4b4e      	ldr	r3, [pc, #312]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	494a      	ldr	r1, [pc, #296]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00a      	beq.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ae0:	4b45      	ldr	r3, [pc, #276]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aee:	4942      	ldr	r1, [pc, #264]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00a      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00a      	beq.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b24:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b32:	4931      	ldr	r1, [pc, #196]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d011      	beq.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001b46:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b54:	4928      	ldr	r1, [pc, #160]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b64:	d101      	bne.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001b66:	2301      	movs	r3, #1
 8001b68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00a      	beq.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b94:	4918      	ldr	r1, [pc, #96]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00b      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bb8:	490f      	ldr	r1, [pc, #60]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bce:	f040 80d8 	bne.w	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001bd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bde:	f7fe fce5 	bl	80005ac <HAL_GetTick>
 8001be2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001be6:	f7fe fce1 	bl	80005ac <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b64      	cmp	r3, #100	; 0x64
 8001bf2:	d903      	bls.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e196      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001bf8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bfc:	4b6c      	ldr	r3, [pc, #432]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1ee      	bne.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d021      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d11d      	bne.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c1c:	4b64      	ldr	r3, [pc, #400]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c22:	0c1b      	lsrs	r3, r3, #16
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c2a:	4b61      	ldr	r3, [pc, #388]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c30:	0e1b      	lsrs	r3, r3, #24
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	019a      	lsls	r2, r3, #6
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	041b      	lsls	r3, r3, #16
 8001c42:	431a      	orrs	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	061b      	lsls	r3, r3, #24
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	071b      	lsls	r3, r3, #28
 8001c50:	4957      	ldr	r1, [pc, #348]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d004      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c6c:	d00a      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d02e      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c82:	d129      	bne.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001c84:	4b4a      	ldr	r3, [pc, #296]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c8a:	0c1b      	lsrs	r3, r3, #16
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c92:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c98:	0f1b      	lsrs	r3, r3, #28
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	019a      	lsls	r2, r3, #6
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	041b      	lsls	r3, r3, #16
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	061b      	lsls	r3, r3, #24
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	071b      	lsls	r3, r3, #28
 8001cb8:	493d      	ldr	r1, [pc, #244]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001cc0:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cc6:	f023 021f 	bic.w	r2, r3, #31
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	4937      	ldr	r1, [pc, #220]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d01d      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ce4:	4b32      	ldr	r3, [pc, #200]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cea:	0e1b      	lsrs	r3, r3, #24
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001cf2:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cf8:	0f1b      	lsrs	r3, r3, #28
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	019a      	lsls	r2, r3, #6
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	041b      	lsls	r3, r3, #16
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	061b      	lsls	r3, r3, #24
 8001d12:	431a      	orrs	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	071b      	lsls	r3, r3, #28
 8001d18:	4925      	ldr	r1, [pc, #148]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d011      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	019a      	lsls	r2, r3, #6
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	041b      	lsls	r3, r3, #16
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	061b      	lsls	r3, r3, #24
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	071b      	lsls	r3, r3, #28
 8001d48:	4919      	ldr	r1, [pc, #100]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d50:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a16      	ldr	r2, [pc, #88]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d5c:	f7fe fc26 	bl	80005ac <HAL_GetTick>
 8001d60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d64:	f7fe fc22 	bl	80005ac <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	; 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0d7      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	f040 80cd 	bne.w	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a08      	ldr	r2, [pc, #32]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d96:	f7fe fc09 	bl	80005ac <HAL_GetTick>
 8001d9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d9e:	f7fe fc05 	bl	80005ac <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b64      	cmp	r3, #100	; 0x64
 8001daa:	d903      	bls.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0ba      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001db0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001db4:	4b5e      	ldr	r3, [pc, #376]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dc0:	d0ed      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d009      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d02e      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d12a      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001dea:	4b51      	ldr	r3, [pc, #324]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df0:	0c1b      	lsrs	r3, r3, #16
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001df8:	4b4d      	ldr	r3, [pc, #308]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfe:	0f1b      	lsrs	r3, r3, #28
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	019a      	lsls	r2, r3, #6
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	041b      	lsls	r3, r3, #16
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	061b      	lsls	r3, r3, #24
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	071b      	lsls	r3, r3, #28
 8001e1e:	4944      	ldr	r1, [pc, #272]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e26:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	3b01      	subs	r3, #1
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	493d      	ldr	r1, [pc, #244]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d022      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e54:	d11d      	bne.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e56:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5c:	0e1b      	lsrs	r3, r3, #24
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001e64:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6a:	0f1b      	lsrs	r3, r3, #28
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	019a      	lsls	r2, r3, #6
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	041b      	lsls	r3, r3, #16
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	061b      	lsls	r3, r3, #24
 8001e84:	431a      	orrs	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	071b      	lsls	r3, r3, #28
 8001e8a:	4929      	ldr	r1, [pc, #164]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d028      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea4:	0e1b      	lsrs	r3, r3, #24
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001eac:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb2:	0c1b      	lsrs	r3, r3, #16
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	019a      	lsls	r2, r3, #6
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	041b      	lsls	r3, r3, #16
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	061b      	lsls	r3, r3, #24
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	071b      	lsls	r3, r3, #28
 8001ed2:	4917      	ldr	r1, [pc, #92]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	4911      	ldr	r1, [pc, #68]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001efc:	f7fe fb56 	bl	80005ac <HAL_GetTick>
 8001f00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f04:	f7fe fb52 	bl	80005ac <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e007      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f22:	d1ef      	bne.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800

08001f34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e040      	b.n	8001fc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f001 fa42 	bl	80033e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2224      	movs	r2, #36	; 0x24
 8001f60:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0201 	bic.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f95c 	bl	8002230 <UART_SetConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e022      	b.n	8001fc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fbf4 	bl	8002778 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fae:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 fc7b 	bl	80028bc <UART_CheckIdleState>
 8001fc6:	4603      	mov	r3, r0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d113      	bne.n	8002026 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f003 0320 	and.w	r3, r3, #32
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00e      	beq.n	8002026 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 80eb 	beq.w	80021f2 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
      }
      return;
 8002024:	e0e5      	b.n	80021f2 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80c0 	beq.w	80021ae <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 80b5 	beq.w	80021ae <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00e      	beq.n	800206c <HAL_UART_IRQHandler+0x9c>
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d009      	beq.n	800206c <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2201      	movs	r2, #1
 800205e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002064:	f043 0201 	orr.w	r2, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00e      	beq.n	8002094 <HAL_UART_IRQHandler+0xc4>
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d009      	beq.n	8002094 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2202      	movs	r2, #2
 8002086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800208c:	f043 0204 	orr.w	r2, r3, #4
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00e      	beq.n	80020bc <HAL_UART_IRQHandler+0xec>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d009      	beq.n	80020bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2204      	movs	r2, #4
 80020ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020b4:	f043 0202 	orr.w	r2, r3, #2
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d013      	beq.n	80020ee <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d104      	bne.n	80020da <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d009      	beq.n	80020ee <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2208      	movs	r2, #8
 80020e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020e6:	f043 0208 	orr.w	r2, r3, #8
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d07f      	beq.n	80021f6 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00c      	beq.n	800211a <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800211e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	2b40      	cmp	r3, #64	; 0x40
 800212c:	d004      	beq.n	8002138 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002134:	2b00      	cmp	r3, #0
 8002136:	d031      	beq.n	800219c <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fc36 	bl	80029aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002148:	2b40      	cmp	r3, #64	; 0x40
 800214a:	d123      	bne.n	8002194 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800215a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002168:	4a26      	ldr	r2, [pc, #152]	; (8002204 <HAL_UART_IRQHandler+0x234>)
 800216a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fb5a 	bl	800082a <HAL_DMA_Abort_IT>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d016      	beq.n	80021aa <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002186:	4610      	mov	r0, r2
 8002188:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800218a:	e00e      	b.n	80021aa <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f845 	bl	800221c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002192:	e00a      	b.n	80021aa <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f841 	bl	800221c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800219a:	e006      	b.n	80021aa <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f83d 	bl	800221c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80021a8:	e025      	b.n	80021f6 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021aa:	bf00      	nop
    return;
 80021ac:	e023      	b.n	80021f6 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00d      	beq.n	80021d4 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d008      	beq.n	80021d4 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d017      	beq.n	80021fa <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
    }
    return;
 80021d2:	e012      	b.n	80021fa <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00e      	beq.n	80021fc <HAL_UART_IRQHandler+0x22c>
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d009      	beq.n	80021fc <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 fc14 	bl	8002a16 <UART_EndTransmit_IT>
    return;
 80021ee:	bf00      	nop
 80021f0:	e004      	b.n	80021fc <HAL_UART_IRQHandler+0x22c>
      return;
 80021f2:	bf00      	nop
 80021f4:	e002      	b.n	80021fc <HAL_UART_IRQHandler+0x22c>
    return;
 80021f6:	bf00      	nop
 80021f8:	e000      	b.n	80021fc <HAL_UART_IRQHandler+0x22c>
    return;
 80021fa:	bf00      	nop
  }

}
 80021fc:	3720      	adds	r7, #32
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	080029eb 	.word	0x080029eb

08002208 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002238:	2300      	movs	r3, #0
 800223a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4bb1      	ldr	r3, [pc, #708]	; (8002524 <UART_SetConfig+0x2f4>)
 8002260:	4013      	ands	r3, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	6939      	ldr	r1, [r7, #16]
 8002268:	430b      	orrs	r3, r1
 800226a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a9f      	ldr	r2, [pc, #636]	; (8002528 <UART_SetConfig+0x2f8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d121      	bne.n	80022f4 <UART_SetConfig+0xc4>
 80022b0:	4b9e      	ldr	r3, [pc, #632]	; (800252c <UART_SetConfig+0x2fc>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d816      	bhi.n	80022ec <UART_SetConfig+0xbc>
 80022be:	a201      	add	r2, pc, #4	; (adr r2, 80022c4 <UART_SetConfig+0x94>)
 80022c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c4:	080022d5 	.word	0x080022d5
 80022c8:	080022e1 	.word	0x080022e1
 80022cc:	080022db 	.word	0x080022db
 80022d0:	080022e7 	.word	0x080022e7
 80022d4:	2301      	movs	r3, #1
 80022d6:	77fb      	strb	r3, [r7, #31]
 80022d8:	e151      	b.n	800257e <UART_SetConfig+0x34e>
 80022da:	2302      	movs	r3, #2
 80022dc:	77fb      	strb	r3, [r7, #31]
 80022de:	e14e      	b.n	800257e <UART_SetConfig+0x34e>
 80022e0:	2304      	movs	r3, #4
 80022e2:	77fb      	strb	r3, [r7, #31]
 80022e4:	e14b      	b.n	800257e <UART_SetConfig+0x34e>
 80022e6:	2308      	movs	r3, #8
 80022e8:	77fb      	strb	r3, [r7, #31]
 80022ea:	e148      	b.n	800257e <UART_SetConfig+0x34e>
 80022ec:	2310      	movs	r3, #16
 80022ee:	77fb      	strb	r3, [r7, #31]
 80022f0:	bf00      	nop
 80022f2:	e144      	b.n	800257e <UART_SetConfig+0x34e>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a8d      	ldr	r2, [pc, #564]	; (8002530 <UART_SetConfig+0x300>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d134      	bne.n	8002368 <UART_SetConfig+0x138>
 80022fe:	4b8b      	ldr	r3, [pc, #556]	; (800252c <UART_SetConfig+0x2fc>)
 8002300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b0c      	cmp	r3, #12
 800230a:	d829      	bhi.n	8002360 <UART_SetConfig+0x130>
 800230c:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <UART_SetConfig+0xe4>)
 800230e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002312:	bf00      	nop
 8002314:	08002349 	.word	0x08002349
 8002318:	08002361 	.word	0x08002361
 800231c:	08002361 	.word	0x08002361
 8002320:	08002361 	.word	0x08002361
 8002324:	08002355 	.word	0x08002355
 8002328:	08002361 	.word	0x08002361
 800232c:	08002361 	.word	0x08002361
 8002330:	08002361 	.word	0x08002361
 8002334:	0800234f 	.word	0x0800234f
 8002338:	08002361 	.word	0x08002361
 800233c:	08002361 	.word	0x08002361
 8002340:	08002361 	.word	0x08002361
 8002344:	0800235b 	.word	0x0800235b
 8002348:	2300      	movs	r3, #0
 800234a:	77fb      	strb	r3, [r7, #31]
 800234c:	e117      	b.n	800257e <UART_SetConfig+0x34e>
 800234e:	2302      	movs	r3, #2
 8002350:	77fb      	strb	r3, [r7, #31]
 8002352:	e114      	b.n	800257e <UART_SetConfig+0x34e>
 8002354:	2304      	movs	r3, #4
 8002356:	77fb      	strb	r3, [r7, #31]
 8002358:	e111      	b.n	800257e <UART_SetConfig+0x34e>
 800235a:	2308      	movs	r3, #8
 800235c:	77fb      	strb	r3, [r7, #31]
 800235e:	e10e      	b.n	800257e <UART_SetConfig+0x34e>
 8002360:	2310      	movs	r3, #16
 8002362:	77fb      	strb	r3, [r7, #31]
 8002364:	bf00      	nop
 8002366:	e10a      	b.n	800257e <UART_SetConfig+0x34e>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a71      	ldr	r2, [pc, #452]	; (8002534 <UART_SetConfig+0x304>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d120      	bne.n	80023b4 <UART_SetConfig+0x184>
 8002372:	4b6e      	ldr	r3, [pc, #440]	; (800252c <UART_SetConfig+0x2fc>)
 8002374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002378:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800237c:	2b10      	cmp	r3, #16
 800237e:	d00f      	beq.n	80023a0 <UART_SetConfig+0x170>
 8002380:	2b10      	cmp	r3, #16
 8002382:	d802      	bhi.n	800238a <UART_SetConfig+0x15a>
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <UART_SetConfig+0x164>
 8002388:	e010      	b.n	80023ac <UART_SetConfig+0x17c>
 800238a:	2b20      	cmp	r3, #32
 800238c:	d005      	beq.n	800239a <UART_SetConfig+0x16a>
 800238e:	2b30      	cmp	r3, #48	; 0x30
 8002390:	d009      	beq.n	80023a6 <UART_SetConfig+0x176>
 8002392:	e00b      	b.n	80023ac <UART_SetConfig+0x17c>
 8002394:	2300      	movs	r3, #0
 8002396:	77fb      	strb	r3, [r7, #31]
 8002398:	e0f1      	b.n	800257e <UART_SetConfig+0x34e>
 800239a:	2302      	movs	r3, #2
 800239c:	77fb      	strb	r3, [r7, #31]
 800239e:	e0ee      	b.n	800257e <UART_SetConfig+0x34e>
 80023a0:	2304      	movs	r3, #4
 80023a2:	77fb      	strb	r3, [r7, #31]
 80023a4:	e0eb      	b.n	800257e <UART_SetConfig+0x34e>
 80023a6:	2308      	movs	r3, #8
 80023a8:	77fb      	strb	r3, [r7, #31]
 80023aa:	e0e8      	b.n	800257e <UART_SetConfig+0x34e>
 80023ac:	2310      	movs	r3, #16
 80023ae:	77fb      	strb	r3, [r7, #31]
 80023b0:	bf00      	nop
 80023b2:	e0e4      	b.n	800257e <UART_SetConfig+0x34e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a5f      	ldr	r2, [pc, #380]	; (8002538 <UART_SetConfig+0x308>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d120      	bne.n	8002400 <UART_SetConfig+0x1d0>
 80023be:	4b5b      	ldr	r3, [pc, #364]	; (800252c <UART_SetConfig+0x2fc>)
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80023c8:	2b40      	cmp	r3, #64	; 0x40
 80023ca:	d00f      	beq.n	80023ec <UART_SetConfig+0x1bc>
 80023cc:	2b40      	cmp	r3, #64	; 0x40
 80023ce:	d802      	bhi.n	80023d6 <UART_SetConfig+0x1a6>
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <UART_SetConfig+0x1b0>
 80023d4:	e010      	b.n	80023f8 <UART_SetConfig+0x1c8>
 80023d6:	2b80      	cmp	r3, #128	; 0x80
 80023d8:	d005      	beq.n	80023e6 <UART_SetConfig+0x1b6>
 80023da:	2bc0      	cmp	r3, #192	; 0xc0
 80023dc:	d009      	beq.n	80023f2 <UART_SetConfig+0x1c2>
 80023de:	e00b      	b.n	80023f8 <UART_SetConfig+0x1c8>
 80023e0:	2300      	movs	r3, #0
 80023e2:	77fb      	strb	r3, [r7, #31]
 80023e4:	e0cb      	b.n	800257e <UART_SetConfig+0x34e>
 80023e6:	2302      	movs	r3, #2
 80023e8:	77fb      	strb	r3, [r7, #31]
 80023ea:	e0c8      	b.n	800257e <UART_SetConfig+0x34e>
 80023ec:	2304      	movs	r3, #4
 80023ee:	77fb      	strb	r3, [r7, #31]
 80023f0:	e0c5      	b.n	800257e <UART_SetConfig+0x34e>
 80023f2:	2308      	movs	r3, #8
 80023f4:	77fb      	strb	r3, [r7, #31]
 80023f6:	e0c2      	b.n	800257e <UART_SetConfig+0x34e>
 80023f8:	2310      	movs	r3, #16
 80023fa:	77fb      	strb	r3, [r7, #31]
 80023fc:	bf00      	nop
 80023fe:	e0be      	b.n	800257e <UART_SetConfig+0x34e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a4d      	ldr	r2, [pc, #308]	; (800253c <UART_SetConfig+0x30c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d124      	bne.n	8002454 <UART_SetConfig+0x224>
 800240a:	4b48      	ldr	r3, [pc, #288]	; (800252c <UART_SetConfig+0x2fc>)
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002418:	d012      	beq.n	8002440 <UART_SetConfig+0x210>
 800241a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800241e:	d802      	bhi.n	8002426 <UART_SetConfig+0x1f6>
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <UART_SetConfig+0x204>
 8002424:	e012      	b.n	800244c <UART_SetConfig+0x21c>
 8002426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800242a:	d006      	beq.n	800243a <UART_SetConfig+0x20a>
 800242c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002430:	d009      	beq.n	8002446 <UART_SetConfig+0x216>
 8002432:	e00b      	b.n	800244c <UART_SetConfig+0x21c>
 8002434:	2300      	movs	r3, #0
 8002436:	77fb      	strb	r3, [r7, #31]
 8002438:	e0a1      	b.n	800257e <UART_SetConfig+0x34e>
 800243a:	2302      	movs	r3, #2
 800243c:	77fb      	strb	r3, [r7, #31]
 800243e:	e09e      	b.n	800257e <UART_SetConfig+0x34e>
 8002440:	2304      	movs	r3, #4
 8002442:	77fb      	strb	r3, [r7, #31]
 8002444:	e09b      	b.n	800257e <UART_SetConfig+0x34e>
 8002446:	2308      	movs	r3, #8
 8002448:	77fb      	strb	r3, [r7, #31]
 800244a:	e098      	b.n	800257e <UART_SetConfig+0x34e>
 800244c:	2310      	movs	r3, #16
 800244e:	77fb      	strb	r3, [r7, #31]
 8002450:	bf00      	nop
 8002452:	e094      	b.n	800257e <UART_SetConfig+0x34e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a39      	ldr	r2, [pc, #228]	; (8002540 <UART_SetConfig+0x310>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d124      	bne.n	80024a8 <UART_SetConfig+0x278>
 800245e:	4b33      	ldr	r3, [pc, #204]	; (800252c <UART_SetConfig+0x2fc>)
 8002460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002464:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246c:	d012      	beq.n	8002494 <UART_SetConfig+0x264>
 800246e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002472:	d802      	bhi.n	800247a <UART_SetConfig+0x24a>
 8002474:	2b00      	cmp	r3, #0
 8002476:	d007      	beq.n	8002488 <UART_SetConfig+0x258>
 8002478:	e012      	b.n	80024a0 <UART_SetConfig+0x270>
 800247a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800247e:	d006      	beq.n	800248e <UART_SetConfig+0x25e>
 8002480:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002484:	d009      	beq.n	800249a <UART_SetConfig+0x26a>
 8002486:	e00b      	b.n	80024a0 <UART_SetConfig+0x270>
 8002488:	2301      	movs	r3, #1
 800248a:	77fb      	strb	r3, [r7, #31]
 800248c:	e077      	b.n	800257e <UART_SetConfig+0x34e>
 800248e:	2302      	movs	r3, #2
 8002490:	77fb      	strb	r3, [r7, #31]
 8002492:	e074      	b.n	800257e <UART_SetConfig+0x34e>
 8002494:	2304      	movs	r3, #4
 8002496:	77fb      	strb	r3, [r7, #31]
 8002498:	e071      	b.n	800257e <UART_SetConfig+0x34e>
 800249a:	2308      	movs	r3, #8
 800249c:	77fb      	strb	r3, [r7, #31]
 800249e:	e06e      	b.n	800257e <UART_SetConfig+0x34e>
 80024a0:	2310      	movs	r3, #16
 80024a2:	77fb      	strb	r3, [r7, #31]
 80024a4:	bf00      	nop
 80024a6:	e06a      	b.n	800257e <UART_SetConfig+0x34e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a25      	ldr	r2, [pc, #148]	; (8002544 <UART_SetConfig+0x314>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d124      	bne.n	80024fc <UART_SetConfig+0x2cc>
 80024b2:	4b1e      	ldr	r3, [pc, #120]	; (800252c <UART_SetConfig+0x2fc>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80024bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c0:	d012      	beq.n	80024e8 <UART_SetConfig+0x2b8>
 80024c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c6:	d802      	bhi.n	80024ce <UART_SetConfig+0x29e>
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d007      	beq.n	80024dc <UART_SetConfig+0x2ac>
 80024cc:	e012      	b.n	80024f4 <UART_SetConfig+0x2c4>
 80024ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d2:	d006      	beq.n	80024e2 <UART_SetConfig+0x2b2>
 80024d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80024d8:	d009      	beq.n	80024ee <UART_SetConfig+0x2be>
 80024da:	e00b      	b.n	80024f4 <UART_SetConfig+0x2c4>
 80024dc:	2300      	movs	r3, #0
 80024de:	77fb      	strb	r3, [r7, #31]
 80024e0:	e04d      	b.n	800257e <UART_SetConfig+0x34e>
 80024e2:	2302      	movs	r3, #2
 80024e4:	77fb      	strb	r3, [r7, #31]
 80024e6:	e04a      	b.n	800257e <UART_SetConfig+0x34e>
 80024e8:	2304      	movs	r3, #4
 80024ea:	77fb      	strb	r3, [r7, #31]
 80024ec:	e047      	b.n	800257e <UART_SetConfig+0x34e>
 80024ee:	2308      	movs	r3, #8
 80024f0:	77fb      	strb	r3, [r7, #31]
 80024f2:	e044      	b.n	800257e <UART_SetConfig+0x34e>
 80024f4:	2310      	movs	r3, #16
 80024f6:	77fb      	strb	r3, [r7, #31]
 80024f8:	bf00      	nop
 80024fa:	e040      	b.n	800257e <UART_SetConfig+0x34e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a11      	ldr	r2, [pc, #68]	; (8002548 <UART_SetConfig+0x318>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d139      	bne.n	800257a <UART_SetConfig+0x34a>
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <UART_SetConfig+0x2fc>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002514:	d027      	beq.n	8002566 <UART_SetConfig+0x336>
 8002516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800251a:	d817      	bhi.n	800254c <UART_SetConfig+0x31c>
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01c      	beq.n	800255a <UART_SetConfig+0x32a>
 8002520:	e027      	b.n	8002572 <UART_SetConfig+0x342>
 8002522:	bf00      	nop
 8002524:	efff69f3 	.word	0xefff69f3
 8002528:	40011000 	.word	0x40011000
 800252c:	40023800 	.word	0x40023800
 8002530:	40004400 	.word	0x40004400
 8002534:	40004800 	.word	0x40004800
 8002538:	40004c00 	.word	0x40004c00
 800253c:	40005000 	.word	0x40005000
 8002540:	40011400 	.word	0x40011400
 8002544:	40007800 	.word	0x40007800
 8002548:	40007c00 	.word	0x40007c00
 800254c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002550:	d006      	beq.n	8002560 <UART_SetConfig+0x330>
 8002552:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002556:	d009      	beq.n	800256c <UART_SetConfig+0x33c>
 8002558:	e00b      	b.n	8002572 <UART_SetConfig+0x342>
 800255a:	2300      	movs	r3, #0
 800255c:	77fb      	strb	r3, [r7, #31]
 800255e:	e00e      	b.n	800257e <UART_SetConfig+0x34e>
 8002560:	2302      	movs	r3, #2
 8002562:	77fb      	strb	r3, [r7, #31]
 8002564:	e00b      	b.n	800257e <UART_SetConfig+0x34e>
 8002566:	2304      	movs	r3, #4
 8002568:	77fb      	strb	r3, [r7, #31]
 800256a:	e008      	b.n	800257e <UART_SetConfig+0x34e>
 800256c:	2308      	movs	r3, #8
 800256e:	77fb      	strb	r3, [r7, #31]
 8002570:	e005      	b.n	800257e <UART_SetConfig+0x34e>
 8002572:	2310      	movs	r3, #16
 8002574:	77fb      	strb	r3, [r7, #31]
 8002576:	bf00      	nop
 8002578:	e001      	b.n	800257e <UART_SetConfig+0x34e>
 800257a:	2310      	movs	r3, #16
 800257c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002586:	d17c      	bne.n	8002682 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8002588:	7ffb      	ldrb	r3, [r7, #31]
 800258a:	2b08      	cmp	r3, #8
 800258c:	d859      	bhi.n	8002642 <UART_SetConfig+0x412>
 800258e:	a201      	add	r2, pc, #4	; (adr r2, 8002594 <UART_SetConfig+0x364>)
 8002590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002594:	080025b9 	.word	0x080025b9
 8002598:	080025d7 	.word	0x080025d7
 800259c:	080025f5 	.word	0x080025f5
 80025a0:	08002643 	.word	0x08002643
 80025a4:	0800260d 	.word	0x0800260d
 80025a8:	08002643 	.word	0x08002643
 80025ac:	08002643 	.word	0x08002643
 80025b0:	08002643 	.word	0x08002643
 80025b4:	0800262b 	.word	0x0800262b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025b8:	f7ff f8a6 	bl	8001708 <HAL_RCC_GetPCLK1Freq>
 80025bc:	4603      	mov	r3, r0
 80025be:	005a      	lsls	r2, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	085b      	lsrs	r3, r3, #1
 80025c6:	441a      	add	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	61bb      	str	r3, [r7, #24]
        break;
 80025d4:	e038      	b.n	8002648 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80025d6:	f7ff f8ab 	bl	8001730 <HAL_RCC_GetPCLK2Freq>
 80025da:	4603      	mov	r3, r0
 80025dc:	005a      	lsls	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	085b      	lsrs	r3, r3, #1
 80025e4:	441a      	add	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	61bb      	str	r3, [r7, #24]
        break;
 80025f2:	e029      	b.n	8002648 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	085a      	lsrs	r2, r3, #1
 80025fa:	4b5d      	ldr	r3, [pc, #372]	; (8002770 <UART_SetConfig+0x540>)
 80025fc:	4413      	add	r3, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6852      	ldr	r2, [r2, #4]
 8002602:	fbb3 f3f2 	udiv	r3, r3, r2
 8002606:	b29b      	uxth	r3, r3
 8002608:	61bb      	str	r3, [r7, #24]
        break;
 800260a:	e01d      	b.n	8002648 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800260c:	f7fe ff98 	bl	8001540 <HAL_RCC_GetSysClockFreq>
 8002610:	4603      	mov	r3, r0
 8002612:	005a      	lsls	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	441a      	add	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	b29b      	uxth	r3, r3
 8002626:	61bb      	str	r3, [r7, #24]
        break;
 8002628:	e00e      	b.n	8002648 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	085b      	lsrs	r3, r3, #1
 8002630:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	fbb2 f3f3 	udiv	r3, r2, r3
 800263c:	b29b      	uxth	r3, r3
 800263e:	61bb      	str	r3, [r7, #24]
        break;
 8002640:	e002      	b.n	8002648 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	75fb      	strb	r3, [r7, #23]
        break;
 8002646:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	2b0f      	cmp	r3, #15
 800264c:	d916      	bls.n	800267c <UART_SetConfig+0x44c>
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002654:	d212      	bcs.n	800267c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	b29b      	uxth	r3, r3
 800265a:	f023 030f 	bic.w	r3, r3, #15
 800265e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	085b      	lsrs	r3, r3, #1
 8002664:	b29b      	uxth	r3, r3
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	b29a      	uxth	r2, r3
 800266c:	89fb      	ldrh	r3, [r7, #14]
 800266e:	4313      	orrs	r3, r2
 8002670:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	89fa      	ldrh	r2, [r7, #14]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	e06e      	b.n	800275a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	75fb      	strb	r3, [r7, #23]
 8002680:	e06b      	b.n	800275a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8002682:	7ffb      	ldrb	r3, [r7, #31]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d857      	bhi.n	8002738 <UART_SetConfig+0x508>
 8002688:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <UART_SetConfig+0x460>)
 800268a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268e:	bf00      	nop
 8002690:	080026b5 	.word	0x080026b5
 8002694:	080026d1 	.word	0x080026d1
 8002698:	080026ed 	.word	0x080026ed
 800269c:	08002739 	.word	0x08002739
 80026a0:	08002705 	.word	0x08002705
 80026a4:	08002739 	.word	0x08002739
 80026a8:	08002739 	.word	0x08002739
 80026ac:	08002739 	.word	0x08002739
 80026b0:	08002721 	.word	0x08002721
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026b4:	f7ff f828 	bl	8001708 <HAL_RCC_GetPCLK1Freq>
 80026b8:	4602      	mov	r2, r0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	085b      	lsrs	r3, r3, #1
 80026c0:	441a      	add	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	61bb      	str	r3, [r7, #24]
        break;
 80026ce:	e036      	b.n	800273e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80026d0:	f7ff f82e 	bl	8001730 <HAL_RCC_GetPCLK2Freq>
 80026d4:	4602      	mov	r2, r0
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	085b      	lsrs	r3, r3, #1
 80026dc:	441a      	add	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	61bb      	str	r3, [r7, #24]
        break;
 80026ea:	e028      	b.n	800273e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	085a      	lsrs	r2, r3, #1
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <UART_SetConfig+0x544>)
 80026f4:	4413      	add	r3, r2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6852      	ldr	r2, [r2, #4]
 80026fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80026fe:	b29b      	uxth	r3, r3
 8002700:	61bb      	str	r3, [r7, #24]
        break;
 8002702:	e01c      	b.n	800273e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002704:	f7fe ff1c 	bl	8001540 <HAL_RCC_GetSysClockFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	085b      	lsrs	r3, r3, #1
 8002710:	441a      	add	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	fbb2 f3f3 	udiv	r3, r2, r3
 800271a:	b29b      	uxth	r3, r3
 800271c:	61bb      	str	r3, [r7, #24]
        break;
 800271e:	e00e      	b.n	800273e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	085b      	lsrs	r3, r3, #1
 8002726:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002732:	b29b      	uxth	r3, r3
 8002734:	61bb      	str	r3, [r7, #24]
        break;
 8002736:	e002      	b.n	800273e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	75fb      	strb	r3, [r7, #23]
        break;
 800273c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	2b0f      	cmp	r3, #15
 8002742:	d908      	bls.n	8002756 <UART_SetConfig+0x526>
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274a:	d204      	bcs.n	8002756 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	60da      	str	r2, [r3, #12]
 8002754:	e001      	b.n	800275a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002766:	7dfb      	ldrb	r3, [r7, #23]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	01e84800 	.word	0x01e84800
 8002774:	00f42400 	.word	0x00f42400

08002778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01a      	beq.n	800288e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002876:	d10a      	bne.n	800288e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	605a      	str	r2, [r3, #4]
  }
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80028ca:	f7fd fe6f 	bl	80005ac <HAL_GetTick>
 80028ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d10e      	bne.n	80028fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f814 	bl	800291a <UART_WaitOnFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e00a      	b.n	8002912 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	603b      	str	r3, [r7, #0]
 8002926:	4613      	mov	r3, r2
 8002928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800292a:	e02a      	b.n	8002982 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002932:	d026      	beq.n	8002982 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002934:	f7fd fe3a 	bl	80005ac <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	429a      	cmp	r2, r3
 8002942:	d302      	bcc.n	800294a <UART_WaitOnFlagUntilTimeout+0x30>
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d11b      	bne.n	8002982 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002958:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2220      	movs	r2, #32
 800296e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e00f      	b.n	80029a2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69da      	ldr	r2, [r3, #28]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4013      	ands	r3, r2
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	429a      	cmp	r2, r3
 8002990:	bf0c      	ite	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	2300      	movne	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	429a      	cmp	r2, r3
 800299e:	d0c5      	beq.n	800292c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80029c0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2220      	movs	r2, #32
 80029d6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	661a      	str	r2, [r3, #96]	; 0x60
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7ff fc07 	bl	800221c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a2c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2220      	movs	r2, #32
 8002a32:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff fbe4 	bl	8002208 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002a48:	b084      	sub	sp, #16
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	f107 001c 	add.w	r0, r7, #28
 8002a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d120      	bne.n	8002aa2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <USB_CoreInit+0xac>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d105      	bne.n	8002a96 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fa60 	bl	8002f5c <USB_CoreReset>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	73fb      	strb	r3, [r7, #15]
 8002aa0:	e010      	b.n	8002ac4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fa54 	bl	8002f5c <USB_CoreReset>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8002ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d10b      	bne.n	8002ae2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f043 0206 	orr.w	r2, r3, #6
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f043 0220 	orr.w	r2, r3, #32
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002aee:	b004      	add	sp, #16
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	ffbdffbf 	.word	0xffbdffbf

08002af8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 0201 	bic.w	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d106      	bne.n	8002b46 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	60da      	str	r2, [r3, #12]
 8002b44:	e00b      	b.n	8002b5e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d106      	bne.n	8002b5a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	60da      	str	r2, [r3, #12]
 8002b58:	e001      	b.n	8002b5e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e003      	b.n	8002b66 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002b5e:	2032      	movs	r0, #50	; 0x32
 8002b60:	f7fd fd30 	bl	80005c4 <HAL_Delay>

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b70:	b084      	sub	sp, #16
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b086      	sub	sp, #24
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	e009      	b.n	8002ba4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	3340      	adds	r3, #64	; 0x40
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	2b0e      	cmp	r3, #14
 8002ba8:	d9f2      	bls.n	8002b90 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d112      	bne.n	8002bd6 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	e005      	b.n	8002be2 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002be8:	461a      	mov	r2, r3
 8002bea:	2300      	movs	r3, #0
 8002bec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	680b      	ldr	r3, [r1, #0]
 8002c00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d10c      	bne.n	8002c22 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8002c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d104      	bne.n	8002c18 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002c0e:	2100      	movs	r1, #0
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f971 	bl	8002ef8 <USB_SetDevSpeed>
 8002c16:	e018      	b.n	8002c4a <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002c18:	2101      	movs	r1, #1
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f96c 	bl	8002ef8 <USB_SetDevSpeed>
 8002c20:	e013      	b.n	8002c4a <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8002c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d10c      	bne.n	8002c42 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8002c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d104      	bne.n	8002c38 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002c2e:	2100      	movs	r1, #0
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f961 	bl	8002ef8 <USB_SetDevSpeed>
 8002c36:	e008      	b.n	8002c4a <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002c38:	2101      	movs	r1, #1
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f95c 	bl	8002ef8 <USB_SetDevSpeed>
 8002c40:	e003      	b.n	8002c4a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002c42:	2103      	movs	r1, #3
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f957 	bl	8002ef8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002c4a:	2110      	movs	r1, #16
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f90b 	bl	8002e68 <USB_FlushTxFifo>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f929 	bl	8002eb4 <USB_FlushRxFifo>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c72:	461a      	mov	r2, r3
 8002c74:	2300      	movs	r3, #0
 8002c76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c7e:	461a      	mov	r2, r3
 8002c80:	2300      	movs	r3, #0
 8002c82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c90:	2300      	movs	r3, #0
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	e043      	b.n	8002d1e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cac:	d118      	bne.n	8002ce0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	e013      	b.n	8002cf2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e008      	b.n	8002cf2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cec:	461a      	mov	r2, r3
 8002cee:	2300      	movs	r3, #0
 8002cf0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2300      	movs	r3, #0
 8002d02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d10:	461a      	mov	r2, r3
 8002d12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d3b7      	bcc.n	8002c96 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	e043      	b.n	8002db4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d42:	d118      	bne.n	8002d76 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10a      	bne.n	8002d60 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d56:	461a      	mov	r2, r3
 8002d58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e013      	b.n	8002d88 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	e008      	b.n	8002d88 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d82:	461a      	mov	r2, r3
 8002d84:	2300      	movs	r3, #0
 8002d86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d94:	461a      	mov	r2, r3
 8002d96:	2300      	movs	r3, #0
 8002d98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002da6:	461a      	mov	r2, r3
 8002da8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	3301      	adds	r3, #1
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d3b7      	bcc.n	8002d2c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dce:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d110      	bne.n	8002df8 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <USB_DevInit+0x2e8>)
 8002de0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df0:	4619      	mov	r1, r3
 8002df2:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <USB_DevInit+0x2ec>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002e04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d105      	bne.n	8002e18 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f043 0210 	orr.w	r2, r3, #16
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699a      	ldr	r2, [r3, #24]
 8002e1c:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <USB_DevInit+0x2f0>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f043 0208 	orr.w	r2, r3, #8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d105      	bne.n	8002e48 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699a      	ldr	r2, [r3, #24]
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <USB_DevInit+0x2f4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e54:	b004      	add	sp, #16
 8002e56:	4770      	bx	lr
 8002e58:	00800100 	.word	0x00800100
 8002e5c:	00010003 	.word	0x00010003
 8002e60:	803c3800 	.word	0x803c3800
 8002e64:	40000004 	.word	0x40000004

08002e68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	019b      	lsls	r3, r3, #6
 8002e7a:	f043 0220 	orr.w	r2, r3, #32
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3301      	adds	r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4a09      	ldr	r2, [pc, #36]	; (8002eb0 <USB_FlushTxFifo+0x48>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d901      	bls.n	8002e94 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e006      	b.n	8002ea2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d0f0      	beq.n	8002e82 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	00030d40 	.word	0x00030d40

08002eb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2210      	movs	r2, #16
 8002ec4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a09      	ldr	r2, [pc, #36]	; (8002ef4 <USB_FlushRxFifo+0x40>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e006      	b.n	8002ee6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d0f0      	beq.n	8002ec6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	00030d40 	.word	0x00030d40

08002ef8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	68f9      	ldr	r1, [r7, #12]
 8002f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f44:	f043 0302 	orr.w	r3, r3, #2
 8002f48:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8002f4a:	2003      	movs	r0, #3
 8002f4c:	f7fd fb3a 	bl	80005c4 <HAL_Delay>

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4a13      	ldr	r2, [pc, #76]	; (8002fc0 <USB_CoreReset+0x64>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e01b      	b.n	8002fb2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	daf2      	bge.n	8002f68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f043 0201 	orr.w	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	3301      	adds	r3, #1
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a09      	ldr	r2, [pc, #36]	; (8002fc0 <USB_CoreReset+0x64>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d901      	bls.n	8002fa4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e006      	b.n	8002fb2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d0f0      	beq.n	8002f92 <USB_CoreReset+0x36>

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	00030d40 	.word	0x00030d40

08002fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fc8:	f7fd fa9e 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fcc:	f000 f808 	bl	8002fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fd0:	f000 f8f4 	bl	80031bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002fd4:	f000 f894 	bl	8003100 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002fd8:	f000 f8c2 	bl	8003160 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002fdc:	e7fe      	b.n	8002fdc <main+0x18>
	...

08002fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b0b4      	sub	sp, #208	; 0xd0
 8002fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fe6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002fea:	2230      	movs	r2, #48	; 0x30
 8002fec:	2100      	movs	r1, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fb5a 	bl	80036a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ff4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003004:	f107 0308 	add.w	r3, r7, #8
 8003008:	2284      	movs	r2, #132	; 0x84
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fb4b 	bl	80036a8 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8003012:	f7fd ff2d 	bl	8000e70 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003016:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <SystemClock_Config+0x114>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	4a36      	ldr	r2, [pc, #216]	; (80030f4 <SystemClock_Config+0x114>)
 800301c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003020:	6413      	str	r3, [r2, #64]	; 0x40
 8003022:	4b34      	ldr	r3, [pc, #208]	; (80030f4 <SystemClock_Config+0x114>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302a:	607b      	str	r3, [r7, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800302e:	4b32      	ldr	r3, [pc, #200]	; (80030f8 <SystemClock_Config+0x118>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003036:	4a30      	ldr	r2, [pc, #192]	; (80030f8 <SystemClock_Config+0x118>)
 8003038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4b2e      	ldr	r3, [pc, #184]	; (80030f8 <SystemClock_Config+0x118>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800304a:	2301      	movs	r3, #1
 800304c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003050:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003054:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003058:	2302      	movs	r3, #2
 800305a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800305e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003062:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003066:	2304      	movs	r3, #4
 8003068:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800306c:	2348      	movs	r3, #72	; 0x48
 800306e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003072:	2302      	movs	r3, #2
 8003074:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003078:	2303      	movs	r3, #3
 800307a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800307e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd ff04 	bl	8000e90 <HAL_RCC_OscConfig>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800308e:	f000 f97b 	bl	8003388 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003092:	230f      	movs	r3, #15
 8003094:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003098:	2302      	movs	r3, #2
 800309a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800309e:	2300      	movs	r3, #0
 80030a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80030b6:	2102      	movs	r1, #2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fe f959 	bl	8001370 <HAL_RCC_ClockConfig>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80030c4:	f000 f960 	bl	8003388 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <SystemClock_Config+0x11c>)
 80030ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80030cc:	2300      	movs	r3, #0
 80030ce:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030d6:	f107 0308 	add.w	r3, r7, #8
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe fb3c 	bl	8001758 <HAL_RCCEx_PeriphCLKConfig>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80030e6:	f000 f94f 	bl	8003388 <Error_Handler>
  }
}
 80030ea:	bf00      	nop
 80030ec:	37d0      	adds	r7, #208	; 0xd0
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40007000 	.word	0x40007000
 80030fc:	00200100 	.word	0x00200100

08003100 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003104:	4b14      	ldr	r3, [pc, #80]	; (8003158 <MX_USART3_UART_Init+0x58>)
 8003106:	4a15      	ldr	r2, [pc, #84]	; (800315c <MX_USART3_UART_Init+0x5c>)
 8003108:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800310a:	4b13      	ldr	r3, [pc, #76]	; (8003158 <MX_USART3_UART_Init+0x58>)
 800310c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003110:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003112:	4b11      	ldr	r3, [pc, #68]	; (8003158 <MX_USART3_UART_Init+0x58>)
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <MX_USART3_UART_Init+0x58>)
 800311a:	2200      	movs	r2, #0
 800311c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <MX_USART3_UART_Init+0x58>)
 8003120:	2200      	movs	r2, #0
 8003122:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <MX_USART3_UART_Init+0x58>)
 8003126:	220c      	movs	r2, #12
 8003128:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <MX_USART3_UART_Init+0x58>)
 800312c:	2200      	movs	r2, #0
 800312e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <MX_USART3_UART_Init+0x58>)
 8003132:	2200      	movs	r2, #0
 8003134:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <MX_USART3_UART_Init+0x58>)
 8003138:	2200      	movs	r2, #0
 800313a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <MX_USART3_UART_Init+0x58>)
 800313e:	2200      	movs	r2, #0
 8003140:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003142:	4805      	ldr	r0, [pc, #20]	; (8003158 <MX_USART3_UART_Init+0x58>)
 8003144:	f7fe fef6 	bl	8001f34 <HAL_UART_Init>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800314e:	f000 f91b 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	2000002c 	.word	0x2000002c
 800315c:	40004800 	.word	0x40004800

08003160 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003164:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003166:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800316a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800316c:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800316e:	2206      	movs	r2, #6
 8003170:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003174:	2202      	movs	r2, #2
 8003176:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003178:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800317a:	2200      	movs	r2, #0
 800317c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800317e:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003180:	2202      	movs	r2, #2
 8003182:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003184:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003186:	2201      	movs	r2, #1
 8003188:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800318a:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800318c:	2200      	movs	r2, #0
 800318e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003190:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003192:	2200      	movs	r2, #0
 8003194:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003198:	2201      	movs	r2, #1
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80031a2:	4805      	ldr	r0, [pc, #20]	; (80031b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031a4:	f7fd fd27 	bl	8000bf6 <HAL_PCD_Init>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80031ae:	f000 f8eb 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	200000ac 	.word	0x200000ac

080031bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08c      	sub	sp, #48	; 0x30
 80031c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c2:	f107 031c 	add.w	r3, r7, #28
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	605a      	str	r2, [r3, #4]
 80031cc:	609a      	str	r2, [r3, #8]
 80031ce:	60da      	str	r2, [r3, #12]
 80031d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031d2:	4b67      	ldr	r3, [pc, #412]	; (8003370 <MX_GPIO_Init+0x1b4>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	4a66      	ldr	r2, [pc, #408]	; (8003370 <MX_GPIO_Init+0x1b4>)
 80031d8:	f043 0304 	orr.w	r3, r3, #4
 80031dc:	6313      	str	r3, [r2, #48]	; 0x30
 80031de:	4b64      	ldr	r3, [pc, #400]	; (8003370 <MX_GPIO_Init+0x1b4>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	61bb      	str	r3, [r7, #24]
 80031e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031ea:	4b61      	ldr	r3, [pc, #388]	; (8003370 <MX_GPIO_Init+0x1b4>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a60      	ldr	r2, [pc, #384]	; (8003370 <MX_GPIO_Init+0x1b4>)
 80031f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b5e      	ldr	r3, [pc, #376]	; (8003370 <MX_GPIO_Init+0x1b4>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003202:	4b5b      	ldr	r3, [pc, #364]	; (8003370 <MX_GPIO_Init+0x1b4>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	4a5a      	ldr	r2, [pc, #360]	; (8003370 <MX_GPIO_Init+0x1b4>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6313      	str	r3, [r2, #48]	; 0x30
 800320e:	4b58      	ldr	r3, [pc, #352]	; (8003370 <MX_GPIO_Init+0x1b4>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800321a:	4b55      	ldr	r3, [pc, #340]	; (8003370 <MX_GPIO_Init+0x1b4>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	4a54      	ldr	r2, [pc, #336]	; (8003370 <MX_GPIO_Init+0x1b4>)
 8003220:	f043 0302 	orr.w	r3, r3, #2
 8003224:	6313      	str	r3, [r2, #48]	; 0x30
 8003226:	4b52      	ldr	r3, [pc, #328]	; (8003370 <MX_GPIO_Init+0x1b4>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003232:	4b4f      	ldr	r3, [pc, #316]	; (8003370 <MX_GPIO_Init+0x1b4>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	4a4e      	ldr	r2, [pc, #312]	; (8003370 <MX_GPIO_Init+0x1b4>)
 8003238:	f043 0308 	orr.w	r3, r3, #8
 800323c:	6313      	str	r3, [r2, #48]	; 0x30
 800323e:	4b4c      	ldr	r3, [pc, #304]	; (8003370 <MX_GPIO_Init+0x1b4>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800324a:	4b49      	ldr	r3, [pc, #292]	; (8003370 <MX_GPIO_Init+0x1b4>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	4a48      	ldr	r2, [pc, #288]	; (8003370 <MX_GPIO_Init+0x1b4>)
 8003250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003254:	6313      	str	r3, [r2, #48]	; 0x30
 8003256:	4b46      	ldr	r3, [pc, #280]	; (8003370 <MX_GPIO_Init+0x1b4>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	607b      	str	r3, [r7, #4]
 8003260:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003262:	2200      	movs	r2, #0
 8003264:	f244 0181 	movw	r1, #16513	; 0x4081
 8003268:	4842      	ldr	r0, [pc, #264]	; (8003374 <MX_GPIO_Init+0x1b8>)
 800326a:	f7fd fcab 	bl	8000bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800326e:	2200      	movs	r2, #0
 8003270:	2140      	movs	r1, #64	; 0x40
 8003272:	4841      	ldr	r0, [pc, #260]	; (8003378 <MX_GPIO_Init+0x1bc>)
 8003274:	f7fd fca6 	bl	8000bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800327c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800327e:	4b3f      	ldr	r3, [pc, #252]	; (800337c <MX_GPIO_Init+0x1c0>)
 8003280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	2300      	movs	r3, #0
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003286:	f107 031c 	add.w	r3, r7, #28
 800328a:	4619      	mov	r1, r3
 800328c:	483c      	ldr	r0, [pc, #240]	; (8003380 <MX_GPIO_Init+0x1c4>)
 800328e:	f7fd faef 	bl	8000870 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003292:	2332      	movs	r3, #50	; 0x32
 8003294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003296:	2302      	movs	r3, #2
 8003298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329e:	2303      	movs	r3, #3
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032a2:	230b      	movs	r3, #11
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a6:	f107 031c 	add.w	r3, r7, #28
 80032aa:	4619      	mov	r1, r3
 80032ac:	4834      	ldr	r0, [pc, #208]	; (8003380 <MX_GPIO_Init+0x1c4>)
 80032ae:	f7fd fadf 	bl	8000870 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80032b2:	2386      	movs	r3, #134	; 0x86
 80032b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b6:	2302      	movs	r3, #2
 80032b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032be:	2303      	movs	r3, #3
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032c2:	230b      	movs	r3, #11
 80032c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c6:	f107 031c 	add.w	r3, r7, #28
 80032ca:	4619      	mov	r1, r3
 80032cc:	482d      	ldr	r0, [pc, #180]	; (8003384 <MX_GPIO_Init+0x1c8>)
 80032ce:	f7fd facf 	bl	8000870 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80032d2:	f244 0381 	movw	r3, #16513	; 0x4081
 80032d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d8:	2301      	movs	r3, #1
 80032da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e4:	f107 031c 	add.w	r3, r7, #28
 80032e8:	4619      	mov	r1, r3
 80032ea:	4822      	ldr	r0, [pc, #136]	; (8003374 <MX_GPIO_Init+0x1b8>)
 80032ec:	f7fd fac0 	bl	8000870 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80032f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f6:	2302      	movs	r3, #2
 80032f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fe:	2303      	movs	r3, #3
 8003300:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003302:	230b      	movs	r3, #11
 8003304:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003306:	f107 031c 	add.w	r3, r7, #28
 800330a:	4619      	mov	r1, r3
 800330c:	4819      	ldr	r0, [pc, #100]	; (8003374 <MX_GPIO_Init+0x1b8>)
 800330e:	f7fd faaf 	bl	8000870 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003312:	2340      	movs	r3, #64	; 0x40
 8003314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003316:	2301      	movs	r3, #1
 8003318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331e:	2300      	movs	r3, #0
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003322:	f107 031c 	add.w	r3, r7, #28
 8003326:	4619      	mov	r1, r3
 8003328:	4813      	ldr	r0, [pc, #76]	; (8003378 <MX_GPIO_Init+0x1bc>)
 800332a:	f7fd faa1 	bl	8000870 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003332:	2300      	movs	r3, #0
 8003334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800333a:	f107 031c 	add.w	r3, r7, #28
 800333e:	4619      	mov	r1, r3
 8003340:	480d      	ldr	r0, [pc, #52]	; (8003378 <MX_GPIO_Init+0x1bc>)
 8003342:	f7fd fa95 	bl	8000870 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003346:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800334a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334c:	2302      	movs	r3, #2
 800334e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003354:	2303      	movs	r3, #3
 8003356:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003358:	230b      	movs	r3, #11
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800335c:	f107 031c 	add.w	r3, r7, #28
 8003360:	4619      	mov	r1, r3
 8003362:	4805      	ldr	r0, [pc, #20]	; (8003378 <MX_GPIO_Init+0x1bc>)
 8003364:	f7fd fa84 	bl	8000870 <HAL_GPIO_Init>

}
 8003368:	bf00      	nop
 800336a:	3730      	adds	r7, #48	; 0x30
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40023800 	.word	0x40023800
 8003374:	40020400 	.word	0x40020400
 8003378:	40021800 	.word	0x40021800
 800337c:	10110000 	.word	0x10110000
 8003380:	40020800 	.word	0x40020800
 8003384:	40020000 	.word	0x40020000

08003388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800339e:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <HAL_MspInit+0x44>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	4a0e      	ldr	r2, [pc, #56]	; (80033dc <HAL_MspInit+0x44>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6413      	str	r3, [r2, #64]	; 0x40
 80033aa:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <HAL_MspInit+0x44>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	607b      	str	r3, [r7, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <HAL_MspInit+0x44>)
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	4a08      	ldr	r2, [pc, #32]	; (80033dc <HAL_MspInit+0x44>)
 80033bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033c0:	6453      	str	r3, [r2, #68]	; 0x44
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_MspInit+0x44>)
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800

080033e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	; 0x28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	f107 0314 	add.w	r3, r7, #20
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1b      	ldr	r2, [pc, #108]	; (800346c <HAL_UART_MspInit+0x8c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d130      	bne.n	8003464 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003402:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <HAL_UART_MspInit+0x90>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	4a1a      	ldr	r2, [pc, #104]	; (8003470 <HAL_UART_MspInit+0x90>)
 8003408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800340c:	6413      	str	r3, [r2, #64]	; 0x40
 800340e:	4b18      	ldr	r3, [pc, #96]	; (8003470 <HAL_UART_MspInit+0x90>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800341a:	4b15      	ldr	r3, [pc, #84]	; (8003470 <HAL_UART_MspInit+0x90>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4a14      	ldr	r2, [pc, #80]	; (8003470 <HAL_UART_MspInit+0x90>)
 8003420:	f043 0308 	orr.w	r3, r3, #8
 8003424:	6313      	str	r3, [r2, #48]	; 0x30
 8003426:	4b12      	ldr	r3, [pc, #72]	; (8003470 <HAL_UART_MspInit+0x90>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003432:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003438:	2302      	movs	r3, #2
 800343a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003440:	2303      	movs	r3, #3
 8003442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003444:	2307      	movs	r3, #7
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003448:	f107 0314 	add.w	r3, r7, #20
 800344c:	4619      	mov	r1, r3
 800344e:	4809      	ldr	r0, [pc, #36]	; (8003474 <HAL_UART_MspInit+0x94>)
 8003450:	f7fd fa0e 	bl	8000870 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003454:	2200      	movs	r2, #0
 8003456:	2100      	movs	r1, #0
 8003458:	2027      	movs	r0, #39	; 0x27
 800345a:	f7fd f9b0 	bl	80007be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800345e:	2027      	movs	r0, #39	; 0x27
 8003460:	f7fd f9c9 	bl	80007f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003464:	bf00      	nop
 8003466:	3728      	adds	r7, #40	; 0x28
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40004800 	.word	0x40004800
 8003470:	40023800 	.word	0x40023800
 8003474:	40020c00 	.word	0x40020c00

08003478 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	; 0x28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003480:	f107 0314 	add.w	r3, r7, #20
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	60da      	str	r2, [r3, #12]
 800348e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003498:	d141      	bne.n	800351e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349a:	4b23      	ldr	r3, [pc, #140]	; (8003528 <HAL_PCD_MspInit+0xb0>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	4a22      	ldr	r2, [pc, #136]	; (8003528 <HAL_PCD_MspInit+0xb0>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6313      	str	r3, [r2, #48]	; 0x30
 80034a6:	4b20      	ldr	r3, [pc, #128]	; (8003528 <HAL_PCD_MspInit+0xb0>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80034b2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80034b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c0:	2303      	movs	r3, #3
 80034c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80034c4:	230a      	movs	r3, #10
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c8:	f107 0314 	add.w	r3, r7, #20
 80034cc:	4619      	mov	r1, r3
 80034ce:	4817      	ldr	r0, [pc, #92]	; (800352c <HAL_PCD_MspInit+0xb4>)
 80034d0:	f7fd f9ce 	bl	8000870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80034d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80034e2:	f107 0314 	add.w	r3, r7, #20
 80034e6:	4619      	mov	r1, r3
 80034e8:	4810      	ldr	r0, [pc, #64]	; (800352c <HAL_PCD_MspInit+0xb4>)
 80034ea:	f7fd f9c1 	bl	8000870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80034ee:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <HAL_PCD_MspInit+0xb0>)
 80034f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f2:	4a0d      	ldr	r2, [pc, #52]	; (8003528 <HAL_PCD_MspInit+0xb0>)
 80034f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f8:	6353      	str	r3, [r2, #52]	; 0x34
 80034fa:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_PCD_MspInit+0xb0>)
 80034fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4b08      	ldr	r3, [pc, #32]	; (8003528 <HAL_PCD_MspInit+0xb0>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	4a07      	ldr	r2, [pc, #28]	; (8003528 <HAL_PCD_MspInit+0xb0>)
 800350c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003510:	6453      	str	r3, [r2, #68]	; 0x44
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_PCD_MspInit+0xb0>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800351e:	bf00      	nop
 8003520:	3728      	adds	r7, #40	; 0x28
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800
 800352c:	40020000 	.word	0x40020000

08003530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800353e:	b480      	push	{r7}
 8003540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003542:	e7fe      	b.n	8003542 <HardFault_Handler+0x4>

08003544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003548:	e7fe      	b.n	8003548 <MemManage_Handler+0x4>

0800354a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800354e:	e7fe      	b.n	800354e <BusFault_Handler+0x4>

08003550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003554:	e7fe      	b.n	8003554 <UsageFault_Handler+0x4>

08003556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003572:	b480      	push	{r7}
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003584:	f7fc fffe 	bl	8000584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003588:	bf00      	nop
 800358a:	bd80      	pop	{r7, pc}

0800358c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003590:	4802      	ldr	r0, [pc, #8]	; (800359c <USART3_IRQHandler+0x10>)
 8003592:	f7fe fd1d 	bl	8001fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	2000002c 	.word	0x2000002c

080035a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035a4:	4b15      	ldr	r3, [pc, #84]	; (80035fc <SystemInit+0x5c>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	4a14      	ldr	r2, [pc, #80]	; (80035fc <SystemInit+0x5c>)
 80035ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <SystemInit+0x60>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a11      	ldr	r2, [pc, #68]	; (8003600 <SystemInit+0x60>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <SystemInit+0x60>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80035c6:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <SystemInit+0x60>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	490d      	ldr	r1, [pc, #52]	; (8003600 <SystemInit+0x60>)
 80035cc:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <SystemInit+0x64>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80035d2:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <SystemInit+0x60>)
 80035d4:	4a0c      	ldr	r2, [pc, #48]	; (8003608 <SystemInit+0x68>)
 80035d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80035d8:	4b09      	ldr	r3, [pc, #36]	; (8003600 <SystemInit+0x60>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a08      	ldr	r2, [pc, #32]	; (8003600 <SystemInit+0x60>)
 80035de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <SystemInit+0x60>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035ea:	4b04      	ldr	r3, [pc, #16]	; (80035fc <SystemInit+0x5c>)
 80035ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035f0:	609a      	str	r2, [r3, #8]
#endif
}
 80035f2:	bf00      	nop
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	e000ed00 	.word	0xe000ed00
 8003600:	40023800 	.word	0x40023800
 8003604:	fef6ffff 	.word	0xfef6ffff
 8003608:	24003010 	.word	0x24003010

0800360c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800360c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003644 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003610:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003612:	e003      	b.n	800361c <LoopCopyDataInit>

08003614 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003616:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003618:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800361a:	3104      	adds	r1, #4

0800361c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800361c:	480b      	ldr	r0, [pc, #44]	; (800364c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800361e:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003620:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003622:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003624:	d3f6      	bcc.n	8003614 <CopyDataInit>
  ldr  r2, =_sbss
 8003626:	4a0b      	ldr	r2, [pc, #44]	; (8003654 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003628:	e002      	b.n	8003630 <LoopFillZerobss>

0800362a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800362a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800362c:	f842 3b04 	str.w	r3, [r2], #4

08003630 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003630:	4b09      	ldr	r3, [pc, #36]	; (8003658 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003632:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003634:	d3f9      	bcc.n	800362a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003636:	f7ff ffb3 	bl	80035a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800363a:	f000 f811 	bl	8003660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800363e:	f7ff fcc1 	bl	8002fc4 <main>
  bx  lr    
 8003642:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003644:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003648:	080036f8 	.word	0x080036f8
  ldr  r0, =_sdata
 800364c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003650:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003654:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003658:	200004b0 	.word	0x200004b0

0800365c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800365c:	e7fe      	b.n	800365c <ADC_IRQHandler>
	...

08003660 <__libc_init_array>:
 8003660:	b570      	push	{r4, r5, r6, lr}
 8003662:	4e0d      	ldr	r6, [pc, #52]	; (8003698 <__libc_init_array+0x38>)
 8003664:	4c0d      	ldr	r4, [pc, #52]	; (800369c <__libc_init_array+0x3c>)
 8003666:	1ba4      	subs	r4, r4, r6
 8003668:	10a4      	asrs	r4, r4, #2
 800366a:	2500      	movs	r5, #0
 800366c:	42a5      	cmp	r5, r4
 800366e:	d109      	bne.n	8003684 <__libc_init_array+0x24>
 8003670:	4e0b      	ldr	r6, [pc, #44]	; (80036a0 <__libc_init_array+0x40>)
 8003672:	4c0c      	ldr	r4, [pc, #48]	; (80036a4 <__libc_init_array+0x44>)
 8003674:	f000 f820 	bl	80036b8 <_init>
 8003678:	1ba4      	subs	r4, r4, r6
 800367a:	10a4      	asrs	r4, r4, #2
 800367c:	2500      	movs	r5, #0
 800367e:	42a5      	cmp	r5, r4
 8003680:	d105      	bne.n	800368e <__libc_init_array+0x2e>
 8003682:	bd70      	pop	{r4, r5, r6, pc}
 8003684:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003688:	4798      	blx	r3
 800368a:	3501      	adds	r5, #1
 800368c:	e7ee      	b.n	800366c <__libc_init_array+0xc>
 800368e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003692:	4798      	blx	r3
 8003694:	3501      	adds	r5, #1
 8003696:	e7f2      	b.n	800367e <__libc_init_array+0x1e>
 8003698:	080036f0 	.word	0x080036f0
 800369c:	080036f0 	.word	0x080036f0
 80036a0:	080036f0 	.word	0x080036f0
 80036a4:	080036f4 	.word	0x080036f4

080036a8 <memset>:
 80036a8:	4402      	add	r2, r0
 80036aa:	4603      	mov	r3, r0
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d100      	bne.n	80036b2 <memset+0xa>
 80036b0:	4770      	bx	lr
 80036b2:	f803 1b01 	strb.w	r1, [r3], #1
 80036b6:	e7f9      	b.n	80036ac <memset+0x4>

080036b8 <_init>:
 80036b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ba:	bf00      	nop
 80036bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036be:	bc08      	pop	{r3}
 80036c0:	469e      	mov	lr, r3
 80036c2:	4770      	bx	lr

080036c4 <_fini>:
 80036c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c6:	bf00      	nop
 80036c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ca:	bc08      	pop	{r3}
 80036cc:	469e      	mov	lr, r3
 80036ce:	4770      	bx	lr
