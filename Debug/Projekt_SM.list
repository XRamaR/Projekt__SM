
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007174  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08007344  08007344  00017344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074bc  080074bc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080074bc  080074bc  000174bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074c4  080074c4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074c4  080074c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074c8  080074c8  000174c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080074cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  200001e0  080076ac  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  080076ac  0002080c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016beb  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003045  00000000  00000000  00036dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f0  00000000  00000000  00039e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001248  00000000  00000000  0003b230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000274f6  00000000  00000000  0003c478  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000115ef  00000000  00000000  0006396e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ee3bb  00000000  00000000  00074f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00163318  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e0  00000000  00000000  00163394  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800732c 	.word	0x0800732c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800732c 	.word	0x0800732c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f94b 	bl	8000850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 f806 	bl	80005cc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005c0:	f005 fdc4 	bl	800614c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_InitTick+0x54>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <HAL_InitTick+0x58>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4619      	mov	r1, r3
 80005de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f965 	bl	80008ba <HAL_SYSTICK_Config>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e00e      	b.n	8000618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b0f      	cmp	r3, #15
 80005fe:	d80a      	bhi.n	8000616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000600:	2200      	movs	r2, #0
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	f04f 30ff 	mov.w	r0, #4294967295
 8000608:	f000 f92d 	bl	8000866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800060c:	4a06      	ldr	r2, [pc, #24]	; (8000628 <HAL_InitTick+0x5c>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000612:	2300      	movs	r3, #0
 8000614:	e000      	b.n	8000618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000000c 	.word	0x2000000c
 8000624:	20000004 	.word	0x20000004
 8000628:	20000000 	.word	0x20000000

0800062c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_IncTick+0x20>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_IncTick+0x24>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4413      	add	r3, r2
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <HAL_IncTick+0x24>)
 800063e:	6013      	str	r3, [r2, #0]
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000004 	.word	0x20000004
 8000650:	20000208 	.word	0x20000208

08000654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return uwTick;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <HAL_GetTick+0x14>)
 800065a:	681b      	ldr	r3, [r3, #0]
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000208 	.word	0x20000208

0800066c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000674:	f7ff ffee 	bl	8000654 <HAL_GetTick>
 8000678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000684:	d005      	beq.n	8000692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <HAL_Delay+0x40>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	461a      	mov	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4413      	add	r3, r2
 8000690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000692:	bf00      	nop
 8000694:	f7ff ffde 	bl	8000654 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d8f7      	bhi.n	8000694 <HAL_Delay+0x28>
  {
  }
}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000004 	.word	0x20000004

080006b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <__NVIC_SetPriorityGrouping+0x40>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006da:	4313      	orrs	r3, r2
 80006dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <__NVIC_SetPriorityGrouping+0x40>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	60d3      	str	r3, [r2, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00
 80006f4:	05fa0000 	.word	0x05fa0000

080006f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <__NVIC_GetPriorityGrouping+0x18>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	0a1b      	lsrs	r3, r3, #8
 8000702:	f003 0307 	and.w	r3, r3, #7
}
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	2b00      	cmp	r3, #0
 8000724:	db0b      	blt.n	800073e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	f003 021f 	and.w	r2, r3, #31
 800072c:	4907      	ldr	r1, [pc, #28]	; (800074c <__NVIC_EnableIRQ+0x38>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	095b      	lsrs	r3, r3, #5
 8000734:	2001      	movs	r0, #1
 8000736:	fa00 f202 	lsl.w	r2, r0, r2
 800073a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000e100 	.word	0xe000e100

08000750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	db0a      	blt.n	800077a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	; (800079c <__NVIC_SetPriority+0x4c>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000778:	e00a      	b.n	8000790 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4908      	ldr	r1, [pc, #32]	; (80007a0 <__NVIC_SetPriority+0x50>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	3b04      	subs	r3, #4
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	440b      	add	r3, r1
 800078e:	761a      	strb	r2, [r3, #24]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	f1c3 0307 	rsb	r3, r3, #7
 80007be:	2b04      	cmp	r3, #4
 80007c0:	bf28      	it	cs
 80007c2:	2304      	movcs	r3, #4
 80007c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	d902      	bls.n	80007d4 <NVIC_EncodePriority+0x30>
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3b03      	subs	r3, #3
 80007d2:	e000      	b.n	80007d6 <NVIC_EncodePriority+0x32>
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	f04f 32ff 	mov.w	r2, #4294967295
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43da      	mvns	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	401a      	ands	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43d9      	mvns	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	4313      	orrs	r3, r2
         );
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3724      	adds	r7, #36	; 0x24
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800081c:	d301      	bcc.n	8000822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081e:	2301      	movs	r3, #1
 8000820:	e00f      	b.n	8000842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <SysTick_Config+0x40>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082a:	210f      	movs	r1, #15
 800082c:	f04f 30ff 	mov.w	r0, #4294967295
 8000830:	f7ff ff8e 	bl	8000750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <SysTick_Config+0x40>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <SysTick_Config+0x40>)
 800083c:	2207      	movs	r2, #7
 800083e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	e000e010 	.word	0xe000e010

08000850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff29 	bl	80006b0 <__NVIC_SetPriorityGrouping>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000866:	b580      	push	{r7, lr}
 8000868:	b086      	sub	sp, #24
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
 8000872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000878:	f7ff ff3e 	bl	80006f8 <__NVIC_GetPriorityGrouping>
 800087c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	68b9      	ldr	r1, [r7, #8]
 8000882:	6978      	ldr	r0, [r7, #20]
 8000884:	f7ff ff8e 	bl	80007a4 <NVIC_EncodePriority>
 8000888:	4602      	mov	r2, r0
 800088a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088e:	4611      	mov	r1, r2
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff5d 	bl	8000750 <__NVIC_SetPriority>
}
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff31 	bl	8000714 <__NVIC_EnableIRQ>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b082      	sub	sp, #8
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff ffa2 	bl	800080c <SysTick_Config>
 80008c8:	4603      	mov	r3, r0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008d2:	b480      	push	{r7}
 80008d4:	b083      	sub	sp, #12
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d004      	beq.n	80008f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e00c      	b.n	800090a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2205      	movs	r2, #5
 80008f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f022 0201 	bic.w	r2, r2, #1
 8000906:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800092e:	2300      	movs	r3, #0
 8000930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
 8000936:	e175      	b.n	8000c24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000938:	2201      	movs	r2, #1
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	697a      	ldr	r2, [r7, #20]
 8000948:	4013      	ands	r3, r2
 800094a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	429a      	cmp	r2, r3
 8000952:	f040 8164 	bne.w	8000c1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	2b02      	cmp	r3, #2
 800095c:	d003      	beq.n	8000966 <HAL_GPIO_Init+0x4e>
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	2b12      	cmp	r3, #18
 8000964:	d123      	bne.n	80009ae <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	08da      	lsrs	r2, r3, #3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3208      	adds	r2, #8
 800096e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	220f      	movs	r2, #15
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	4013      	ands	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	691a      	ldr	r2, [r3, #16]
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	f003 0307 	and.w	r3, r3, #7
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	69ba      	ldr	r2, [r7, #24]
 800099c:	4313      	orrs	r3, r2
 800099e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	08da      	lsrs	r2, r3, #3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3208      	adds	r2, #8
 80009a8:	69b9      	ldr	r1, [r7, #24]
 80009aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	2203      	movs	r2, #3
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	4013      	ands	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 0203 	and.w	r2, r3, #3
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	4313      	orrs	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d00b      	beq.n	8000a02 <HAL_GPIO_Init+0xea>
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d007      	beq.n	8000a02 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f6:	2b11      	cmp	r3, #17
 80009f8:	d003      	beq.n	8000a02 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	2b12      	cmp	r3, #18
 8000a00:	d130      	bne.n	8000a64 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	4013      	ands	r3, r2
 8000a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	68da      	ldr	r2, [r3, #12]
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a38:	2201      	movs	r2, #1
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	4013      	ands	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	091b      	lsrs	r3, r3, #4
 8000a4e:	f003 0201 	and.w	r2, r3, #1
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	2203      	movs	r2, #3
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	689a      	ldr	r2, [r3, #8]
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	f000 80be 	beq.w	8000c1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b65      	ldr	r3, [pc, #404]	; (8000c38 <HAL_GPIO_Init+0x320>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a64      	ldr	r2, [pc, #400]	; (8000c38 <HAL_GPIO_Init+0x320>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b62      	ldr	r3, [pc, #392]	; (8000c38 <HAL_GPIO_Init+0x320>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000aba:	4a60      	ldr	r2, [pc, #384]	; (8000c3c <HAL_GPIO_Init+0x324>)
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	089b      	lsrs	r3, r3, #2
 8000ac0:	3302      	adds	r3, #2
 8000ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	220f      	movs	r2, #15
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	4013      	ands	r3, r2
 8000adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a57      	ldr	r2, [pc, #348]	; (8000c40 <HAL_GPIO_Init+0x328>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d037      	beq.n	8000b56 <HAL_GPIO_Init+0x23e>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a56      	ldr	r2, [pc, #344]	; (8000c44 <HAL_GPIO_Init+0x32c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d031      	beq.n	8000b52 <HAL_GPIO_Init+0x23a>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a55      	ldr	r2, [pc, #340]	; (8000c48 <HAL_GPIO_Init+0x330>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d02b      	beq.n	8000b4e <HAL_GPIO_Init+0x236>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a54      	ldr	r2, [pc, #336]	; (8000c4c <HAL_GPIO_Init+0x334>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d025      	beq.n	8000b4a <HAL_GPIO_Init+0x232>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a53      	ldr	r2, [pc, #332]	; (8000c50 <HAL_GPIO_Init+0x338>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d01f      	beq.n	8000b46 <HAL_GPIO_Init+0x22e>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a52      	ldr	r2, [pc, #328]	; (8000c54 <HAL_GPIO_Init+0x33c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d019      	beq.n	8000b42 <HAL_GPIO_Init+0x22a>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a51      	ldr	r2, [pc, #324]	; (8000c58 <HAL_GPIO_Init+0x340>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d013      	beq.n	8000b3e <HAL_GPIO_Init+0x226>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a50      	ldr	r2, [pc, #320]	; (8000c5c <HAL_GPIO_Init+0x344>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d00d      	beq.n	8000b3a <HAL_GPIO_Init+0x222>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a4f      	ldr	r2, [pc, #316]	; (8000c60 <HAL_GPIO_Init+0x348>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d007      	beq.n	8000b36 <HAL_GPIO_Init+0x21e>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a4e      	ldr	r2, [pc, #312]	; (8000c64 <HAL_GPIO_Init+0x34c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d101      	bne.n	8000b32 <HAL_GPIO_Init+0x21a>
 8000b2e:	2309      	movs	r3, #9
 8000b30:	e012      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b32:	230a      	movs	r3, #10
 8000b34:	e010      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b36:	2308      	movs	r3, #8
 8000b38:	e00e      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	e00c      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b3e:	2306      	movs	r3, #6
 8000b40:	e00a      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b42:	2305      	movs	r3, #5
 8000b44:	e008      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b46:	2304      	movs	r3, #4
 8000b48:	e006      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e004      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b4e:	2302      	movs	r3, #2
 8000b50:	e002      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b56:	2300      	movs	r3, #0
 8000b58:	69fa      	ldr	r2, [r7, #28]
 8000b5a:	f002 0203 	and.w	r2, r2, #3
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	4093      	lsls	r3, r2
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b68:	4934      	ldr	r1, [pc, #208]	; (8000c3c <HAL_GPIO_Init+0x324>)
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	3302      	adds	r3, #2
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b76:	4b3c      	ldr	r3, [pc, #240]	; (8000c68 <HAL_GPIO_Init+0x350>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	4013      	ands	r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b9a:	4a33      	ldr	r2, [pc, #204]	; (8000c68 <HAL_GPIO_Init+0x350>)
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ba0:	4b31      	ldr	r3, [pc, #196]	; (8000c68 <HAL_GPIO_Init+0x350>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	4013      	ands	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000bc4:	4a28      	ldr	r2, [pc, #160]	; (8000c68 <HAL_GPIO_Init+0x350>)
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bca:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <HAL_GPIO_Init+0x350>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bee:	4a1e      	ldr	r2, [pc, #120]	; (8000c68 <HAL_GPIO_Init+0x350>)
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <HAL_GPIO_Init+0x350>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4013      	ands	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c18:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <HAL_GPIO_Init+0x350>)
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3301      	adds	r3, #1
 8000c22:	61fb      	str	r3, [r7, #28]
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	2b0f      	cmp	r3, #15
 8000c28:	f67f ae86 	bls.w	8000938 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3724      	adds	r7, #36	; 0x24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40013800 	.word	0x40013800
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020c00 	.word	0x40020c00
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40021400 	.word	0x40021400
 8000c58:	40021800 	.word	0x40021800
 8000c5c:	40021c00 	.word	0x40021c00
 8000c60:	40022000 	.word	0x40022000
 8000c64:	40022400 	.word	0x40022400
 8000c68:	40013c00 	.word	0x40013c00

08000c6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	887b      	ldrh	r3, [r7, #2]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d002      	beq.n	8000c8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c84:	2301      	movs	r3, #1
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e001      	b.n	8000c8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	807b      	strh	r3, [r7, #2]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cac:	787b      	ldrb	r3, [r7, #1]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cb2:	887a      	ldrh	r2, [r7, #2]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000cb8:	e003      	b.n	8000cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000cba:	887b      	ldrh	r3, [r7, #2]
 8000cbc:	041a      	lsls	r2, r3, #16
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	619a      	str	r2, [r3, #24]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e07f      	b.n	8000de2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d106      	bne.n	8000cfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f004 fff6 	bl	8005ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2224      	movs	r2, #36	; 0x24
 8000d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f022 0201 	bic.w	r2, r2, #1
 8000d12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d107      	bne.n	8000d4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	e006      	b.n	8000d58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000d56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d104      	bne.n	8000d6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6859      	ldr	r1, [r3, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <HAL_I2C_Init+0x11c>)
 8000d76:	430b      	orrs	r3, r1
 8000d78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	691a      	ldr	r2, [r3, #16]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	ea42 0103 	orr.w	r1, r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	021a      	lsls	r2, r3, #8
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69d9      	ldr	r1, [r3, #28]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a1a      	ldr	r2, [r3, #32]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f042 0201 	orr.w	r2, r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2220      	movs	r2, #32
 8000dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	02008000 	.word	0x02008000

08000df0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af02      	add	r7, sp, #8
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	817b      	strh	r3, [r7, #10]
 8000e00:	4613      	mov	r3, r2
 8000e02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b20      	cmp	r3, #32
 8000e0e:	f040 80da 	bne.w	8000fc6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d101      	bne.n	8000e20 <HAL_I2C_Master_Transmit+0x30>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	e0d3      	b.n	8000fc8 <HAL_I2C_Master_Transmit+0x1d8>
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e28:	f7ff fc14 	bl	8000654 <HAL_GetTick>
 8000e2c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2319      	movs	r3, #25
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	f000 fe76 	bl	8001b2c <I2C_WaitOnFlagUntilTimeout>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e0be      	b.n	8000fc8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2221      	movs	r2, #33	; 0x21
 8000e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2210      	movs	r2, #16
 8000e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	893a      	ldrh	r2, [r7, #8]
 8000e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	2bff      	cmp	r3, #255	; 0xff
 8000e7a:	d90e      	bls.n	8000e9a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	22ff      	movs	r2, #255	; 0xff
 8000e80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	8979      	ldrh	r1, [r7, #10]
 8000e8a:	4b51      	ldr	r3, [pc, #324]	; (8000fd0 <HAL_I2C_Master_Transmit+0x1e0>)
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e92:	68f8      	ldr	r0, [r7, #12]
 8000e94:	f000 ffd8 	bl	8001e48 <I2C_TransferConfig>
 8000e98:	e06c      	b.n	8000f74 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	8979      	ldrh	r1, [r7, #10]
 8000eac:	4b48      	ldr	r3, [pc, #288]	; (8000fd0 <HAL_I2C_Master_Transmit+0x1e0>)
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f000 ffc7 	bl	8001e48 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000eba:	e05b      	b.n	8000f74 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	6a39      	ldr	r1, [r7, #32]
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f000 fe73 	bl	8001bac <I2C_WaitOnTXISFlagUntilTimeout>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e07b      	b.n	8000fc8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed4:	781a      	ldrb	r2, [r3, #0]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee0:	1c5a      	adds	r2, r3, #1
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	3b01      	subs	r3, #1
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d034      	beq.n	8000f74 <HAL_I2C_Master_Transmit+0x184>
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d130      	bne.n	8000f74 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	6a3b      	ldr	r3, [r7, #32]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2180      	movs	r1, #128	; 0x80
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f000 fe05 	bl	8001b2c <I2C_WaitOnFlagUntilTimeout>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e04d      	b.n	8000fc8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	2bff      	cmp	r3, #255	; 0xff
 8000f34:	d90e      	bls.n	8000f54 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	22ff      	movs	r2, #255	; 0xff
 8000f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	8979      	ldrh	r1, [r7, #10]
 8000f44:	2300      	movs	r3, #0
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f000 ff7b 	bl	8001e48 <I2C_TransferConfig>
 8000f52:	e00f      	b.n	8000f74 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	8979      	ldrh	r1, [r7, #10]
 8000f66:	2300      	movs	r3, #0
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f000 ff6a 	bl	8001e48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d19e      	bne.n	8000ebc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	6a39      	ldr	r1, [r7, #32]
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f000 fe52 	bl	8001c2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e01a      	b.n	8000fc8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2220      	movs	r2, #32
 8000f98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6859      	ldr	r1, [r3, #4]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_I2C_Master_Transmit+0x1e4>)
 8000fa6:	400b      	ands	r3, r1
 8000fa8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2220      	movs	r2, #32
 8000fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8000fc6:	2302      	movs	r3, #2
  }
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	80002000 	.word	0x80002000
 8000fd4:	fe00e800 	.word	0xfe00e800

08000fd8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	817b      	strh	r3, [r7, #10]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b20      	cmp	r3, #32
 8000ff6:	f040 80db 	bne.w	80011b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001000:	2b01      	cmp	r3, #1
 8001002:	d101      	bne.n	8001008 <HAL_I2C_Master_Receive+0x30>
 8001004:	2302      	movs	r3, #2
 8001006:	e0d4      	b.n	80011b2 <HAL_I2C_Master_Receive+0x1da>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2201      	movs	r2, #1
 800100c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001010:	f7ff fb20 	bl	8000654 <HAL_GetTick>
 8001014:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2319      	movs	r3, #25
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f000 fd82 	bl	8001b2c <I2C_WaitOnFlagUntilTimeout>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e0bf      	b.n	80011b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2222      	movs	r2, #34	; 0x22
 8001036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2210      	movs	r2, #16
 800103e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2200      	movs	r2, #0
 8001046:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	893a      	ldrh	r2, [r7, #8]
 8001052:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2200      	movs	r2, #0
 8001058:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800105e:	b29b      	uxth	r3, r3
 8001060:	2bff      	cmp	r3, #255	; 0xff
 8001062:	d90e      	bls.n	8001082 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	22ff      	movs	r2, #255	; 0xff
 8001068:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800106e:	b2da      	uxtb	r2, r3
 8001070:	8979      	ldrh	r1, [r7, #10]
 8001072:	4b52      	ldr	r3, [pc, #328]	; (80011bc <HAL_I2C_Master_Receive+0x1e4>)
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f000 fee4 	bl	8001e48 <I2C_TransferConfig>
 8001080:	e06d      	b.n	800115e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001086:	b29a      	uxth	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001090:	b2da      	uxtb	r2, r3
 8001092:	8979      	ldrh	r1, [r7, #10]
 8001094:	4b49      	ldr	r3, [pc, #292]	; (80011bc <HAL_I2C_Master_Receive+0x1e4>)
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f000 fed3 	bl	8001e48 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80010a2:	e05c      	b.n	800115e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	6a39      	ldr	r1, [r7, #32]
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f000 fdfb 	bl	8001ca4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e07c      	b.n	80011b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d4:	3b01      	subs	r3, #1
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	3b01      	subs	r3, #1
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d034      	beq.n	800115e <HAL_I2C_Master_Receive+0x186>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d130      	bne.n	800115e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	2200      	movs	r2, #0
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f000 fd10 	bl	8001b2c <I2C_WaitOnFlagUntilTimeout>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e04d      	b.n	80011b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800111a:	b29b      	uxth	r3, r3
 800111c:	2bff      	cmp	r3, #255	; 0xff
 800111e:	d90e      	bls.n	800113e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	22ff      	movs	r2, #255	; 0xff
 8001124:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800112a:	b2da      	uxtb	r2, r3
 800112c:	8979      	ldrh	r1, [r7, #10]
 800112e:	2300      	movs	r3, #0
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f000 fe86 	bl	8001e48 <I2C_TransferConfig>
 800113c:	e00f      	b.n	800115e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001142:	b29a      	uxth	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800114c:	b2da      	uxtb	r2, r3
 800114e:	8979      	ldrh	r1, [r7, #10]
 8001150:	2300      	movs	r3, #0
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 fe75 	bl	8001e48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001162:	b29b      	uxth	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d19d      	bne.n	80010a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	6a39      	ldr	r1, [r7, #32]
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f000 fd5d 	bl	8001c2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e01a      	b.n	80011b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2220      	movs	r2, #32
 8001182:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6859      	ldr	r1, [r3, #4]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_I2C_Master_Receive+0x1e8>)
 8001190:	400b      	ands	r3, r1
 8001192:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2220      	movs	r2, #32
 8001198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	e000      	b.n	80011b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80011b0:	2302      	movs	r3, #2
  }
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	80002400 	.word	0x80002400
 80011c0:	fe00e800 	.word	0xfe00e800

080011c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	68f9      	ldr	r1, [r7, #12]
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	4798      	blx	r3
  }
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	0a1b      	lsrs	r3, r3, #8
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d010      	beq.n	800123e <HAL_I2C_ER_IRQHandler+0x46>
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	09db      	lsrs	r3, r3, #7
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00a      	beq.n	800123e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122c:	f043 0201 	orr.w	r2, r3, #1
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f44f 7280 	mov.w	r2, #256	; 0x100
 800123c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	0a9b      	lsrs	r3, r3, #10
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d010      	beq.n	800126c <HAL_I2C_ER_IRQHandler+0x74>
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	09db      	lsrs	r3, r3, #7
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00a      	beq.n	800126c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f043 0208 	orr.w	r2, r3, #8
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800126a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	0a5b      	lsrs	r3, r3, #9
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b00      	cmp	r3, #0
 8001276:	d010      	beq.n	800129a <HAL_I2C_ER_IRQHandler+0xa2>
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	09db      	lsrs	r3, r3, #7
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00a      	beq.n	800129a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001288:	f043 0202 	orr.w	r2, r3, #2
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001298:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 030b 	and.w	r3, r3, #11
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80012aa:	68f9      	ldr	r1, [r7, #12]
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 fb35 	bl	800191c <I2C_ITError>
  }
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	70fb      	strb	r3, [r7, #3]
 80012ee:	4613      	mov	r3, r2
 80012f0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <I2C_Slave_ISR_IT+0x24>
 800135a:	2302      	movs	r3, #2
 800135c:	e0f0      	b.n	8001540 <I2C_Slave_ISR_IT+0x206>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d04d      	beq.n	800140e <I2C_Slave_ISR_IT+0xd4>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d047      	beq.n	800140e <I2C_Slave_ISR_IT+0xd4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001382:	b29b      	uxth	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d128      	bne.n	80013da <I2C_Slave_ISR_IT+0xa0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b28      	cmp	r3, #40	; 0x28
 8001392:	d108      	bne.n	80013a6 <I2C_Slave_ISR_IT+0x6c>
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800139a:	d104      	bne.n	80013a6 <I2C_Slave_ISR_IT+0x6c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800139c:	6979      	ldr	r1, [r7, #20]
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f000 fa68 	bl	8001874 <I2C_ITListenCplt>
 80013a4:	e032      	b.n	800140c <I2C_Slave_ISR_IT+0xd2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b29      	cmp	r3, #41	; 0x29
 80013b0:	d10e      	bne.n	80013d0 <I2C_Slave_ISR_IT+0x96>
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80013b8:	d00a      	beq.n	80013d0 <I2C_Slave_ISR_IT+0x96>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2210      	movs	r2, #16
 80013c0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f000 fb6a 	bl	8001a9c <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f000 f93f 	bl	800164c <I2C_ITSlaveSeqCplt>
 80013ce:	e01d      	b.n	800140c <I2C_Slave_ISR_IT+0xd2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2210      	movs	r2, #16
 80013d6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80013d8:	e09a      	b.n	8001510 <I2C_Slave_ISR_IT+0x1d6>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2210      	movs	r2, #16
 80013e0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f043 0204 	orr.w	r2, r3, #4
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <I2C_Slave_ISR_IT+0xc4>
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013fa:	f040 8089 	bne.w	8001510 <I2C_Slave_ISR_IT+0x1d6>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	4619      	mov	r1, r3
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 fa89 	bl	800191c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800140a:	e081      	b.n	8001510 <I2C_Slave_ISR_IT+0x1d6>
 800140c:	e080      	b.n	8001510 <I2C_Slave_ISR_IT+0x1d6>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d034      	beq.n	8001484 <I2C_Slave_ISR_IT+0x14a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d02e      	beq.n	8001484 <I2C_Slave_ISR_IT+0x14a>
  {
    if (hi2c->XferCount > 0U)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800142a:	b29b      	uxth	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d01c      	beq.n	800146a <I2C_Slave_ISR_IT+0x130>
    {
      /* Remove RXNE flag on temporary variable as read done */
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f023 0304 	bic.w	r3, r3, #4
 8001436:	617b      	str	r3, [r7, #20]

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001454:	3b01      	subs	r3, #1
 8001456:	b29a      	uxth	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001460:	b29b      	uxth	r3, r3
 8001462:	3b01      	subs	r3, #1
 8001464:	b29a      	uxth	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800146e:	b29b      	uxth	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d14f      	bne.n	8001514 <I2C_Slave_ISR_IT+0x1da>
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800147a:	d04b      	beq.n	8001514 <I2C_Slave_ISR_IT+0x1da>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 f8e5 	bl	800164c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001482:	e047      	b.n	8001514 <I2C_Slave_ISR_IT+0x1da>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	08db      	lsrs	r3, r3, #3
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00a      	beq.n	80014a6 <I2C_Slave_ISR_IT+0x16c>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	08db      	lsrs	r3, r3, #3
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d004      	beq.n	80014a6 <I2C_Slave_ISR_IT+0x16c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800149c:	6979      	ldr	r1, [r7, #20]
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 f852 	bl	8001548 <I2C_ITAddrCplt>
 80014a4:	e037      	b.n	8001516 <I2C_Slave_ISR_IT+0x1dc>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d031      	beq.n	8001516 <I2C_Slave_ISR_IT+0x1dc>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	085b      	lsrs	r3, r3, #1
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d02b      	beq.n	8001516 <I2C_Slave_ISR_IT+0x1dc>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d018      	beq.n	80014fa <I2C_Slave_ISR_IT+0x1c0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	781a      	ldrb	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	3b01      	subs	r3, #1
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f0:	3b01      	subs	r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	851a      	strh	r2, [r3, #40]	; 0x28
 80014f8:	e00d      	b.n	8001516 <I2C_Slave_ISR_IT+0x1dc>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001500:	d002      	beq.n	8001508 <I2C_Slave_ISR_IT+0x1ce>
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d106      	bne.n	8001516 <I2C_Slave_ISR_IT+0x1dc>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 f89f 	bl	800164c <I2C_ITSlaveSeqCplt>
 800150e:	e002      	b.n	8001516 <I2C_Slave_ISR_IT+0x1dc>
    if (hi2c->XferCount == 0U)
 8001510:	bf00      	nop
 8001512:	e000      	b.n	8001516 <I2C_Slave_ISR_IT+0x1dc>
    if ((hi2c->XferCount == 0U) && \
 8001514:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	095b      	lsrs	r3, r3, #5
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d009      	beq.n	8001536 <I2C_Slave_ISR_IT+0x1fc>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	095b      	lsrs	r3, r3, #5
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <I2C_Slave_ISR_IT+0x1fc>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800152e:	6979      	ldr	r1, [r7, #20]
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 f8c9 	bl	80016c8 <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800155e:	2b28      	cmp	r3, #40	; 0x28
 8001560:	d168      	bne.n	8001634 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	0c1b      	lsrs	r3, r3, #16
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	0c1b      	lsrs	r3, r3, #16
 800157a:	b29b      	uxth	r3, r3
 800157c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001580:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	b29b      	uxth	r3, r3
 800158a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800158e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	b29b      	uxth	r3, r3
 8001598:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800159c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d137      	bne.n	8001616 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80015a6:	897b      	ldrh	r3, [r7, #10]
 80015a8:	09db      	lsrs	r3, r3, #7
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	89bb      	ldrh	r3, [r7, #12]
 80015ae:	4053      	eors	r3, r2
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	f003 0306 	and.w	r3, r3, #6
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d11c      	bne.n	80015f4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80015ba:	897b      	ldrh	r3, [r7, #10]
 80015bc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d139      	bne.n	8001644 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2208      	movs	r2, #8
 80015dc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80015e6:	89ba      	ldrh	r2, [r7, #12]
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	4619      	mov	r1, r3
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fe78 	bl	80012e2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80015f2:	e027      	b.n	8001644 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 80015f4:	893b      	ldrh	r3, [r7, #8]
 80015f6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80015f8:	2104      	movs	r1, #4
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 fc52 	bl	8001ea4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001608:	89ba      	ldrh	r2, [r7, #12]
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	4619      	mov	r1, r3
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fe67 	bl	80012e2 <HAL_I2C_AddrCallback>
}
 8001614:	e016      	b.n	8001644 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001616:	2104      	movs	r1, #4
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 fc43 	bl	8001ea4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001626:	89ba      	ldrh	r2, [r7, #12]
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	4619      	mov	r1, r3
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fe58 	bl	80012e2 <HAL_I2C_AddrCallback>
}
 8001632:	e007      	b.n	8001644 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2208      	movs	r2, #8
 800163a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b29      	cmp	r3, #41	; 0x29
 8001666:	d112      	bne.n	800168e <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2228      	movs	r2, #40	; 0x28
 800166c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2221      	movs	r2, #33	; 0x21
 8001674:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001676:	2101      	movs	r1, #1
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 fc13 	bl	8001ea4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fe17 	bl	80012ba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800168c:	e017      	b.n	80016be <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b2a      	cmp	r3, #42	; 0x2a
 8001698:	d111      	bne.n	80016be <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2228      	movs	r2, #40	; 0x28
 800169e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2222      	movs	r2, #34	; 0x22
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80016a8:	2102      	movs	r1, #2
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 fbfa 	bl	8001ea4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff fe08 	bl	80012ce <HAL_I2C_SlaveRxCpltCallback>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2220      	movs	r2, #32
 80016e4:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80016e6:	2107      	movs	r1, #7
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fbdb 	bl	8001ea4 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016fc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b58      	ldr	r3, [pc, #352]	; (800186c <I2C_ITSlaveCplt+0x1a4>)
 800170a:	400b      	ands	r3, r1
 800170c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f9c4 	bl	8001a9c <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	0b9b      	lsrs	r3, r3, #14
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00b      	beq.n	8001738 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001724:	2b00      	cmp	r3, #0
 8001726:	d018      	beq.n	800175a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	b29a      	uxth	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001736:	e010      	b.n	800175a <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	0bdb      	lsrs	r3, r3, #15
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00a      	beq.n	800175a <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001748:	2b00      	cmp	r3, #0
 800174a:	d006      	beq.n	800175a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	b29a      	uxth	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d020      	beq.n	80017a8 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00c      	beq.n	80017a8 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f043 0204 	orr.w	r2, r3, #4
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d010      	beq.n	80017fc <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4619      	mov	r1, r3
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f89b 	bl	800191c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b28      	cmp	r3, #40	; 0x28
 80017f0:	d138      	bne.n	8001864 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80017f2:	68f9      	ldr	r1, [r7, #12]
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f83d 	bl	8001874 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80017fa:	e033      	b.n	8001864 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001804:	d011      	beq.n	800182a <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ff20 	bl	800164c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a18      	ldr	r2, [pc, #96]	; (8001870 <I2C_ITSlaveCplt+0x1a8>)
 8001810:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2220      	movs	r2, #32
 8001816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fd6b 	bl	80012fe <HAL_I2C_ListenCpltCallback>
}
 8001828:	e01c      	b.n	8001864 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b22      	cmp	r3, #34	; 0x22
 8001834:	d10b      	bne.n	800184e <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2220      	movs	r2, #32
 800183a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fd41 	bl	80012ce <HAL_I2C_SlaveRxCpltCallback>
}
 800184c:	e00a      	b.n	8001864 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2220      	movs	r2, #32
 8001852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fd2b 	bl	80012ba <HAL_I2C_SlaveTxCpltCallback>
}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	fe00e800 	.word	0xfe00e800
 8001870:	ffff0000 	.word	0xffff0000

08001874 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a25      	ldr	r2, [pc, #148]	; (8001918 <I2C_ITListenCplt+0xa4>)
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2220      	movs	r2, #32
 800188e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d022      	beq.n	80018f2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d012      	beq.n	80018f2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f043 0204 	orr.w	r2, r3, #4
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80018f2:	2107      	movs	r1, #7
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fad5 	bl	8001ea4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2210      	movs	r2, #16
 8001900:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fcf7 	bl	80012fe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	ffff0000 	.word	0xffff0000

0800191c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800192c:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a55      	ldr	r2, [pc, #340]	; (8001a90 <I2C_ITError+0x174>)
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	2b28      	cmp	r3, #40	; 0x28
 8001952:	d005      	beq.n	8001960 <I2C_ITError+0x44>
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	2b29      	cmp	r3, #41	; 0x29
 8001958:	d002      	beq.n	8001960 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	2b2a      	cmp	r3, #42	; 0x2a
 800195e:	d10e      	bne.n	800197e <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001960:	2103      	movs	r1, #3
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 fa9e 	bl	8001ea4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2228      	movs	r2, #40	; 0x28
 800196c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a46      	ldr	r2, [pc, #280]	; (8001a94 <I2C_ITError+0x178>)
 800197a:	635a      	str	r2, [r3, #52]	; 0x34
 800197c:	e013      	b.n	80019a6 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800197e:	2107      	movs	r1, #7
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 fa8f 	bl	8001ea4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b60      	cmp	r3, #96	; 0x60
 8001990:	d003      	beq.n	800199a <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2220      	movs	r2, #32
 8001996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019b4:	d123      	bne.n	80019fe <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80019c4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d05c      	beq.n	8001a88 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d2:	4a31      	ldr	r2, [pc, #196]	; (8001a98 <I2C_ITError+0x17c>)
 80019d4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe ff75 	bl	80008d2 <HAL_DMA_Abort_IT>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d04c      	beq.n	8001a88 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019f8:	4610      	mov	r0, r2
 80019fa:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80019fc:	e044      	b.n	8001a88 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a0c:	d123      	bne.n	8001a56 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a1c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d030      	beq.n	8001a88 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2a:	4a1b      	ldr	r2, [pc, #108]	; (8001a98 <I2C_ITError+0x17c>)
 8001a2c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe ff49 	bl	80008d2 <HAL_DMA_Abort_IT>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d020      	beq.n	8001a88 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a50:	4610      	mov	r0, r2
 8001a52:	4798      	blx	r3
}
 8001a54:	e018      	b.n	8001a88 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b60      	cmp	r3, #96	; 0x60
 8001a60:	d10b      	bne.n	8001a7a <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2220      	movs	r2, #32
 8001a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fc57 	bl	8001326 <HAL_I2C_AbortCpltCallback>
}
 8001a78:	e006      	b.n	8001a88 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fc45 	bl	8001312 <HAL_I2C_ErrorCallback>
}
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	ffff0000 	.word	0xffff0000
 8001a94:	0800133b 	.word	0x0800133b
 8001a98:	08001ae5 	.word	0x08001ae5

08001a9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d103      	bne.n	8001aba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d007      	beq.n	8001ad8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	699a      	ldr	r2, [r3, #24]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	619a      	str	r2, [r3, #24]
  }
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af6:	2200      	movs	r2, #0
 8001af8:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afe:	2200      	movs	r2, #0
 8001b00:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b60      	cmp	r3, #96	; 0x60
 8001b0c:	d107      	bne.n	8001b1e <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2220      	movs	r2, #32
 8001b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7ff fc05 	bl	8001326 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001b1c:	e002      	b.n	8001b24 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f7ff fbf7 	bl	8001312 <HAL_I2C_ErrorCallback>
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b3c:	e022      	b.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d01e      	beq.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b46:	f7fe fd85 	bl	8000654 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d302      	bcc.n	8001b5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d113      	bne.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b60:	f043 0220 	orr.w	r2, r3, #32
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e00f      	b.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699a      	ldr	r2, [r3, #24]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	bf0c      	ite	eq
 8001b94:	2301      	moveq	r3, #1
 8001b96:	2300      	movne	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d0cd      	beq.n	8001b3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bb8:	e02c      	b.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 f8dc 	bl	8001d7c <I2C_IsAcknowledgeFailed>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e02a      	b.n	8001c24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd4:	d01e      	beq.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd6:	f7fe fd3d 	bl	8000654 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d302      	bcc.n	8001bec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d113      	bne.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	f043 0220 	orr.w	r2, r3, #32
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e007      	b.n	8001c24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d1cb      	bne.n	8001bba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c38:	e028      	b.n	8001c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f89c 	bl	8001d7c <I2C_IsAcknowledgeFailed>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e026      	b.n	8001c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4e:	f7fe fd01 	bl	8000654 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d302      	bcc.n	8001c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d113      	bne.n	8001c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	f043 0220 	orr.w	r2, r3, #32
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e007      	b.n	8001c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d1cf      	bne.n	8001c3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cb0:	e055      	b.n	8001d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f860 	bl	8001d7c <I2C_IsAcknowledgeFailed>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e053      	b.n	8001d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d129      	bne.n	8001d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d105      	bne.n	8001cee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e03f      	b.n	8001d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001d02:	400b      	ands	r3, r1
 8001d04:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e022      	b.n	8001d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d28:	f7fe fc94 	bl	8000654 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d302      	bcc.n	8001d3e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10f      	bne.n	8001d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f043 0220 	orr.w	r2, r3, #32
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e007      	b.n	8001d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d1a2      	bne.n	8001cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	fe00e800 	.word	0xfe00e800

08001d7c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d151      	bne.n	8001e3a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d96:	e022      	b.n	8001dde <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9e:	d01e      	beq.n	8001dde <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da0:	f7fe fc58 	bl	8000654 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d302      	bcc.n	8001db6 <I2C_IsAcknowledgeFailed+0x3a>
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d113      	bne.n	8001dde <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	f043 0220 	orr.w	r2, r3, #32
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e02e      	b.n	8001e3c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0320 	and.w	r3, r3, #32
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	d1d5      	bne.n	8001d98 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2210      	movs	r2, #16
 8001df2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f7ff fe4d 	bl	8001a9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6859      	ldr	r1, [r3, #4]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <I2C_IsAcknowledgeFailed+0xc8>)
 8001e0e:	400b      	ands	r3, r1
 8001e10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f043 0204 	orr.w	r2, r3, #4
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	fe00e800 	.word	0xfe00e800

08001e48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	817b      	strh	r3, [r7, #10]
 8001e56:	4613      	mov	r3, r2
 8001e58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	0d5b      	lsrs	r3, r3, #21
 8001e64:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e68:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <I2C_TransferConfig+0x58>)
 8001e6a:	430b      	orrs	r3, r1
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	ea02 0103 	and.w	r1, r2, r3
 8001e72:	897b      	ldrh	r3, [r7, #10]
 8001e74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e78:	7a7b      	ldrb	r3, [r7, #9]
 8001e7a:	041b      	lsls	r3, r3, #16
 8001e7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	03ff63ff 	.word	0x03ff63ff

08001ea4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001eb4:	887b      	ldrh	r3, [r7, #2]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00f      	beq.n	8001ede <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8001ec4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001ed2:	2b28      	cmp	r3, #40	; 0x28
 8001ed4:	d003      	beq.n	8001ede <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001edc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00f      	beq.n	8001f08 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8001eee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001efc:	2b28      	cmp	r3, #40	; 0x28
 8001efe:	d003      	beq.n	8001f08 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001f06:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001f08:	887b      	ldrh	r3, [r7, #2]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8001f18:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001f1a:	887b      	ldrh	r3, [r7, #2]
 8001f1c:	f003 0311 	and.w	r3, r3, #17
 8001f20:	2b11      	cmp	r3, #17
 8001f22:	d103      	bne.n	8001f2c <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8001f2a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	f003 0312 	and.w	r3, r3, #18
 8001f32:	2b12      	cmp	r3, #18
 8001f34:	d103      	bne.n	8001f3e <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f043 0320 	orr.w	r3, r3, #32
 8001f3c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	f003 0312 	and.w	r3, r3, #18
 8001f44:	2b12      	cmp	r3, #18
 8001f46:	d103      	bne.n	8001f50 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6819      	ldr	r1, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	400a      	ands	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	d138      	bne.n	8001ff6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e032      	b.n	8001ff8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2224      	movs	r2, #36	; 0x24
 8001f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0201 	bic.w	r2, r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fc0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6819      	ldr	r1, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0201 	orr.w	r2, r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e000      	b.n	8001ff8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ff6:	2302      	movs	r3, #2
  }
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b20      	cmp	r3, #32
 8002018:	d139      	bne.n	800208e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002024:	2302      	movs	r3, #2
 8002026:	e033      	b.n	8002090 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2224      	movs	r2, #36	; 0x24
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0201 	bic.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002056:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e000      	b.n	8002090 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800208e:	2302      	movs	r3, #2
  }
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	b08f      	sub	sp, #60	; 0x3c
 80020a0:	af0a      	add	r7, sp, #40	; 0x28
 80020a2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e10a      	b.n	80022c4 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f004 fbba 	bl	800683c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2203      	movs	r2, #3
 80020cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f003 f913 	bl	8005300 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	687e      	ldr	r6, [r7, #4]
 80020e2:	466d      	mov	r5, sp
 80020e4:	f106 0410 	add.w	r4, r6, #16
 80020e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80020f8:	1d33      	adds	r3, r6, #4
 80020fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020fc:	6838      	ldr	r0, [r7, #0]
 80020fe:	f003 f8a7 	bl	8005250 <USB_CoreInit>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0d7      	b.n	80022c4 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f003 f901 	bl	8005322 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	e04a      	b.n	80021bc <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	1a9b      	subs	r3, r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	333d      	adds	r3, #61	; 0x3d
 8002136:	2201      	movs	r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	1a9b      	subs	r3, r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	333c      	adds	r3, #60	; 0x3c
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	b298      	uxth	r0, r3
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	3342      	adds	r3, #66	; 0x42
 8002162:	4602      	mov	r2, r0
 8002164:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	333f      	adds	r3, #63	; 0x3f
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	3344      	adds	r3, #68	; 0x44
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	3348      	adds	r3, #72	; 0x48
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	3350      	adds	r3, #80	; 0x50
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	3301      	adds	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d3af      	bcc.n	8002126 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]
 80021ca:	e044      	b.n	8002256 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	3301      	adds	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	d3b5      	bcc.n	80021cc <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	687e      	ldr	r6, [r7, #4]
 8002268:	466d      	mov	r5, sp
 800226a:	f106 0410 	add.w	r4, r6, #16
 800226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800227a:	e885 0003 	stmia.w	r5, {r0, r1}
 800227e:	1d33      	adds	r3, r6, #4
 8002280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002282:	6838      	ldr	r0, [r7, #0]
 8002284:	f003 f878 	bl	8005378 <USB_DevInit>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e014      	b.n	80022c4 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d102      	bne.n	80022b8 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f80a 	bl	80022cc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f003 fa38 	bl	8005732 <USB_DevDisconnect>

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_PCDEx_ActivateLPM+0x44>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	10000003 	.word	0x10000003

08002314 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a04      	ldr	r2, [pc, #16]	; (8002330 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800231e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002322:	6013      	str	r3, [r2, #0]
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40007000 	.word	0x40007000

08002334 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800233c:	2300      	movs	r3, #0
 800233e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e25c      	b.n	8002804 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 8087 	beq.w	8002466 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002358:	4b96      	ldr	r3, [pc, #600]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b04      	cmp	r3, #4
 8002362:	d00c      	beq.n	800237e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002364:	4b93      	ldr	r3, [pc, #588]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 030c 	and.w	r3, r3, #12
 800236c:	2b08      	cmp	r3, #8
 800236e:	d112      	bne.n	8002396 <HAL_RCC_OscConfig+0x62>
 8002370:	4b90      	ldr	r3, [pc, #576]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237c:	d10b      	bne.n	8002396 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237e:	4b8d      	ldr	r3, [pc, #564]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d06c      	beq.n	8002464 <HAL_RCC_OscConfig+0x130>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d168      	bne.n	8002464 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e236      	b.n	8002804 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x7a>
 80023a0:	4b84      	ldr	r3, [pc, #528]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a83      	ldr	r2, [pc, #524]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 80023a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	e02e      	b.n	800240c <HAL_RCC_OscConfig+0xd8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x9c>
 80023b6:	4b7f      	ldr	r3, [pc, #508]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a7e      	ldr	r2, [pc, #504]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 80023bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b7c      	ldr	r3, [pc, #496]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a7b      	ldr	r2, [pc, #492]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 80023c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e01d      	b.n	800240c <HAL_RCC_OscConfig+0xd8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0xc0>
 80023da:	4b76      	ldr	r3, [pc, #472]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a75      	ldr	r2, [pc, #468]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 80023e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b73      	ldr	r3, [pc, #460]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a72      	ldr	r2, [pc, #456]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e00b      	b.n	800240c <HAL_RCC_OscConfig+0xd8>
 80023f4:	4b6f      	ldr	r3, [pc, #444]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a6e      	ldr	r2, [pc, #440]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 80023fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4b6c      	ldr	r3, [pc, #432]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a6b      	ldr	r2, [pc, #428]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 8002406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe f91e 	bl	8000654 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800241c:	f7fe f91a 	bl	8000654 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e1ea      	b.n	8002804 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b61      	ldr	r3, [pc, #388]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0xe8>
 800243a:	e014      	b.n	8002466 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe f90a 	bl	8000654 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002444:	f7fe f906 	bl	8000654 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	; 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e1d6      	b.n	8002804 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002456:	4b57      	ldr	r3, [pc, #348]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x110>
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d069      	beq.n	8002546 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002472:	4b50      	ldr	r3, [pc, #320]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00b      	beq.n	8002496 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800247e:	4b4d      	ldr	r3, [pc, #308]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b08      	cmp	r3, #8
 8002488:	d11c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x190>
 800248a:	4b4a      	ldr	r3, [pc, #296]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d116      	bne.n	80024c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002496:	4b47      	ldr	r3, [pc, #284]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <HAL_RCC_OscConfig+0x17a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e1aa      	b.n	8002804 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ae:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	493d      	ldr	r1, [pc, #244]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c2:	e040      	b.n	8002546 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d023      	beq.n	8002514 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024cc:	4b39      	ldr	r3, [pc, #228]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a38      	ldr	r2, [pc, #224]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe f8bc 	bl	8000654 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e0:	f7fe f8b8 	bl	8000654 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e188      	b.n	8002804 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f2:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fe:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4929      	ldr	r1, [pc, #164]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]
 8002512:	e018      	b.n	8002546 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a26      	ldr	r2, [pc, #152]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe f898 	bl	8000654 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002528:	f7fe f894 	bl	8000654 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e164      	b.n	8002804 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253a:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d038      	beq.n	80025c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d019      	beq.n	800258e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800255a:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 800255c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255e:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002566:	f7fe f875 	bl	8000654 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800256e:	f7fe f871 	bl	8000654 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e141      	b.n	8002804 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 8002582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x23a>
 800258c:	e01a      	b.n	80025c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 8002590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002592:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <HAL_RCC_OscConfig+0x280>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259a:	f7fe f85b 	bl	8000654 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a2:	f7fe f857 	bl	8000654 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d903      	bls.n	80025b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e127      	b.n	8002804 <HAL_RCC_OscConfig+0x4d0>
 80025b4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b8:	4b94      	ldr	r3, [pc, #592]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 80025ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1ee      	bne.n	80025a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80a4 	beq.w	800271a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d2:	4b8e      	ldr	r3, [pc, #568]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10d      	bne.n	80025fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	4b8b      	ldr	r3, [pc, #556]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	4a8a      	ldr	r2, [pc, #552]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ea:	4b88      	ldr	r3, [pc, #544]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025f6:	2301      	movs	r3, #1
 80025f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025fa:	4b85      	ldr	r3, [pc, #532]	; (8002810 <HAL_RCC_OscConfig+0x4dc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d118      	bne.n	8002638 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002606:	4b82      	ldr	r3, [pc, #520]	; (8002810 <HAL_RCC_OscConfig+0x4dc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a81      	ldr	r2, [pc, #516]	; (8002810 <HAL_RCC_OscConfig+0x4dc>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002612:	f7fe f81f 	bl	8000654 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800261a:	f7fe f81b 	bl	8000654 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b64      	cmp	r3, #100	; 0x64
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e0eb      	b.n	8002804 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800262c:	4b78      	ldr	r3, [pc, #480]	; (8002810 <HAL_RCC_OscConfig+0x4dc>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x31a>
 8002640:	4b72      	ldr	r3, [pc, #456]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	4a71      	ldr	r2, [pc, #452]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6713      	str	r3, [r2, #112]	; 0x70
 800264c:	e02d      	b.n	80026aa <HAL_RCC_OscConfig+0x376>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x33c>
 8002656:	4b6d      	ldr	r3, [pc, #436]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a6c      	ldr	r2, [pc, #432]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
 8002662:	4b6a      	ldr	r3, [pc, #424]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	4a69      	ldr	r2, [pc, #420]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 8002668:	f023 0304 	bic.w	r3, r3, #4
 800266c:	6713      	str	r3, [r2, #112]	; 0x70
 800266e:	e01c      	b.n	80026aa <HAL_RCC_OscConfig+0x376>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b05      	cmp	r3, #5
 8002676:	d10c      	bne.n	8002692 <HAL_RCC_OscConfig+0x35e>
 8002678:	4b64      	ldr	r3, [pc, #400]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	4a63      	ldr	r2, [pc, #396]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	6713      	str	r3, [r2, #112]	; 0x70
 8002684:	4b61      	ldr	r3, [pc, #388]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	4a60      	ldr	r2, [pc, #384]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6713      	str	r3, [r2, #112]	; 0x70
 8002690:	e00b      	b.n	80026aa <HAL_RCC_OscConfig+0x376>
 8002692:	4b5e      	ldr	r3, [pc, #376]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	4a5d      	ldr	r2, [pc, #372]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6713      	str	r3, [r2, #112]	; 0x70
 800269e:	4b5b      	ldr	r3, [pc, #364]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	4a5a      	ldr	r2, [pc, #360]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 80026a4:	f023 0304 	bic.w	r3, r3, #4
 80026a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d015      	beq.n	80026de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b2:	f7fd ffcf 	bl	8000654 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fd ffcb 	bl	8000654 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e099      	b.n	8002804 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	4b4e      	ldr	r3, [pc, #312]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ee      	beq.n	80026ba <HAL_RCC_OscConfig+0x386>
 80026dc:	e014      	b.n	8002708 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026de:	f7fd ffb9 	bl	8000654 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e6:	f7fd ffb5 	bl	8000654 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e083      	b.n	8002804 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fc:	4b43      	ldr	r3, [pc, #268]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ee      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002708:	7dfb      	ldrb	r3, [r7, #23]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d105      	bne.n	800271a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	4b3f      	ldr	r3, [pc, #252]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a3e      	ldr	r2, [pc, #248]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 8002714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d06f      	beq.n	8002802 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002722:	4b3a      	ldr	r3, [pc, #232]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b08      	cmp	r3, #8
 800272c:	d067      	beq.n	80027fe <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d149      	bne.n	80027ca <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002736:	4b35      	ldr	r3, [pc, #212]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a34      	ldr	r2, [pc, #208]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 800273c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7fd ff87 	bl	8000654 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800274a:	f7fd ff83 	bl	8000654 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e053      	b.n	8002804 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275c:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	019b      	lsls	r3, r3, #6
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	085b      	lsrs	r3, r3, #1
 8002780:	3b01      	subs	r3, #1
 8002782:	041b      	lsls	r3, r3, #16
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	061b      	lsls	r3, r3, #24
 800278c:	4313      	orrs	r3, r2
 800278e:	4a1f      	ldr	r2, [pc, #124]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 8002790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002794:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002796:	4b1d      	ldr	r3, [pc, #116]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1c      	ldr	r2, [pc, #112]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 800279c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7fd ff57 	bl	8000654 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027aa:	f7fd ff53 	bl	8000654 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e023      	b.n	8002804 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x476>
 80027c8:	e01b      	b.n	8002802 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a0f      	ldr	r2, [pc, #60]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 80027d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fd ff3d 	bl	8000654 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027de:	f7fd ff39 	bl	8000654 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e009      	b.n	8002804 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_RCC_OscConfig+0x4d8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x4aa>
 80027fc:	e001      	b.n	8002802 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40023800 	.word	0x40023800
 8002810:	40007000 	.word	0x40007000

08002814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0ce      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800282c:	4b69      	ldr	r3, [pc, #420]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d910      	bls.n	800285c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b66      	ldr	r3, [pc, #408]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 020f 	bic.w	r2, r3, #15
 8002842:	4964      	ldr	r1, [pc, #400]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	4313      	orrs	r3, r2
 8002848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b62      	ldr	r3, [pc, #392]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0b6      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d020      	beq.n	80028aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002874:	4b58      	ldr	r3, [pc, #352]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4a57      	ldr	r2, [pc, #348]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800287e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800288c:	4b52      	ldr	r3, [pc, #328]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4a51      	ldr	r2, [pc, #324]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002896:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002898:	4b4f      	ldr	r3, [pc, #316]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	494c      	ldr	r1, [pc, #304]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d040      	beq.n	8002938 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	4b46      	ldr	r3, [pc, #280]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d115      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e07d      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d107      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d6:	4b40      	ldr	r3, [pc, #256]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e071      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e6:	4b3c      	ldr	r3, [pc, #240]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e069      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f023 0203 	bic.w	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4935      	ldr	r1, [pc, #212]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002908:	f7fd fea4 	bl	8000654 <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	e00a      	b.n	8002926 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002910:	f7fd fea0 	bl	8000654 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	; 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e051      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002926:	4b2c      	ldr	r3, [pc, #176]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 020c 	and.w	r2, r3, #12
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	429a      	cmp	r2, r3
 8002936:	d1eb      	bne.n	8002910 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002938:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d210      	bcs.n	8002968 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 020f 	bic.w	r2, r3, #15
 800294e:	4921      	ldr	r1, [pc, #132]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e030      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002974:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4915      	ldr	r1, [pc, #84]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	490d      	ldr	r1, [pc, #52]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029a6:	f000 f81d 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 80029aa:	4601      	mov	r1, r0
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80029b8:	5cd3      	ldrb	r3, [r2, r3]
 80029ba:	fa21 f303 	lsr.w	r3, r1, r3
 80029be:	4a08      	ldr	r2, [pc, #32]	; (80029e0 <HAL_RCC_ClockConfig+0x1cc>)
 80029c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7fd fe02 	bl	80005cc <HAL_InitTick>

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023c00 	.word	0x40023c00
 80029d8:	40023800 	.word	0x40023800
 80029dc:	08007364 	.word	0x08007364
 80029e0:	2000000c 	.word	0x2000000c

080029e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	2300      	movs	r3, #0
 80029f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029fa:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d007      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x32>
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d008      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x38>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f040 80b4 	bne.w	8002b78 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a10:	4b5e      	ldr	r3, [pc, #376]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a12:	60bb      	str	r3, [r7, #8]
       break;
 8002a14:	e0b3      	b.n	8002b7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a16:	4b5e      	ldr	r3, [pc, #376]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002a18:	60bb      	str	r3, [r7, #8]
      break;
 8002a1a:	e0b0      	b.n	8002b7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a1c:	4b5a      	ldr	r3, [pc, #360]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a24:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a26:	4b58      	ldr	r3, [pc, #352]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d04a      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a32:	4b55      	ldr	r3, [pc, #340]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	099b      	lsrs	r3, r3, #6
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	ea03 0501 	and.w	r5, r3, r1
 8002a48:	ea04 0602 	and.w	r6, r4, r2
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	4632      	mov	r2, r6
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	f04f 0400 	mov.w	r4, #0
 8002a58:	0154      	lsls	r4, r2, #5
 8002a5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a5e:	014b      	lsls	r3, r1, #5
 8002a60:	4619      	mov	r1, r3
 8002a62:	4622      	mov	r2, r4
 8002a64:	1b49      	subs	r1, r1, r5
 8002a66:	eb62 0206 	sbc.w	r2, r2, r6
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	f04f 0400 	mov.w	r4, #0
 8002a72:	0194      	lsls	r4, r2, #6
 8002a74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a78:	018b      	lsls	r3, r1, #6
 8002a7a:	1a5b      	subs	r3, r3, r1
 8002a7c:	eb64 0402 	sbc.w	r4, r4, r2
 8002a80:	f04f 0100 	mov.w	r1, #0
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	00e2      	lsls	r2, r4, #3
 8002a8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a8e:	00d9      	lsls	r1, r3, #3
 8002a90:	460b      	mov	r3, r1
 8002a92:	4614      	mov	r4, r2
 8002a94:	195b      	adds	r3, r3, r5
 8002a96:	eb44 0406 	adc.w	r4, r4, r6
 8002a9a:	f04f 0100 	mov.w	r1, #0
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	0262      	lsls	r2, r4, #9
 8002aa4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002aa8:	0259      	lsls	r1, r3, #9
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4614      	mov	r4, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f04f 0400 	mov.w	r4, #0
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4623      	mov	r3, r4
 8002abc:	f7fd fbf8 	bl	80002b0 <__aeabi_uldivmod>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	460c      	mov	r4, r1
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	e049      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac8:	4b2f      	ldr	r3, [pc, #188]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	f04f 0400 	mov.w	r4, #0
 8002ad2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	ea03 0501 	and.w	r5, r3, r1
 8002ade:	ea04 0602 	and.w	r6, r4, r2
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	4632      	mov	r2, r6
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	f04f 0400 	mov.w	r4, #0
 8002aee:	0154      	lsls	r4, r2, #5
 8002af0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002af4:	014b      	lsls	r3, r1, #5
 8002af6:	4619      	mov	r1, r3
 8002af8:	4622      	mov	r2, r4
 8002afa:	1b49      	subs	r1, r1, r5
 8002afc:	eb62 0206 	sbc.w	r2, r2, r6
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	f04f 0400 	mov.w	r4, #0
 8002b08:	0194      	lsls	r4, r2, #6
 8002b0a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b0e:	018b      	lsls	r3, r1, #6
 8002b10:	1a5b      	subs	r3, r3, r1
 8002b12:	eb64 0402 	sbc.w	r4, r4, r2
 8002b16:	f04f 0100 	mov.w	r1, #0
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	00e2      	lsls	r2, r4, #3
 8002b20:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b24:	00d9      	lsls	r1, r3, #3
 8002b26:	460b      	mov	r3, r1
 8002b28:	4614      	mov	r4, r2
 8002b2a:	195b      	adds	r3, r3, r5
 8002b2c:	eb44 0406 	adc.w	r4, r4, r6
 8002b30:	f04f 0100 	mov.w	r1, #0
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	02a2      	lsls	r2, r4, #10
 8002b3a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b3e:	0299      	lsls	r1, r3, #10
 8002b40:	460b      	mov	r3, r1
 8002b42:	4614      	mov	r4, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	4621      	mov	r1, r4
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f04f 0400 	mov.w	r4, #0
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4623      	mov	r3, r4
 8002b52:	f7fd fbad 	bl	80002b0 <__aeabi_uldivmod>
 8002b56:	4603      	mov	r3, r0
 8002b58:	460c      	mov	r4, r1
 8002b5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	0c1b      	lsrs	r3, r3, #16
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	3301      	adds	r3, #1
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b74:	60bb      	str	r3, [r7, #8]
      break;
 8002b76:	e002      	b.n	8002b7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b7a:	60bb      	str	r3, [r7, #8]
      break;
 8002b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	00f42400 	.word	0x00f42400
 8002b90:	007a1200 	.word	0x007a1200

08002b94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b98:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	2000000c 	.word	0x2000000c

08002bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bb0:	f7ff fff0 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8002bb4:	4601      	mov	r1, r0
 8002bb6:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	0a9b      	lsrs	r3, r3, #10
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	4a03      	ldr	r2, [pc, #12]	; (8002bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc2:	5cd3      	ldrb	r3, [r2, r3]
 8002bc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	08007374 	.word	0x08007374

08002bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bd8:	f7ff ffdc 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8002bdc:	4601      	mov	r1, r0
 8002bde:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	0b5b      	lsrs	r3, r3, #13
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	4a03      	ldr	r2, [pc, #12]	; (8002bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bea:	5cd3      	ldrb	r3, [r2, r3]
 8002bec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	08007374 	.word	0x08007374

08002bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d012      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c24:	4b69      	ldr	r3, [pc, #420]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a68      	ldr	r2, [pc, #416]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c2e:	6093      	str	r3, [r2, #8]
 8002c30:	4b66      	ldr	r3, [pc, #408]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c38:	4964      	ldr	r1, [pc, #400]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d017      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c56:	4b5d      	ldr	r3, [pc, #372]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c64:	4959      	ldr	r1, [pc, #356]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c74:	d101      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c76:	2301      	movs	r3, #1
 8002c78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d017      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c92:	4b4e      	ldr	r3, [pc, #312]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	494a      	ldr	r1, [pc, #296]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 808b 	beq.w	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ce0:	4b3a      	ldr	r3, [pc, #232]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	4a39      	ldr	r2, [pc, #228]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cea:	6413      	str	r3, [r2, #64]	; 0x40
 8002cec:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cf8:	4b35      	ldr	r3, [pc, #212]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a34      	ldr	r2, [pc, #208]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d04:	f7fd fca6 	bl	8000654 <HAL_GetTick>
 8002d08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0c:	f7fd fca2 	bl	8000654 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e355      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d1e:	4b2c      	ldr	r3, [pc, #176]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d2a:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d035      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d02e      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d48:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d52:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	4a1d      	ldr	r2, [pc, #116]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d5e:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	4a1a      	ldr	r2, [pc, #104]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d6a:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d70:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d114      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fd fc6a 	bl	8000654 <HAL_GetTick>
 8002d80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fd fc66 	bl	8000654 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e317      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0ee      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002db2:	d111      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002dc2:	400b      	ands	r3, r1
 8002dc4:	4901      	ldr	r1, [pc, #4]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
 8002dca:	e00b      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	0ffffcff 	.word	0x0ffffcff
 8002dd8:	4bb0      	ldr	r3, [pc, #704]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4aaf      	ldr	r2, [pc, #700]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002de2:	6093      	str	r3, [r2, #8]
 8002de4:	4bad      	ldr	r3, [pc, #692]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002de6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df0:	49aa      	ldr	r1, [pc, #680]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d010      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e02:	4ba6      	ldr	r3, [pc, #664]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e08:	4aa4      	ldr	r2, [pc, #656]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e12:	4ba2      	ldr	r3, [pc, #648]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	499f      	ldr	r1, [pc, #636]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e30:	4b9a      	ldr	r3, [pc, #616]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e3e:	4997      	ldr	r1, [pc, #604]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e52:	4b92      	ldr	r3, [pc, #584]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e60:	498e      	ldr	r1, [pc, #568]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e74:	4b89      	ldr	r3, [pc, #548]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e82:	4986      	ldr	r1, [pc, #536]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e96:	4b81      	ldr	r3, [pc, #516]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	497d      	ldr	r1, [pc, #500]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eb8:	4b78      	ldr	r3, [pc, #480]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	f023 0203 	bic.w	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	4975      	ldr	r1, [pc, #468]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002eda:	4b70      	ldr	r3, [pc, #448]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	f023 020c 	bic.w	r2, r3, #12
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee8:	496c      	ldr	r1, [pc, #432]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002efc:	4b67      	ldr	r3, [pc, #412]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0a:	4964      	ldr	r1, [pc, #400]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f1e:	4b5f      	ldr	r3, [pc, #380]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2c:	495b      	ldr	r1, [pc, #364]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f40:	4b56      	ldr	r3, [pc, #344]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	4953      	ldr	r1, [pc, #332]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f62:	4b4e      	ldr	r3, [pc, #312]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	494a      	ldr	r1, [pc, #296]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f84:	4b45      	ldr	r3, [pc, #276]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f92:	4942      	ldr	r1, [pc, #264]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002fa6:	4b3d      	ldr	r3, [pc, #244]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb4:	4939      	ldr	r1, [pc, #228]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fc8:	4b34      	ldr	r3, [pc, #208]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd6:	4931      	ldr	r1, [pc, #196]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d011      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fea:	4b2c      	ldr	r3, [pc, #176]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ff8:	4928      	ldr	r1, [pc, #160]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003008:	d101      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800300a:	2301      	movs	r3, #1
 800300c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800301a:	2301      	movs	r3, #1
 800301c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800302a:	4b1c      	ldr	r3, [pc, #112]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003038:	4918      	ldr	r1, [pc, #96]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00b      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800304c:	4b13      	ldr	r3, [pc, #76]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800305c:	490f      	ldr	r1, [pc, #60]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d005      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003072:	f040 80d8 	bne.w	8003226 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003076:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a08      	ldr	r2, [pc, #32]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800307c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003082:	f7fd fae7 	bl	8000654 <HAL_GetTick>
 8003086:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003088:	e00a      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800308a:	f7fd fae3 	bl	8000654 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b64      	cmp	r3, #100	; 0x64
 8003096:	d903      	bls.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e196      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800309c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030a0:	4b6c      	ldr	r3, [pc, #432]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1ee      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d021      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x500>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d11d      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030c0:	4b64      	ldr	r3, [pc, #400]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c6:	0c1b      	lsrs	r3, r3, #16
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030ce:	4b61      	ldr	r3, [pc, #388]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d4:	0e1b      	lsrs	r3, r3, #24
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	019a      	lsls	r2, r3, #6
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	041b      	lsls	r3, r3, #16
 80030e6:	431a      	orrs	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	061b      	lsls	r3, r3, #24
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	071b      	lsls	r3, r3, #28
 80030f4:	4957      	ldr	r1, [pc, #348]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d004      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003110:	d00a      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800311a:	2b00      	cmp	r3, #0
 800311c:	d02e      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003126:	d129      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003128:	4b4a      	ldr	r3, [pc, #296]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800312a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800312e:	0c1b      	lsrs	r3, r3, #16
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003136:	4b47      	ldr	r3, [pc, #284]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800313c:	0f1b      	lsrs	r3, r3, #28
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	019a      	lsls	r2, r3, #6
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	041b      	lsls	r3, r3, #16
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	061b      	lsls	r3, r3, #24
 8003156:	431a      	orrs	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	071b      	lsls	r3, r3, #28
 800315c:	493d      	ldr	r1, [pc, #244]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003164:	4b3b      	ldr	r3, [pc, #236]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800316a:	f023 021f 	bic.w	r2, r3, #31
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	3b01      	subs	r3, #1
 8003174:	4937      	ldr	r1, [pc, #220]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01d      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003188:	4b32      	ldr	r3, [pc, #200]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800318a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318e:	0e1b      	lsrs	r3, r3, #24
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003196:	4b2f      	ldr	r3, [pc, #188]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319c:	0f1b      	lsrs	r3, r3, #28
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	019a      	lsls	r2, r3, #6
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	431a      	orrs	r2, r3
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	061b      	lsls	r3, r3, #24
 80031b6:	431a      	orrs	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	071b      	lsls	r3, r3, #28
 80031bc:	4925      	ldr	r1, [pc, #148]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d011      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	019a      	lsls	r2, r3, #6
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	041b      	lsls	r3, r3, #16
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	061b      	lsls	r3, r3, #24
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	071b      	lsls	r3, r3, #28
 80031ec:	4919      	ldr	r1, [pc, #100]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031f4:	4b17      	ldr	r3, [pc, #92]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a16      	ldr	r2, [pc, #88]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80031fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003200:	f7fd fa28 	bl	8000654 <HAL_GetTick>
 8003204:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003208:	f7fd fa24 	bl	8000654 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e0d7      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800321a:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	2b01      	cmp	r3, #1
 800322a:	f040 80cd 	bne.w	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a08      	ldr	r2, [pc, #32]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800323a:	f7fd fa0b 	bl	8000654 <HAL_GetTick>
 800323e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003240:	e00a      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003242:	f7fd fa07 	bl	8000654 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b64      	cmp	r3, #100	; 0x64
 800324e:	d903      	bls.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e0ba      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003254:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003258:	4b5e      	ldr	r3, [pc, #376]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003264:	d0ed      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003276:	2b00      	cmp	r3, #0
 8003278:	d009      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003282:	2b00      	cmp	r3, #0
 8003284:	d02e      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d12a      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800328e:	4b51      	ldr	r3, [pc, #324]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800329c:	4b4d      	ldr	r3, [pc, #308]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a2:	0f1b      	lsrs	r3, r3, #28
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	019a      	lsls	r2, r3, #6
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	041b      	lsls	r3, r3, #16
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	061b      	lsls	r3, r3, #24
 80032bc:	431a      	orrs	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	071b      	lsls	r3, r3, #28
 80032c2:	4944      	ldr	r1, [pc, #272]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032ca:	4b42      	ldr	r3, [pc, #264]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80032cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	3b01      	subs	r3, #1
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	493d      	ldr	r1, [pc, #244]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d022      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f8:	d11d      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032fa:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003300:	0e1b      	lsrs	r3, r3, #24
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003308:	4b32      	ldr	r3, [pc, #200]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330e:	0f1b      	lsrs	r3, r3, #28
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	019a      	lsls	r2, r3, #6
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	041b      	lsls	r3, r3, #16
 8003322:	431a      	orrs	r2, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	061b      	lsls	r3, r3, #24
 8003328:	431a      	orrs	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	071b      	lsls	r3, r3, #28
 800332e:	4929      	ldr	r1, [pc, #164]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d028      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003342:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003348:	0e1b      	lsrs	r3, r3, #24
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	0c1b      	lsrs	r3, r3, #16
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	019a      	lsls	r2, r3, #6
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	041b      	lsls	r3, r3, #16
 8003368:	431a      	orrs	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	061b      	lsls	r3, r3, #24
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	071b      	lsls	r3, r3, #28
 8003376:	4917      	ldr	r1, [pc, #92]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003384:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	4911      	ldr	r1, [pc, #68]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003394:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0e      	ldr	r2, [pc, #56]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800339a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a0:	f7fd f958 	bl	8000654 <HAL_GetTick>
 80033a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033a8:	f7fd f954 	bl	8000654 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	; 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e007      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033c6:	d1ef      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3720      	adds	r7, #32
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800

080033d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e01d      	b.n	8003426 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f003 f8b6 	bl	8006570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3304      	adds	r3, #4
 8003414:	4619      	mov	r1, r3
 8003416:	4610      	mov	r0, r2
 8003418:	f000 fa4a 	bl	80038b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e01d      	b.n	800347c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d106      	bne.n	800345a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f003 f8ab 	bl	80065b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2202      	movs	r2, #2
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3304      	adds	r3, #4
 800346a:	4619      	mov	r1, r3
 800346c:	4610      	mov	r0, r2
 800346e:	f000 fa1f 	bl	80038b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2201      	movs	r2, #1
 8003494:	6839      	ldr	r1, [r7, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fda2 	bl	8003fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a17      	ldr	r2, [pc, #92]	; (8003500 <HAL_TIM_PWM_Start+0x7c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_TIM_PWM_Start+0x2c>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a16      	ldr	r2, [pc, #88]	; (8003504 <HAL_TIM_PWM_Start+0x80>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d101      	bne.n	80034b4 <HAL_TIM_PWM_Start+0x30>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_TIM_PWM_Start+0x32>
 80034b4:	2300      	movs	r3, #0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <HAL_TIM_PWM_Start+0x84>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b06      	cmp	r3, #6
 80034da:	d00b      	beq.n	80034f4 <HAL_TIM_PWM_Start+0x70>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e2:	d007      	beq.n	80034f4 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40010000 	.word	0x40010000
 8003504:	40010400 	.word	0x40010400
 8003508:	00010007 	.word	0x00010007

0800350c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003522:	2302      	movs	r3, #2
 8003524:	e105      	b.n	8003732 <HAL_TIM_PWM_ConfigChannel+0x226>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2202      	movs	r2, #2
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b14      	cmp	r3, #20
 800353a:	f200 80f0 	bhi.w	800371e <HAL_TIM_PWM_ConfigChannel+0x212>
 800353e:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003544:	08003599 	.word	0x08003599
 8003548:	0800371f 	.word	0x0800371f
 800354c:	0800371f 	.word	0x0800371f
 8003550:	0800371f 	.word	0x0800371f
 8003554:	080035d9 	.word	0x080035d9
 8003558:	0800371f 	.word	0x0800371f
 800355c:	0800371f 	.word	0x0800371f
 8003560:	0800371f 	.word	0x0800371f
 8003564:	0800361b 	.word	0x0800361b
 8003568:	0800371f 	.word	0x0800371f
 800356c:	0800371f 	.word	0x0800371f
 8003570:	0800371f 	.word	0x0800371f
 8003574:	0800365b 	.word	0x0800365b
 8003578:	0800371f 	.word	0x0800371f
 800357c:	0800371f 	.word	0x0800371f
 8003580:	0800371f 	.word	0x0800371f
 8003584:	0800369d 	.word	0x0800369d
 8003588:	0800371f 	.word	0x0800371f
 800358c:	0800371f 	.word	0x0800371f
 8003590:	0800371f 	.word	0x0800371f
 8003594:	080036dd 	.word	0x080036dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fa26 	bl	80039f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0208 	orr.w	r2, r2, #8
 80035b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0204 	bic.w	r2, r2, #4
 80035c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6999      	ldr	r1, [r3, #24]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	619a      	str	r2, [r3, #24]
      break;
 80035d6:	e0a3      	b.n	8003720 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fa78 	bl	8003ad4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6999      	ldr	r1, [r3, #24]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	021a      	lsls	r2, r3, #8
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	619a      	str	r2, [r3, #24]
      break;
 8003618:	e082      	b.n	8003720 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 facf 	bl	8003bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0208 	orr.w	r2, r2, #8
 8003634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0204 	bic.w	r2, r2, #4
 8003644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69d9      	ldr	r1, [r3, #28]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	61da      	str	r2, [r3, #28]
      break;
 8003658:	e062      	b.n	8003720 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68b9      	ldr	r1, [r7, #8]
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fb25 	bl	8003cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69da      	ldr	r2, [r3, #28]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69d9      	ldr	r1, [r3, #28]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	021a      	lsls	r2, r3, #8
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	61da      	str	r2, [r3, #28]
      break;
 800369a:	e041      	b.n	8003720 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fb5c 	bl	8003d60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0208 	orr.w	r2, r2, #8
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0204 	bic.w	r2, r2, #4
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036da:	e021      	b.n	8003720 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fb8e 	bl	8003e04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003706:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	021a      	lsls	r2, r3, #8
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800371c:	e000      	b.n	8003720 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800371e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop

0800373c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_TIM_ConfigClockSource+0x18>
 8003750:	2302      	movs	r3, #2
 8003752:	e0a6      	b.n	80038a2 <HAL_TIM_ConfigClockSource+0x166>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4b4f      	ldr	r3, [pc, #316]	; (80038ac <HAL_TIM_ConfigClockSource+0x170>)
 8003770:	4013      	ands	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800377a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b40      	cmp	r3, #64	; 0x40
 800378a:	d067      	beq.n	800385c <HAL_TIM_ConfigClockSource+0x120>
 800378c:	2b40      	cmp	r3, #64	; 0x40
 800378e:	d80b      	bhi.n	80037a8 <HAL_TIM_ConfigClockSource+0x6c>
 8003790:	2b10      	cmp	r3, #16
 8003792:	d073      	beq.n	800387c <HAL_TIM_ConfigClockSource+0x140>
 8003794:	2b10      	cmp	r3, #16
 8003796:	d802      	bhi.n	800379e <HAL_TIM_ConfigClockSource+0x62>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d06f      	beq.n	800387c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800379c:	e078      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d06c      	beq.n	800387c <HAL_TIM_ConfigClockSource+0x140>
 80037a2:	2b30      	cmp	r3, #48	; 0x30
 80037a4:	d06a      	beq.n	800387c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80037a6:	e073      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037a8:	2b70      	cmp	r3, #112	; 0x70
 80037aa:	d00d      	beq.n	80037c8 <HAL_TIM_ConfigClockSource+0x8c>
 80037ac:	2b70      	cmp	r3, #112	; 0x70
 80037ae:	d804      	bhi.n	80037ba <HAL_TIM_ConfigClockSource+0x7e>
 80037b0:	2b50      	cmp	r3, #80	; 0x50
 80037b2:	d033      	beq.n	800381c <HAL_TIM_ConfigClockSource+0xe0>
 80037b4:	2b60      	cmp	r3, #96	; 0x60
 80037b6:	d041      	beq.n	800383c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80037b8:	e06a      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80037ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037be:	d066      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x152>
 80037c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c4:	d017      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80037c6:	e063      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	6899      	ldr	r1, [r3, #8]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f000 fbe2 	bl	8003fa0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	609a      	str	r2, [r3, #8]
      break;
 80037f4:	e04c      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6899      	ldr	r1, [r3, #8]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f000 fbcb 	bl	8003fa0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003818:	609a      	str	r2, [r3, #8]
      break;
 800381a:	e039      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	461a      	mov	r2, r3
 800382a:	f000 fb3f 	bl	8003eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2150      	movs	r1, #80	; 0x50
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fb98 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 800383a:	e029      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	461a      	mov	r2, r3
 800384a:	f000 fb5e 	bl	8003f0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2160      	movs	r1, #96	; 0x60
 8003854:	4618      	mov	r0, r3
 8003856:	f000 fb88 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 800385a:	e019      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	461a      	mov	r2, r3
 800386a:	f000 fb1f 	bl	8003eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2140      	movs	r1, #64	; 0x40
 8003874:	4618      	mov	r0, r3
 8003876:	f000 fb78 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 800387a:	e009      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f000 fb6f 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 800388c:	e000      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800388e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	fffeff88 	.word	0xfffeff88

080038b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a40      	ldr	r2, [pc, #256]	; (80039c4 <TIM_Base_SetConfig+0x114>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d013      	beq.n	80038f0 <TIM_Base_SetConfig+0x40>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ce:	d00f      	beq.n	80038f0 <TIM_Base_SetConfig+0x40>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a3d      	ldr	r2, [pc, #244]	; (80039c8 <TIM_Base_SetConfig+0x118>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00b      	beq.n	80038f0 <TIM_Base_SetConfig+0x40>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a3c      	ldr	r2, [pc, #240]	; (80039cc <TIM_Base_SetConfig+0x11c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d007      	beq.n	80038f0 <TIM_Base_SetConfig+0x40>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a3b      	ldr	r2, [pc, #236]	; (80039d0 <TIM_Base_SetConfig+0x120>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d003      	beq.n	80038f0 <TIM_Base_SetConfig+0x40>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a3a      	ldr	r2, [pc, #232]	; (80039d4 <TIM_Base_SetConfig+0x124>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d108      	bne.n	8003902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a2f      	ldr	r2, [pc, #188]	; (80039c4 <TIM_Base_SetConfig+0x114>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d02b      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003910:	d027      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a2c      	ldr	r2, [pc, #176]	; (80039c8 <TIM_Base_SetConfig+0x118>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d023      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2b      	ldr	r2, [pc, #172]	; (80039cc <TIM_Base_SetConfig+0x11c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d01f      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <TIM_Base_SetConfig+0x120>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d01b      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a29      	ldr	r2, [pc, #164]	; (80039d4 <TIM_Base_SetConfig+0x124>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d017      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a28      	ldr	r2, [pc, #160]	; (80039d8 <TIM_Base_SetConfig+0x128>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a27      	ldr	r2, [pc, #156]	; (80039dc <TIM_Base_SetConfig+0x12c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00f      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a26      	ldr	r2, [pc, #152]	; (80039e0 <TIM_Base_SetConfig+0x130>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00b      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a25      	ldr	r2, [pc, #148]	; (80039e4 <TIM_Base_SetConfig+0x134>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d007      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a24      	ldr	r2, [pc, #144]	; (80039e8 <TIM_Base_SetConfig+0x138>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d003      	beq.n	8003962 <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a23      	ldr	r2, [pc, #140]	; (80039ec <TIM_Base_SetConfig+0x13c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d108      	bne.n	8003974 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <TIM_Base_SetConfig+0x114>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_Base_SetConfig+0xf8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a0c      	ldr	r2, [pc, #48]	; (80039d4 <TIM_Base_SetConfig+0x124>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d103      	bne.n	80039b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	615a      	str	r2, [r3, #20]
}
 80039b6:	bf00      	nop
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40010000 	.word	0x40010000
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40000c00 	.word	0x40000c00
 80039d4:	40010400 	.word	0x40010400
 80039d8:	40014000 	.word	0x40014000
 80039dc:	40014400 	.word	0x40014400
 80039e0:	40014800 	.word	0x40014800
 80039e4:	40001800 	.word	0x40001800
 80039e8:	40001c00 	.word	0x40001c00
 80039ec:	40002000 	.word	0x40002000

080039f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f023 0201 	bic.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4b2b      	ldr	r3, [pc, #172]	; (8003ac8 <TIM_OC1_SetConfig+0xd8>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0303 	bic.w	r3, r3, #3
 8003a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f023 0302 	bic.w	r3, r3, #2
 8003a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a21      	ldr	r2, [pc, #132]	; (8003acc <TIM_OC1_SetConfig+0xdc>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d003      	beq.n	8003a54 <TIM_OC1_SetConfig+0x64>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a20      	ldr	r2, [pc, #128]	; (8003ad0 <TIM_OC1_SetConfig+0xe0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d10c      	bne.n	8003a6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f023 0308 	bic.w	r3, r3, #8
 8003a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f023 0304 	bic.w	r3, r3, #4
 8003a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a16      	ldr	r2, [pc, #88]	; (8003acc <TIM_OC1_SetConfig+0xdc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d003      	beq.n	8003a7e <TIM_OC1_SetConfig+0x8e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a15      	ldr	r2, [pc, #84]	; (8003ad0 <TIM_OC1_SetConfig+0xe0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d111      	bne.n	8003aa2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	621a      	str	r2, [r3, #32]
}
 8003abc:	bf00      	nop
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	fffeff8f 	.word	0xfffeff8f
 8003acc:	40010000 	.word	0x40010000
 8003ad0:	40010400 	.word	0x40010400

08003ad4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f023 0210 	bic.w	r2, r3, #16
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4b2e      	ldr	r3, [pc, #184]	; (8003bb8 <TIM_OC2_SetConfig+0xe4>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f023 0320 	bic.w	r3, r3, #32
 8003b1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a23      	ldr	r2, [pc, #140]	; (8003bbc <TIM_OC2_SetConfig+0xe8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d003      	beq.n	8003b3c <TIM_OC2_SetConfig+0x68>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a22      	ldr	r2, [pc, #136]	; (8003bc0 <TIM_OC2_SetConfig+0xec>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d10d      	bne.n	8003b58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a18      	ldr	r2, [pc, #96]	; (8003bbc <TIM_OC2_SetConfig+0xe8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <TIM_OC2_SetConfig+0x94>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a17      	ldr	r2, [pc, #92]	; (8003bc0 <TIM_OC2_SetConfig+0xec>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d113      	bne.n	8003b90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	621a      	str	r2, [r3, #32]
}
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	feff8fff 	.word	0xfeff8fff
 8003bbc:	40010000 	.word	0x40010000
 8003bc0:	40010400 	.word	0x40010400

08003bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <TIM_OC3_SetConfig+0xe0>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0303 	bic.w	r3, r3, #3
 8003bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a22      	ldr	r2, [pc, #136]	; (8003ca8 <TIM_OC3_SetConfig+0xe4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d003      	beq.n	8003c2a <TIM_OC3_SetConfig+0x66>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a21      	ldr	r2, [pc, #132]	; (8003cac <TIM_OC3_SetConfig+0xe8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d10d      	bne.n	8003c46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a17      	ldr	r2, [pc, #92]	; (8003ca8 <TIM_OC3_SetConfig+0xe4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <TIM_OC3_SetConfig+0x92>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a16      	ldr	r2, [pc, #88]	; (8003cac <TIM_OC3_SetConfig+0xe8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d113      	bne.n	8003c7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	621a      	str	r2, [r3, #32]
}
 8003c98:	bf00      	nop
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	fffeff8f 	.word	0xfffeff8f
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	40010400 	.word	0x40010400

08003cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <TIM_OC4_SetConfig+0xa4>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	021b      	lsls	r3, r3, #8
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	031b      	lsls	r3, r3, #12
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a13      	ldr	r2, [pc, #76]	; (8003d58 <TIM_OC4_SetConfig+0xa8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_OC4_SetConfig+0x68>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a12      	ldr	r2, [pc, #72]	; (8003d5c <TIM_OC4_SetConfig+0xac>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d109      	bne.n	8003d2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	019b      	lsls	r3, r3, #6
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	feff8fff 	.word	0xfeff8fff
 8003d58:	40010000 	.word	0x40010000
 8003d5c:	40010400 	.word	0x40010400

08003d60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <TIM_OC5_SetConfig+0x98>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003da0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <TIM_OC5_SetConfig+0x9c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d003      	beq.n	8003dbe <TIM_OC5_SetConfig+0x5e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a11      	ldr	r2, [pc, #68]	; (8003e00 <TIM_OC5_SetConfig+0xa0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d109      	bne.n	8003dd2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	621a      	str	r2, [r3, #32]
}
 8003dec:	bf00      	nop
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	fffeff8f 	.word	0xfffeff8f
 8003dfc:	40010000 	.word	0x40010000
 8003e00:	40010400 	.word	0x40010400

08003e04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ea0 <TIM_OC6_SetConfig+0x9c>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	051b      	lsls	r3, r3, #20
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a13      	ldr	r2, [pc, #76]	; (8003ea4 <TIM_OC6_SetConfig+0xa0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d003      	beq.n	8003e64 <TIM_OC6_SetConfig+0x60>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a12      	ldr	r2, [pc, #72]	; (8003ea8 <TIM_OC6_SetConfig+0xa4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d109      	bne.n	8003e78 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	029b      	lsls	r3, r3, #10
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	621a      	str	r2, [r3, #32]
}
 8003e92:	bf00      	nop
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	feff8fff 	.word	0xfeff8fff
 8003ea4:	40010000 	.word	0x40010000
 8003ea8:	40010400 	.word	0x40010400

08003eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	f023 0201 	bic.w	r2, r3, #1
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f023 030a 	bic.w	r3, r3, #10
 8003ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	621a      	str	r2, [r3, #32]
}
 8003efe:	bf00      	nop
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b087      	sub	sp, #28
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f023 0210 	bic.w	r2, r3, #16
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	031b      	lsls	r3, r3, #12
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	621a      	str	r2, [r3, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f043 0307 	orr.w	r3, r3, #7
 8003f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	609a      	str	r2, [r3, #8]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	021a      	lsls	r2, r3, #8
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	609a      	str	r2, [r3, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a1a      	ldr	r2, [r3, #32]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	43db      	mvns	r3, r3
 8004002:	401a      	ands	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a1a      	ldr	r2, [r3, #32]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 031f 	and.w	r3, r3, #31
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	fa01 f303 	lsl.w	r3, r1, r3
 8004018:	431a      	orrs	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	621a      	str	r2, [r3, #32]
}
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
	...

0800402c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004040:	2302      	movs	r3, #2
 8004042:	e045      	b.n	80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d004      	beq.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1b      	ldr	r2, [pc, #108]	; (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d108      	bne.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800407e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004090:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	40010000 	.word	0x40010000
 80040e0:	40010400 	.word	0x40010400

080040e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e065      	b.n	80041cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4313      	orrs	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	041b      	lsls	r3, r3, #16
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a16      	ldr	r2, [pc, #88]	; (80041d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d004      	beq.n	800418e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a14      	ldr	r2, [pc, #80]	; (80041dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d115      	bne.n	80041ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	051b      	lsls	r3, r3, #20
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	40010000 	.word	0x40010000
 80041dc:	40010400 	.word	0x40010400

080041e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e040      	b.n	8004274 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f002 faa0 	bl	8006748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2224      	movs	r2, #36	; 0x24
 800420c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0201 	bic.w	r2, r2, #1
 800421c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 faec 	bl	80047fc <UART_SetConfig>
 8004224:	4603      	mov	r3, r0
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e022      	b.n	8004274 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fd84 	bl	8004d44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800424a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800425a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fe0b 	bl	8004e88 <UART_CheckIdleState>
 8004272:	4603      	mov	r3, r0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08a      	sub	sp, #40	; 0x28
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	4613      	mov	r3, r2
 800428a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004290:	2b20      	cmp	r3, #32
 8004292:	d17f      	bne.n	8004394 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_UART_Transmit+0x24>
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e078      	b.n	8004396 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Transmit+0x36>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e071      	b.n	8004396 <HAL_UART_Transmit+0x11a>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2221      	movs	r2, #33	; 0x21
 80042c4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80042c6:	f7fc f9c5 	bl	8000654 <HAL_GetTick>
 80042ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	88fa      	ldrh	r2, [r7, #6]
 80042d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	88fa      	ldrh	r2, [r7, #6]
 80042d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e4:	d108      	bne.n	80042f8 <HAL_UART_Transmit+0x7c>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d104      	bne.n	80042f8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	61bb      	str	r3, [r7, #24]
 80042f6:	e003      	b.n	8004300 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004300:	e02c      	b.n	800435c <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2200      	movs	r2, #0
 800430a:	2180      	movs	r1, #128	; 0x80
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 fdea 	bl	8004ee6 <UART_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e03c      	b.n	8004396 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10b      	bne.n	800433a <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004330:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	3302      	adds	r3, #2
 8004336:	61bb      	str	r3, [r7, #24]
 8004338:	e007      	b.n	800434a <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	781a      	ldrb	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	3301      	adds	r3, #1
 8004348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1cc      	bne.n	8004302 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2200      	movs	r2, #0
 8004370:	2140      	movs	r1, #64	; 0x40
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fdb7 	bl	8004ee6 <UART_WaitOnFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e009      	b.n	8004396 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	e000      	b.n	8004396 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004394:	2302      	movs	r3, #2
  }
}
 8004396:	4618      	mov	r0, r3
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	4613      	mov	r3, r2
 80043ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d144      	bne.n	8004440 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <HAL_UART_Transmit_IT+0x22>
 80043bc:	88fb      	ldrh	r3, [r7, #6]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e03d      	b.n	8004442 <HAL_UART_Transmit_IT+0xa2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_UART_Transmit_IT+0x34>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e036      	b.n	8004442 <HAL_UART_Transmit_IT+0xa2>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	88fa      	ldrh	r2, [r7, #6]
 80043e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	88fa      	ldrh	r2, [r7, #6]
 80043ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2221      	movs	r2, #33	; 0x21
 8004402:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440c:	d107      	bne.n	800441e <HAL_UART_Transmit_IT+0x7e>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d103      	bne.n	800441e <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4a0d      	ldr	r2, [pc, #52]	; (8004450 <HAL_UART_Transmit_IT+0xb0>)
 800441a:	665a      	str	r2, [r3, #100]	; 0x64
 800441c:	e002      	b.n	8004424 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4a0c      	ldr	r2, [pc, #48]	; (8004454 <HAL_UART_Transmit_IT+0xb4>)
 8004422:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800443a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	e000      	b.n	8004442 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8004440:	2302      	movs	r3, #2
  }
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	08005055 	.word	0x08005055
 8004454:	08004fe3 	.word	0x08004fe3

08004458 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	4613      	mov	r3, r2
 8004464:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800446a:	2b20      	cmp	r3, #32
 800446c:	f040 808a 	bne.w	8004584 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <HAL_UART_Receive_IT+0x24>
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e082      	b.n	8004586 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_UART_Receive_IT+0x36>
 800448a:	2302      	movs	r3, #2
 800448c:	e07b      	b.n	8004586 <HAL_UART_Receive_IT+0x12e>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	88fa      	ldrh	r2, [r7, #6]
 80044a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	88fa      	ldrh	r2, [r7, #6]
 80044a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ba:	d10e      	bne.n	80044da <HAL_UART_Receive_IT+0x82>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d105      	bne.n	80044d0 <HAL_UART_Receive_IT+0x78>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80044ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044ce:	e02d      	b.n	800452c <HAL_UART_Receive_IT+0xd4>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	22ff      	movs	r2, #255	; 0xff
 80044d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044d8:	e028      	b.n	800452c <HAL_UART_Receive_IT+0xd4>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10d      	bne.n	80044fe <HAL_UART_Receive_IT+0xa6>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d104      	bne.n	80044f4 <HAL_UART_Receive_IT+0x9c>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	22ff      	movs	r2, #255	; 0xff
 80044ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044f2:	e01b      	b.n	800452c <HAL_UART_Receive_IT+0xd4>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	227f      	movs	r2, #127	; 0x7f
 80044f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044fc:	e016      	b.n	800452c <HAL_UART_Receive_IT+0xd4>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004506:	d10d      	bne.n	8004524 <HAL_UART_Receive_IT+0xcc>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d104      	bne.n	800451a <HAL_UART_Receive_IT+0xc2>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	227f      	movs	r2, #127	; 0x7f
 8004514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004518:	e008      	b.n	800452c <HAL_UART_Receive_IT+0xd4>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	223f      	movs	r2, #63	; 0x3f
 800451e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004522:	e003      	b.n	800452c <HAL_UART_Receive_IT+0xd4>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2222      	movs	r2, #34	; 0x22
 8004536:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004550:	d107      	bne.n	8004562 <HAL_UART_Receive_IT+0x10a>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4a0d      	ldr	r2, [pc, #52]	; (8004594 <HAL_UART_Receive_IT+0x13c>)
 800455e:	661a      	str	r2, [r3, #96]	; 0x60
 8004560:	e002      	b.n	8004568 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4a0c      	ldr	r2, [pc, #48]	; (8004598 <HAL_UART_Receive_IT+0x140>)
 8004566:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800457e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	e000      	b.n	8004586 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004584:	2302      	movs	r3, #2
  }
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	080051a9 	.word	0x080051a9
 8004598:	08005103 	.word	0x08005103

0800459c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d113      	bne.n	80045f2 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00e      	beq.n	80045f2 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80eb 	beq.w	80047be <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	4798      	blx	r3
      }
      return;
 80045f0:	e0e5      	b.n	80047be <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80c0 	beq.w	800477a <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80b5 	beq.w	800477a <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00e      	beq.n	8004638 <HAL_UART_IRQHandler+0x9c>
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d009      	beq.n	8004638 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2201      	movs	r2, #1
 800462a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004630:	f043 0201 	orr.w	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00e      	beq.n	8004660 <HAL_UART_IRQHandler+0xc4>
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d009      	beq.n	8004660 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2202      	movs	r2, #2
 8004652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004658:	f043 0204 	orr.w	r2, r3, #4
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00e      	beq.n	8004688 <HAL_UART_IRQHandler+0xec>
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2204      	movs	r2, #4
 800467a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004680:	f043 0202 	orr.w	r2, r3, #2
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	d013      	beq.n	80046ba <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d104      	bne.n	80046a6 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2208      	movs	r2, #8
 80046ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046b2:	f043 0208 	orr.w	r2, r3, #8
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d07f      	beq.n	80047c2 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00c      	beq.n	80046e6 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d007      	beq.n	80046e6 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ea:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f6:	2b40      	cmp	r3, #64	; 0x40
 80046f8:	d004      	beq.n	8004704 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004700:	2b00      	cmp	r3, #0
 8004702:	d031      	beq.n	8004768 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fc36 	bl	8004f76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004714:	2b40      	cmp	r3, #64	; 0x40
 8004716:	d123      	bne.n	8004760 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004726:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d013      	beq.n	8004758 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004734:	4a26      	ldr	r2, [pc, #152]	; (80047d0 <HAL_UART_IRQHandler+0x234>)
 8004736:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473c:	4618      	mov	r0, r3
 800473e:	f7fc f8c8 	bl	80008d2 <HAL_DMA_Abort_IT>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d016      	beq.n	8004776 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800474c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004752:	4610      	mov	r0, r2
 8004754:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004756:	e00e      	b.n	8004776 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f845 	bl	80047e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475e:	e00a      	b.n	8004776 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f841 	bl	80047e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004766:	e006      	b.n	8004776 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f83d 	bl	80047e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004774:	e025      	b.n	80047c2 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004776:	bf00      	nop
    return;
 8004778:	e023      	b.n	80047c2 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00d      	beq.n	80047a0 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478a:	2b00      	cmp	r3, #0
 800478c:	d008      	beq.n	80047a0 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004792:	2b00      	cmp	r3, #0
 8004794:	d017      	beq.n	80047c6 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	4798      	blx	r3
    }
    return;
 800479e:	e012      	b.n	80047c6 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00e      	beq.n	80047c8 <HAL_UART_IRQHandler+0x22c>
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 fc8b 	bl	80050d0 <UART_EndTransmit_IT>
    return;
 80047ba:	bf00      	nop
 80047bc:	e004      	b.n	80047c8 <HAL_UART_IRQHandler+0x22c>
      return;
 80047be:	bf00      	nop
 80047c0:	e002      	b.n	80047c8 <HAL_UART_IRQHandler+0x22c>
    return;
 80047c2:	bf00      	nop
 80047c4:	e000      	b.n	80047c8 <HAL_UART_IRQHandler+0x22c>
    return;
 80047c6:	bf00      	nop
  }

}
 80047c8:	3720      	adds	r7, #32
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	08004fb7 	.word	0x08004fb7

080047d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004804:	2300      	movs	r3, #0
 8004806:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4bb1      	ldr	r3, [pc, #708]	; (8004af0 <UART_SetConfig+0x2f4>)
 800482c:	4013      	ands	r3, r2
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	6939      	ldr	r1, [r7, #16]
 8004834:	430b      	orrs	r3, r1
 8004836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	430a      	orrs	r2, r1
 8004870:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a9f      	ldr	r2, [pc, #636]	; (8004af4 <UART_SetConfig+0x2f8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d121      	bne.n	80048c0 <UART_SetConfig+0xc4>
 800487c:	4b9e      	ldr	r3, [pc, #632]	; (8004af8 <UART_SetConfig+0x2fc>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b03      	cmp	r3, #3
 8004888:	d816      	bhi.n	80048b8 <UART_SetConfig+0xbc>
 800488a:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <UART_SetConfig+0x94>)
 800488c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004890:	080048a1 	.word	0x080048a1
 8004894:	080048ad 	.word	0x080048ad
 8004898:	080048a7 	.word	0x080048a7
 800489c:	080048b3 	.word	0x080048b3
 80048a0:	2301      	movs	r3, #1
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e151      	b.n	8004b4a <UART_SetConfig+0x34e>
 80048a6:	2302      	movs	r3, #2
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e14e      	b.n	8004b4a <UART_SetConfig+0x34e>
 80048ac:	2304      	movs	r3, #4
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e14b      	b.n	8004b4a <UART_SetConfig+0x34e>
 80048b2:	2308      	movs	r3, #8
 80048b4:	77fb      	strb	r3, [r7, #31]
 80048b6:	e148      	b.n	8004b4a <UART_SetConfig+0x34e>
 80048b8:	2310      	movs	r3, #16
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	bf00      	nop
 80048be:	e144      	b.n	8004b4a <UART_SetConfig+0x34e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a8d      	ldr	r2, [pc, #564]	; (8004afc <UART_SetConfig+0x300>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d134      	bne.n	8004934 <UART_SetConfig+0x138>
 80048ca:	4b8b      	ldr	r3, [pc, #556]	; (8004af8 <UART_SetConfig+0x2fc>)
 80048cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d0:	f003 030c 	and.w	r3, r3, #12
 80048d4:	2b0c      	cmp	r3, #12
 80048d6:	d829      	bhi.n	800492c <UART_SetConfig+0x130>
 80048d8:	a201      	add	r2, pc, #4	; (adr r2, 80048e0 <UART_SetConfig+0xe4>)
 80048da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048de:	bf00      	nop
 80048e0:	08004915 	.word	0x08004915
 80048e4:	0800492d 	.word	0x0800492d
 80048e8:	0800492d 	.word	0x0800492d
 80048ec:	0800492d 	.word	0x0800492d
 80048f0:	08004921 	.word	0x08004921
 80048f4:	0800492d 	.word	0x0800492d
 80048f8:	0800492d 	.word	0x0800492d
 80048fc:	0800492d 	.word	0x0800492d
 8004900:	0800491b 	.word	0x0800491b
 8004904:	0800492d 	.word	0x0800492d
 8004908:	0800492d 	.word	0x0800492d
 800490c:	0800492d 	.word	0x0800492d
 8004910:	08004927 	.word	0x08004927
 8004914:	2300      	movs	r3, #0
 8004916:	77fb      	strb	r3, [r7, #31]
 8004918:	e117      	b.n	8004b4a <UART_SetConfig+0x34e>
 800491a:	2302      	movs	r3, #2
 800491c:	77fb      	strb	r3, [r7, #31]
 800491e:	e114      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004920:	2304      	movs	r3, #4
 8004922:	77fb      	strb	r3, [r7, #31]
 8004924:	e111      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004926:	2308      	movs	r3, #8
 8004928:	77fb      	strb	r3, [r7, #31]
 800492a:	e10e      	b.n	8004b4a <UART_SetConfig+0x34e>
 800492c:	2310      	movs	r3, #16
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	bf00      	nop
 8004932:	e10a      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a71      	ldr	r2, [pc, #452]	; (8004b00 <UART_SetConfig+0x304>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d120      	bne.n	8004980 <UART_SetConfig+0x184>
 800493e:	4b6e      	ldr	r3, [pc, #440]	; (8004af8 <UART_SetConfig+0x2fc>)
 8004940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004944:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004948:	2b10      	cmp	r3, #16
 800494a:	d00f      	beq.n	800496c <UART_SetConfig+0x170>
 800494c:	2b10      	cmp	r3, #16
 800494e:	d802      	bhi.n	8004956 <UART_SetConfig+0x15a>
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <UART_SetConfig+0x164>
 8004954:	e010      	b.n	8004978 <UART_SetConfig+0x17c>
 8004956:	2b20      	cmp	r3, #32
 8004958:	d005      	beq.n	8004966 <UART_SetConfig+0x16a>
 800495a:	2b30      	cmp	r3, #48	; 0x30
 800495c:	d009      	beq.n	8004972 <UART_SetConfig+0x176>
 800495e:	e00b      	b.n	8004978 <UART_SetConfig+0x17c>
 8004960:	2300      	movs	r3, #0
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e0f1      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004966:	2302      	movs	r3, #2
 8004968:	77fb      	strb	r3, [r7, #31]
 800496a:	e0ee      	b.n	8004b4a <UART_SetConfig+0x34e>
 800496c:	2304      	movs	r3, #4
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e0eb      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004972:	2308      	movs	r3, #8
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e0e8      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004978:	2310      	movs	r3, #16
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	bf00      	nop
 800497e:	e0e4      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a5f      	ldr	r2, [pc, #380]	; (8004b04 <UART_SetConfig+0x308>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d120      	bne.n	80049cc <UART_SetConfig+0x1d0>
 800498a:	4b5b      	ldr	r3, [pc, #364]	; (8004af8 <UART_SetConfig+0x2fc>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	d00f      	beq.n	80049b8 <UART_SetConfig+0x1bc>
 8004998:	2b40      	cmp	r3, #64	; 0x40
 800499a:	d802      	bhi.n	80049a2 <UART_SetConfig+0x1a6>
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <UART_SetConfig+0x1b0>
 80049a0:	e010      	b.n	80049c4 <UART_SetConfig+0x1c8>
 80049a2:	2b80      	cmp	r3, #128	; 0x80
 80049a4:	d005      	beq.n	80049b2 <UART_SetConfig+0x1b6>
 80049a6:	2bc0      	cmp	r3, #192	; 0xc0
 80049a8:	d009      	beq.n	80049be <UART_SetConfig+0x1c2>
 80049aa:	e00b      	b.n	80049c4 <UART_SetConfig+0x1c8>
 80049ac:	2300      	movs	r3, #0
 80049ae:	77fb      	strb	r3, [r7, #31]
 80049b0:	e0cb      	b.n	8004b4a <UART_SetConfig+0x34e>
 80049b2:	2302      	movs	r3, #2
 80049b4:	77fb      	strb	r3, [r7, #31]
 80049b6:	e0c8      	b.n	8004b4a <UART_SetConfig+0x34e>
 80049b8:	2304      	movs	r3, #4
 80049ba:	77fb      	strb	r3, [r7, #31]
 80049bc:	e0c5      	b.n	8004b4a <UART_SetConfig+0x34e>
 80049be:	2308      	movs	r3, #8
 80049c0:	77fb      	strb	r3, [r7, #31]
 80049c2:	e0c2      	b.n	8004b4a <UART_SetConfig+0x34e>
 80049c4:	2310      	movs	r3, #16
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	bf00      	nop
 80049ca:	e0be      	b.n	8004b4a <UART_SetConfig+0x34e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a4d      	ldr	r2, [pc, #308]	; (8004b08 <UART_SetConfig+0x30c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d124      	bne.n	8004a20 <UART_SetConfig+0x224>
 80049d6:	4b48      	ldr	r3, [pc, #288]	; (8004af8 <UART_SetConfig+0x2fc>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e4:	d012      	beq.n	8004a0c <UART_SetConfig+0x210>
 80049e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ea:	d802      	bhi.n	80049f2 <UART_SetConfig+0x1f6>
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <UART_SetConfig+0x204>
 80049f0:	e012      	b.n	8004a18 <UART_SetConfig+0x21c>
 80049f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f6:	d006      	beq.n	8004a06 <UART_SetConfig+0x20a>
 80049f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049fc:	d009      	beq.n	8004a12 <UART_SetConfig+0x216>
 80049fe:	e00b      	b.n	8004a18 <UART_SetConfig+0x21c>
 8004a00:	2300      	movs	r3, #0
 8004a02:	77fb      	strb	r3, [r7, #31]
 8004a04:	e0a1      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004a06:	2302      	movs	r3, #2
 8004a08:	77fb      	strb	r3, [r7, #31]
 8004a0a:	e09e      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	77fb      	strb	r3, [r7, #31]
 8004a10:	e09b      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004a12:	2308      	movs	r3, #8
 8004a14:	77fb      	strb	r3, [r7, #31]
 8004a16:	e098      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004a18:	2310      	movs	r3, #16
 8004a1a:	77fb      	strb	r3, [r7, #31]
 8004a1c:	bf00      	nop
 8004a1e:	e094      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a39      	ldr	r2, [pc, #228]	; (8004b0c <UART_SetConfig+0x310>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d124      	bne.n	8004a74 <UART_SetConfig+0x278>
 8004a2a:	4b33      	ldr	r3, [pc, #204]	; (8004af8 <UART_SetConfig+0x2fc>)
 8004a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a38:	d012      	beq.n	8004a60 <UART_SetConfig+0x264>
 8004a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3e:	d802      	bhi.n	8004a46 <UART_SetConfig+0x24a>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d007      	beq.n	8004a54 <UART_SetConfig+0x258>
 8004a44:	e012      	b.n	8004a6c <UART_SetConfig+0x270>
 8004a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4a:	d006      	beq.n	8004a5a <UART_SetConfig+0x25e>
 8004a4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a50:	d009      	beq.n	8004a66 <UART_SetConfig+0x26a>
 8004a52:	e00b      	b.n	8004a6c <UART_SetConfig+0x270>
 8004a54:	2301      	movs	r3, #1
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	e077      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	77fb      	strb	r3, [r7, #31]
 8004a5e:	e074      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004a60:	2304      	movs	r3, #4
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e071      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004a66:	2308      	movs	r3, #8
 8004a68:	77fb      	strb	r3, [r7, #31]
 8004a6a:	e06e      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	77fb      	strb	r3, [r7, #31]
 8004a70:	bf00      	nop
 8004a72:	e06a      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a25      	ldr	r2, [pc, #148]	; (8004b10 <UART_SetConfig+0x314>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d124      	bne.n	8004ac8 <UART_SetConfig+0x2cc>
 8004a7e:	4b1e      	ldr	r3, [pc, #120]	; (8004af8 <UART_SetConfig+0x2fc>)
 8004a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a84:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8c:	d012      	beq.n	8004ab4 <UART_SetConfig+0x2b8>
 8004a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a92:	d802      	bhi.n	8004a9a <UART_SetConfig+0x29e>
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d007      	beq.n	8004aa8 <UART_SetConfig+0x2ac>
 8004a98:	e012      	b.n	8004ac0 <UART_SetConfig+0x2c4>
 8004a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a9e:	d006      	beq.n	8004aae <UART_SetConfig+0x2b2>
 8004aa0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004aa4:	d009      	beq.n	8004aba <UART_SetConfig+0x2be>
 8004aa6:	e00b      	b.n	8004ac0 <UART_SetConfig+0x2c4>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	e04d      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	77fb      	strb	r3, [r7, #31]
 8004ab2:	e04a      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004ab4:	2304      	movs	r3, #4
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e047      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004aba:	2308      	movs	r3, #8
 8004abc:	77fb      	strb	r3, [r7, #31]
 8004abe:	e044      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004ac0:	2310      	movs	r3, #16
 8004ac2:	77fb      	strb	r3, [r7, #31]
 8004ac4:	bf00      	nop
 8004ac6:	e040      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a11      	ldr	r2, [pc, #68]	; (8004b14 <UART_SetConfig+0x318>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d139      	bne.n	8004b46 <UART_SetConfig+0x34a>
 8004ad2:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <UART_SetConfig+0x2fc>)
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae0:	d027      	beq.n	8004b32 <UART_SetConfig+0x336>
 8004ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae6:	d817      	bhi.n	8004b18 <UART_SetConfig+0x31c>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01c      	beq.n	8004b26 <UART_SetConfig+0x32a>
 8004aec:	e027      	b.n	8004b3e <UART_SetConfig+0x342>
 8004aee:	bf00      	nop
 8004af0:	efff69f3 	.word	0xefff69f3
 8004af4:	40011000 	.word	0x40011000
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40004400 	.word	0x40004400
 8004b00:	40004800 	.word	0x40004800
 8004b04:	40004c00 	.word	0x40004c00
 8004b08:	40005000 	.word	0x40005000
 8004b0c:	40011400 	.word	0x40011400
 8004b10:	40007800 	.word	0x40007800
 8004b14:	40007c00 	.word	0x40007c00
 8004b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b1c:	d006      	beq.n	8004b2c <UART_SetConfig+0x330>
 8004b1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b22:	d009      	beq.n	8004b38 <UART_SetConfig+0x33c>
 8004b24:	e00b      	b.n	8004b3e <UART_SetConfig+0x342>
 8004b26:	2300      	movs	r3, #0
 8004b28:	77fb      	strb	r3, [r7, #31]
 8004b2a:	e00e      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	77fb      	strb	r3, [r7, #31]
 8004b30:	e00b      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004b32:	2304      	movs	r3, #4
 8004b34:	77fb      	strb	r3, [r7, #31]
 8004b36:	e008      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004b38:	2308      	movs	r3, #8
 8004b3a:	77fb      	strb	r3, [r7, #31]
 8004b3c:	e005      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004b3e:	2310      	movs	r3, #16
 8004b40:	77fb      	strb	r3, [r7, #31]
 8004b42:	bf00      	nop
 8004b44:	e001      	b.n	8004b4a <UART_SetConfig+0x34e>
 8004b46:	2310      	movs	r3, #16
 8004b48:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b52:	d17c      	bne.n	8004c4e <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8004b54:	7ffb      	ldrb	r3, [r7, #31]
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d859      	bhi.n	8004c0e <UART_SetConfig+0x412>
 8004b5a:	a201      	add	r2, pc, #4	; (adr r2, 8004b60 <UART_SetConfig+0x364>)
 8004b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b60:	08004b85 	.word	0x08004b85
 8004b64:	08004ba3 	.word	0x08004ba3
 8004b68:	08004bc1 	.word	0x08004bc1
 8004b6c:	08004c0f 	.word	0x08004c0f
 8004b70:	08004bd9 	.word	0x08004bd9
 8004b74:	08004c0f 	.word	0x08004c0f
 8004b78:	08004c0f 	.word	0x08004c0f
 8004b7c:	08004c0f 	.word	0x08004c0f
 8004b80:	08004bf7 	.word	0x08004bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004b84:	f7fe f812 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	005a      	lsls	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	085b      	lsrs	r3, r3, #1
 8004b92:	441a      	add	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	61bb      	str	r3, [r7, #24]
        break;
 8004ba0:	e038      	b.n	8004c14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004ba2:	f7fe f817 	bl	8002bd4 <HAL_RCC_GetPCLK2Freq>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	005a      	lsls	r2, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	085b      	lsrs	r3, r3, #1
 8004bb0:	441a      	add	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	61bb      	str	r3, [r7, #24]
        break;
 8004bbe:	e029      	b.n	8004c14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	085a      	lsrs	r2, r3, #1
 8004bc6:	4b5d      	ldr	r3, [pc, #372]	; (8004d3c <UART_SetConfig+0x540>)
 8004bc8:	4413      	add	r3, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6852      	ldr	r2, [r2, #4]
 8004bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	61bb      	str	r3, [r7, #24]
        break;
 8004bd6:	e01d      	b.n	8004c14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004bd8:	f7fd ff04 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	005a      	lsls	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	441a      	add	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	61bb      	str	r3, [r7, #24]
        break;
 8004bf4:	e00e      	b.n	8004c14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	085b      	lsrs	r3, r3, #1
 8004bfc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	61bb      	str	r3, [r7, #24]
        break;
 8004c0c:	e002      	b.n	8004c14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	75fb      	strb	r3, [r7, #23]
        break;
 8004c12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b0f      	cmp	r3, #15
 8004c18:	d916      	bls.n	8004c48 <UART_SetConfig+0x44c>
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c20:	d212      	bcs.n	8004c48 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f023 030f 	bic.w	r3, r3, #15
 8004c2a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	085b      	lsrs	r3, r3, #1
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	89fb      	ldrh	r3, [r7, #14]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	89fa      	ldrh	r2, [r7, #14]
 8004c44:	60da      	str	r2, [r3, #12]
 8004c46:	e06e      	b.n	8004d26 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	75fb      	strb	r3, [r7, #23]
 8004c4c:	e06b      	b.n	8004d26 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004c4e:	7ffb      	ldrb	r3, [r7, #31]
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d857      	bhi.n	8004d04 <UART_SetConfig+0x508>
 8004c54:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <UART_SetConfig+0x460>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004c9d 	.word	0x08004c9d
 8004c64:	08004cb9 	.word	0x08004cb9
 8004c68:	08004d05 	.word	0x08004d05
 8004c6c:	08004cd1 	.word	0x08004cd1
 8004c70:	08004d05 	.word	0x08004d05
 8004c74:	08004d05 	.word	0x08004d05
 8004c78:	08004d05 	.word	0x08004d05
 8004c7c:	08004ced 	.word	0x08004ced
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004c80:	f7fd ff94 	bl	8002bac <HAL_RCC_GetPCLK1Freq>
 8004c84:	4602      	mov	r2, r0
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	441a      	add	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	61bb      	str	r3, [r7, #24]
        break;
 8004c9a:	e036      	b.n	8004d0a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004c9c:	f7fd ff9a 	bl	8002bd4 <HAL_RCC_GetPCLK2Freq>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	441a      	add	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	61bb      	str	r3, [r7, #24]
        break;
 8004cb6:	e028      	b.n	8004d0a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	085a      	lsrs	r2, r3, #1
 8004cbe:	4b20      	ldr	r3, [pc, #128]	; (8004d40 <UART_SetConfig+0x544>)
 8004cc0:	4413      	add	r3, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6852      	ldr	r2, [r2, #4]
 8004cc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	61bb      	str	r3, [r7, #24]
        break;
 8004cce:	e01c      	b.n	8004d0a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004cd0:	f7fd fe88 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	085b      	lsrs	r3, r3, #1
 8004cdc:	441a      	add	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	61bb      	str	r3, [r7, #24]
        break;
 8004cea:	e00e      	b.n	8004d0a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	085b      	lsrs	r3, r3, #1
 8004cf2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	61bb      	str	r3, [r7, #24]
        break;
 8004d02:	e002      	b.n	8004d0a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	75fb      	strb	r3, [r7, #23]
        break;
 8004d08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	2b0f      	cmp	r3, #15
 8004d0e:	d908      	bls.n	8004d22 <UART_SetConfig+0x526>
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d16:	d204      	bcs.n	8004d22 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	60da      	str	r2, [r3, #12]
 8004d20:	e001      	b.n	8004d26 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3720      	adds	r7, #32
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	01e84800 	.word	0x01e84800
 8004d40:	00f42400 	.word	0x00f42400

08004d44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	f003 0310 	and.w	r3, r3, #16
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01a      	beq.n	8004e5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e42:	d10a      	bne.n	8004e5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	605a      	str	r2, [r3, #4]
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004e96:	f7fb fbdd 	bl	8000654 <HAL_GetTick>
 8004e9a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d10e      	bne.n	8004ec8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eaa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f814 	bl	8004ee6 <UART_WaitOnFlagUntilTimeout>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e00a      	b.n	8004ede <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef6:	e02a      	b.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efe:	d026      	beq.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f00:	f7fb fba8 	bl	8000654 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d302      	bcc.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d11b      	bne.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f24:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0201 	bic.w	r2, r2, #1
 8004f34:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e00f      	b.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69da      	ldr	r2, [r3, #28]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4013      	ands	r3, r2
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	bf0c      	ite	eq
 8004f5e:	2301      	moveq	r3, #1
 8004f60:	2300      	movne	r3, #0
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	461a      	mov	r2, r3
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d0c5      	beq.n	8004ef8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f8c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0201 	bic.w	r2, r2, #1
 8004f9c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7ff fc07 	bl	80047e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fee:	2b21      	cmp	r3, #33	; 0x21
 8004ff0:	d12a      	bne.n	8005048 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d110      	bne.n	8005020 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800500c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800501c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800501e:	e013      	b.n	8005048 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005024:	781a      	ldrb	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005060:	2b21      	cmp	r3, #33	; 0x21
 8005062:	d12f      	bne.n	80050c4 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d110      	bne.n	8005092 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800507e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800508e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005090:	e018      	b.n	80050c4 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005096:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ac:	1c9a      	adds	r2, r3, #2
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7ff fb6d 	bl	80047d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050fa:	bf00      	nop
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005110:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005116:	2b22      	cmp	r3, #34	; 0x22
 8005118:	d13a      	bne.n	8005190 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005122:	89bb      	ldrh	r3, [r7, #12]
 8005124:	b2d9      	uxtb	r1, r3
 8005126:	89fb      	ldrh	r3, [r7, #14]
 8005128:	b2da      	uxtb	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512e:	400a      	ands	r2, r1
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d121      	bne.n	80051a0 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800516a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0201 	bic.w	r2, r2, #1
 800517a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 ff7b 	bl	8006084 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800518e:	e007      	b.n	80051a0 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699a      	ldr	r2, [r3, #24]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0208 	orr.w	r2, r2, #8
 800519e:	619a      	str	r2, [r3, #24]
}
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051b6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051bc:	2b22      	cmp	r3, #34	; 0x22
 80051be:	d13a      	bne.n	8005236 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051cc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80051ce:	89ba      	ldrh	r2, [r7, #12]
 80051d0:	89fb      	ldrh	r3, [r7, #14]
 80051d2:	4013      	ands	r3, r2
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051de:	1c9a      	adds	r2, r3, #2
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d121      	bne.n	8005246 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005210:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0201 	bic.w	r2, r2, #1
 8005220:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 ff28 	bl	8006084 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005234:	e007      	b.n	8005246 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699a      	ldr	r2, [r3, #24]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0208 	orr.w	r2, r2, #8
 8005244:	619a      	str	r2, [r3, #24]
}
 8005246:	bf00      	nop
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005250:	b084      	sub	sp, #16
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	f107 001c 	add.w	r0, r7, #28
 800525e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	2b01      	cmp	r3, #1
 8005266:	d120      	bne.n	80052aa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	4b20      	ldr	r3, [pc, #128]	; (80052fc <USB_CoreInit+0xac>)
 800527a:	4013      	ands	r3, r2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800528c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800528e:	2b01      	cmp	r3, #1
 8005290:	d105      	bne.n	800529e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fa60 	bl	8005764 <USB_CoreReset>
 80052a4:	4603      	mov	r3, r0
 80052a6:	73fb      	strb	r3, [r7, #15]
 80052a8:	e010      	b.n	80052cc <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fa54 	bl	8005764 <USB_CoreReset>
 80052bc:	4603      	mov	r3, r0
 80052be:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d10b      	bne.n	80052ea <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f043 0206 	orr.w	r2, r3, #6
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f043 0220 	orr.w	r2, r3, #32
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052f6:	b004      	add	sp, #16
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	ffbdffbf 	.word	0xffbdffbf

08005300 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f023 0201 	bic.w	r2, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	460b      	mov	r3, r1
 800532c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d106      	bne.n	800534e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60da      	str	r2, [r3, #12]
 800534c:	e00b      	b.n	8005366 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800534e:	78fb      	ldrb	r3, [r7, #3]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d106      	bne.n	8005362 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	60da      	str	r2, [r3, #12]
 8005360:	e001      	b.n	8005366 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e003      	b.n	800536e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005366:	2032      	movs	r0, #50	; 0x32
 8005368:	f7fb f980 	bl	800066c <HAL_Delay>

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005378:	b084      	sub	sp, #16
 800537a:	b580      	push	{r7, lr}
 800537c:	b086      	sub	sp, #24
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005392:	2300      	movs	r3, #0
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	e009      	b.n	80053ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	3340      	adds	r3, #64	; 0x40
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	2200      	movs	r2, #0
 80053a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	3301      	adds	r3, #1
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	2b0e      	cmp	r3, #14
 80053b0:	d9f2      	bls.n	8005398 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d112      	bne.n	80053de <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	e005      	b.n	80053ea <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053f0:	461a      	mov	r2, r3
 80053f2:	2300      	movs	r3, #0
 80053f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fc:	4619      	mov	r1, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005404:	461a      	mov	r2, r3
 8005406:	680b      	ldr	r3, [r1, #0]
 8005408:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	2b01      	cmp	r3, #1
 800540e:	d10c      	bne.n	800542a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8005410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005412:	2b00      	cmp	r3, #0
 8005414:	d104      	bne.n	8005420 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005416:	2100      	movs	r1, #0
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f971 	bl	8005700 <USB_SetDevSpeed>
 800541e:	e018      	b.n	8005452 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005420:	2101      	movs	r1, #1
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f96c 	bl	8005700 <USB_SetDevSpeed>
 8005428:	e013      	b.n	8005452 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	2b03      	cmp	r3, #3
 800542e:	d10c      	bne.n	800544a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005436:	2100      	movs	r1, #0
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f961 	bl	8005700 <USB_SetDevSpeed>
 800543e:	e008      	b.n	8005452 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005440:	2101      	movs	r1, #1
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f95c 	bl	8005700 <USB_SetDevSpeed>
 8005448:	e003      	b.n	8005452 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800544a:	2103      	movs	r1, #3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f957 	bl	8005700 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005452:	2110      	movs	r1, #16
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f90b 	bl	8005670 <USB_FlushTxFifo>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f929 	bl	80056bc <USB_FlushRxFifo>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547a:	461a      	mov	r2, r3
 800547c:	2300      	movs	r3, #0
 800547e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005486:	461a      	mov	r2, r3
 8005488:	2300      	movs	r3, #0
 800548a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	461a      	mov	r2, r3
 8005494:	2300      	movs	r3, #0
 8005496:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005498:	2300      	movs	r3, #0
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	e043      	b.n	8005526 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054b4:	d118      	bne.n	80054e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10a      	bne.n	80054d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c8:	461a      	mov	r2, r3
 80054ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	e013      	b.n	80054fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054de:	461a      	mov	r2, r3
 80054e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	e008      	b.n	80054fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f4:	461a      	mov	r2, r3
 80054f6:	2300      	movs	r3, #0
 80054f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005506:	461a      	mov	r2, r3
 8005508:	2300      	movs	r3, #0
 800550a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005518:	461a      	mov	r2, r3
 800551a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800551e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	3301      	adds	r3, #1
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	429a      	cmp	r2, r3
 800552c:	d3b7      	bcc.n	800549e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800552e:	2300      	movs	r3, #0
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	e043      	b.n	80055bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800554a:	d118      	bne.n	800557e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10a      	bne.n	8005568 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555e:	461a      	mov	r2, r3
 8005560:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	e013      	b.n	8005590 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	461a      	mov	r2, r3
 8005576:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	e008      	b.n	8005590 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558a:	461a      	mov	r2, r3
 800558c:	2300      	movs	r3, #0
 800558e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559c:	461a      	mov	r2, r3
 800559e:	2300      	movs	r3, #0
 80055a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ae:	461a      	mov	r2, r3
 80055b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	3301      	adds	r3, #1
 80055ba:	613b      	str	r3, [r7, #16]
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d3b7      	bcc.n	8005534 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d110      	bne.n	8005600 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e4:	461a      	mov	r2, r3
 80055e6:	4b1e      	ldr	r3, [pc, #120]	; (8005660 <USB_DevInit+0x2e8>)
 80055e8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f8:	4619      	mov	r1, r3
 80055fa:	4b1a      	ldr	r3, [pc, #104]	; (8005664 <USB_DevInit+0x2ec>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800560c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	2b00      	cmp	r3, #0
 8005612:	d105      	bne.n	8005620 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	f043 0210 	orr.w	r2, r3, #16
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699a      	ldr	r2, [r3, #24]
 8005624:	4b10      	ldr	r3, [pc, #64]	; (8005668 <USB_DevInit+0x2f0>)
 8005626:	4313      	orrs	r3, r2
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800562c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d005      	beq.n	800563e <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	f043 0208 	orr.w	r2, r3, #8
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800563e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005640:	2b01      	cmp	r3, #1
 8005642:	d105      	bne.n	8005650 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	699a      	ldr	r2, [r3, #24]
 8005648:	4b08      	ldr	r3, [pc, #32]	; (800566c <USB_DevInit+0x2f4>)
 800564a:	4313      	orrs	r3, r2
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005650:	7dfb      	ldrb	r3, [r7, #23]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800565c:	b004      	add	sp, #16
 800565e:	4770      	bx	lr
 8005660:	00800100 	.word	0x00800100
 8005664:	00010003 	.word	0x00010003
 8005668:	803c3800 	.word	0x803c3800
 800566c:	40000004 	.word	0x40000004

08005670 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	019b      	lsls	r3, r3, #6
 8005682:	f043 0220 	orr.w	r2, r3, #32
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3301      	adds	r3, #1
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4a09      	ldr	r2, [pc, #36]	; (80056b8 <USB_FlushTxFifo+0x48>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d901      	bls.n	800569c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e006      	b.n	80056aa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	d0f0      	beq.n	800568a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	00030d40 	.word	0x00030d40

080056bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2210      	movs	r2, #16
 80056cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3301      	adds	r3, #1
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4a09      	ldr	r2, [pc, #36]	; (80056fc <USB_FlushRxFifo+0x40>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d901      	bls.n	80056e0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e006      	b.n	80056ee <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f003 0310 	and.w	r3, r3, #16
 80056e8:	2b10      	cmp	r3, #16
 80056ea:	d0f0      	beq.n	80056ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	00030d40 	.word	0x00030d40

08005700 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	68f9      	ldr	r1, [r7, #12]
 800571c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005720:	4313      	orrs	r3, r2
 8005722:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800574c:	f043 0302 	orr.w	r3, r3, #2
 8005750:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005752:	2003      	movs	r0, #3
 8005754:	f7fa ff8a 	bl	800066c <HAL_Delay>

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3301      	adds	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4a13      	ldr	r2, [pc, #76]	; (80057c8 <USB_CoreReset+0x64>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d901      	bls.n	8005782 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e01b      	b.n	80057ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	daf2      	bge.n	8005770 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f043 0201 	orr.w	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3301      	adds	r3, #1
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4a09      	ldr	r2, [pc, #36]	; (80057c8 <USB_CoreReset+0x64>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d901      	bls.n	80057ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e006      	b.n	80057ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d0f0      	beq.n	800579a <USB_CoreReset+0x36>

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	00030d40 	.word	0x00030d40

080057cc <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 80057d4:	4a0a      	ldr	r2, [pc, #40]	; (8005800 <BH1750_Init+0x34>)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 80057da:	f000 f813 	bl	8005804 <BH1750_Reset>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d107      	bne.n	80057f4 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 80057e4:	2045      	movs	r0, #69	; 0x45
 80057e6:	f000 f859 	bl	800589c <BH1750_SetMtreg>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <BH1750_Init+0x28>
			return BH1750_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e000      	b.n	80057f6 <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 80057f4:	2301      	movs	r3, #1
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20000210 	.word	0x20000210

08005804 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 800580a:	2307      	movs	r3, #7
 800580c:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 800580e:	4b09      	ldr	r3, [pc, #36]	; (8005834 <BH1750_Reset+0x30>)
 8005810:	6818      	ldr	r0, [r3, #0]
 8005812:	1dfa      	adds	r2, r7, #7
 8005814:	230a      	movs	r3, #10
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	2301      	movs	r3, #1
 800581a:	2146      	movs	r1, #70	; 0x46
 800581c:	f7fb fae8 	bl	8000df0 <HAL_I2C_Master_Transmit>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <BH1750_Reset+0x26>
		return BH1750_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	e000      	b.n	800582c <BH1750_Reset+0x28>

	return BH1750_ERROR;
 800582a:	2301      	movs	r3, #1
}
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	20000210 	.word	0x20000210

08005838 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af02      	add	r7, sp, #8
 800583e:	4603      	mov	r3, r0
 8005840:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	091b      	lsrs	r3, r3, #4
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d106      	bne.n	800585a <BH1750_SetMode+0x22>
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <BH1750_SetMode+0x22>
 8005856:	2301      	movs	r3, #1
 8005858:	e018      	b.n	800588c <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	2b03      	cmp	r3, #3
 8005862:	dd01      	ble.n	8005868 <BH1750_SetMode+0x30>
 8005864:	2301      	movs	r3, #1
 8005866:	e011      	b.n	800588c <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 8005868:	79fa      	ldrb	r2, [r7, #7]
 800586a:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <BH1750_SetMode+0x5c>)
 800586c:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 800586e:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <BH1750_SetMode+0x60>)
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	1dfa      	adds	r2, r7, #7
 8005874:	230a      	movs	r3, #10
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	2301      	movs	r3, #1
 800587a:	2146      	movs	r1, #70	; 0x46
 800587c:	f7fb fab8 	bl	8000df0 <HAL_I2C_Master_Transmit>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <BH1750_SetMode+0x52>
		return BH1750_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	e000      	b.n	800588c <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 800588a:	2301      	movs	r3, #1
}
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	2000020c 	.word	0x2000020c
 8005898:	20000210 	.word	0x20000210

0800589c <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	4603      	mov	r3, r0
 80058a4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	2b1e      	cmp	r3, #30
 80058aa:	d902      	bls.n	80058b2 <BH1750_SetMtreg+0x16>
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	2bff      	cmp	r3, #255	; 0xff
 80058b0:	d101      	bne.n	80058b6 <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e037      	b.n	8005926 <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 80058b6:	4a1e      	ldr	r2, [pc, #120]	; (8005930 <BH1750_SetMtreg+0x94>)
 80058b8:	79fb      	ldrb	r3, [r7, #7]
 80058ba:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 80058ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ce:	f003 031f 	and.w	r3, r3, #31
 80058d2:	b25b      	sxtb	r3, r3
 80058d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80058d8:	b25b      	sxtb	r3, r3
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 80058de:	4b15      	ldr	r3, [pc, #84]	; (8005934 <BH1750_SetMtreg+0x98>)
 80058e0:	6818      	ldr	r0, [r3, #0]
 80058e2:	f107 020c 	add.w	r2, r7, #12
 80058e6:	230a      	movs	r3, #10
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	2301      	movs	r3, #1
 80058ec:	2146      	movs	r1, #70	; 0x46
 80058ee:	f7fb fa7f 	bl	8000df0 <HAL_I2C_Master_Transmit>
 80058f2:	4603      	mov	r3, r0
 80058f4:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e012      	b.n	8005926 <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8005900:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <BH1750_SetMtreg+0x98>)
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	f107 030c 	add.w	r3, r7, #12
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	230a      	movs	r3, #10
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	2301      	movs	r3, #1
 8005910:	2146      	movs	r1, #70	; 0x46
 8005912:	f7fb fa6d 	bl	8000df0 <HAL_I2C_Master_Transmit>
 8005916:	4603      	mov	r3, r0
 8005918:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	e000      	b.n	8005926 <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8005924:	2301      	movs	r3, #1
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000214 	.word	0x20000214
 8005934:	20000210 	.word	0x20000210

08005938 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af02      	add	r7, sp, #8
 800593e:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8005940:	4b25      	ldr	r3, [pc, #148]	; (80059d8 <BH1750_ReadLight+0xa0>)
 8005942:	6818      	ldr	r0, [r3, #0]
 8005944:	f107 0208 	add.w	r2, r7, #8
 8005948:	230a      	movs	r3, #10
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	2302      	movs	r3, #2
 800594e:	2146      	movs	r1, #70	; 0x46
 8005950:	f7fb fb42 	bl	8000fd8 <HAL_I2C_Master_Receive>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d138      	bne.n	80059cc <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 800595a:	7a3b      	ldrb	r3, [r7, #8]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	7a7a      	ldrb	r2, [r7, #9]
 8005960:	4313      	orrs	r3, r2
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800596a:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 800596e:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <BH1750_ReadLight+0xa4>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b45      	cmp	r3, #69	; 0x45
 8005974:	d00f      	beq.n	8005996 <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 8005976:	4b19      	ldr	r3, [pc, #100]	; (80059dc <BH1750_ReadLight+0xa4>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005982:	eddf 6a17 	vldr	s13, [pc, #92]	; 80059e0 <BH1750_ReadLight+0xa8>
 8005986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800598a:	ed97 7a03 	vldr	s14, [r7, #12]
 800598e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005992:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 8005996:	4b13      	ldr	r3, [pc, #76]	; (80059e4 <BH1750_ReadLight+0xac>)
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	2b21      	cmp	r3, #33	; 0x21
 800599c:	d003      	beq.n	80059a6 <BH1750_ReadLight+0x6e>
 800599e:	4b11      	ldr	r3, [pc, #68]	; (80059e4 <BH1750_ReadLight+0xac>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b11      	cmp	r3, #17
 80059a4:	d107      	bne.n	80059b6 <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 80059a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80059aa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80059ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059b2:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 80059b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80059ba:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80059e8 <BH1750_ReadLight+0xb0>
 80059be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	e000      	b.n	80059ce <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 80059cc:	2301      	movs	r3, #1
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000210 	.word	0x20000210
 80059dc:	20000214 	.word	0x20000214
 80059e0:	428a0000 	.word	0x428a0000
 80059e4:	2000020c 	.word	0x2000020c
 80059e8:	3f99999a 	.word	0x3f99999a

080059ec <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08e      	sub	sp, #56	; 0x38
 80059f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	605a      	str	r2, [r3, #4]
 80059fc:	609a      	str	r2, [r3, #8]
 80059fe:	60da      	str	r2, [r3, #12]
 8005a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a02:	4b73      	ldr	r3, [pc, #460]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	4a72      	ldr	r2, [pc, #456]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a08:	f043 0304 	orr.w	r3, r3, #4
 8005a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a0e:	4b70      	ldr	r3, [pc, #448]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	623b      	str	r3, [r7, #32]
 8005a18:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005a1a:	4b6d      	ldr	r3, [pc, #436]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	4a6c      	ldr	r2, [pc, #432]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a20:	f043 0320 	orr.w	r3, r3, #32
 8005a24:	6313      	str	r3, [r2, #48]	; 0x30
 8005a26:	4b6a      	ldr	r3, [pc, #424]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	61fb      	str	r3, [r7, #28]
 8005a30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005a32:	4b67      	ldr	r3, [pc, #412]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	4a66      	ldr	r2, [pc, #408]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a3e:	4b64      	ldr	r3, [pc, #400]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a46:	61bb      	str	r3, [r7, #24]
 8005a48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a4a:	4b61      	ldr	r3, [pc, #388]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	4a60      	ldr	r2, [pc, #384]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a50:	f043 0301 	orr.w	r3, r3, #1
 8005a54:	6313      	str	r3, [r2, #48]	; 0x30
 8005a56:	4b5e      	ldr	r3, [pc, #376]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a62:	4b5b      	ldr	r3, [pc, #364]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	4a5a      	ldr	r2, [pc, #360]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a68:	f043 0302 	orr.w	r3, r3, #2
 8005a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a6e:	4b58      	ldr	r3, [pc, #352]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	613b      	str	r3, [r7, #16]
 8005a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a7a:	4b55      	ldr	r3, [pc, #340]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	4a54      	ldr	r2, [pc, #336]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a80:	f043 0310 	orr.w	r3, r3, #16
 8005a84:	6313      	str	r3, [r2, #48]	; 0x30
 8005a86:	4b52      	ldr	r3, [pc, #328]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	f003 0310 	and.w	r3, r3, #16
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a92:	4b4f      	ldr	r3, [pc, #316]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a96:	4a4e      	ldr	r2, [pc, #312]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005a98:	f043 0308 	orr.w	r3, r3, #8
 8005a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a9e:	4b4c      	ldr	r3, [pc, #304]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	60bb      	str	r3, [r7, #8]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005aaa:	4b49      	ldr	r3, [pc, #292]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	4a48      	ldr	r2, [pc, #288]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ab6:	4b46      	ldr	r3, [pc, #280]	; (8005bd0 <MX_GPIO_Init+0x1e4>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abe:	607b      	str	r3, [r7, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f244 0181 	movw	r1, #16513	; 0x4081
 8005ac8:	4842      	ldr	r0, [pc, #264]	; (8005bd4 <MX_GPIO_Init+0x1e8>)
 8005aca:	f7fb f8e7 	bl	8000c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005ace:	2200      	movs	r2, #0
 8005ad0:	2140      	movs	r1, #64	; 0x40
 8005ad2:	4841      	ldr	r0, [pc, #260]	; (8005bd8 <MX_GPIO_Init+0x1ec>)
 8005ad4:	f7fb f8e2 	bl	8000c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC8 */
  GPIO_InitStruct.Pin = USER_Btn_Pin|GPIO_PIN_8;
 8005ad8:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005ade:	4b3f      	ldr	r3, [pc, #252]	; (8005bdc <MX_GPIO_Init+0x1f0>)
 8005ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aea:	4619      	mov	r1, r3
 8005aec:	483c      	ldr	r0, [pc, #240]	; (8005be0 <MX_GPIO_Init+0x1f4>)
 8005aee:	f7fa ff13 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005af2:	2332      	movs	r3, #50	; 0x32
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005af6:	2302      	movs	r3, #2
 8005af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005afe:	2303      	movs	r3, #3
 8005b00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005b02:	230b      	movs	r3, #11
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4834      	ldr	r0, [pc, #208]	; (8005be0 <MX_GPIO_Init+0x1f4>)
 8005b0e:	f7fa ff03 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005b12:	2386      	movs	r3, #134	; 0x86
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b16:	2302      	movs	r3, #2
 8005b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005b22:	230b      	movs	r3, #11
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	482d      	ldr	r0, [pc, #180]	; (8005be4 <MX_GPIO_Init+0x1f8>)
 8005b2e:	f7fa fef3 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8005b32:	f244 0381 	movw	r3, #16513	; 0x4081
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b40:	2300      	movs	r3, #0
 8005b42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4822      	ldr	r0, [pc, #136]	; (8005bd4 <MX_GPIO_Init+0x1e8>)
 8005b4c:	f7fa fee4 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b56:	2302      	movs	r3, #2
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005b62:	230b      	movs	r3, #11
 8005b64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4819      	ldr	r0, [pc, #100]	; (8005bd4 <MX_GPIO_Init+0x1e8>)
 8005b6e:	f7fa fed3 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005b72:	2340      	movs	r3, #64	; 0x40
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b76:	2301      	movs	r3, #1
 8005b78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b86:	4619      	mov	r1, r3
 8005b88:	4813      	ldr	r0, [pc, #76]	; (8005bd8 <MX_GPIO_Init+0x1ec>)
 8005b8a:	f7fa fec5 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005b8e:	2380      	movs	r3, #128	; 0x80
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b92:	2300      	movs	r3, #0
 8005b94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	480d      	ldr	r0, [pc, #52]	; (8005bd8 <MX_GPIO_Init+0x1ec>)
 8005ba2:	f7fa feb9 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005ba6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bac:	2302      	movs	r3, #2
 8005bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005bb8:	230b      	movs	r3, #11
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	4805      	ldr	r0, [pc, #20]	; (8005bd8 <MX_GPIO_Init+0x1ec>)
 8005bc4:	f7fa fea8 	bl	8000918 <HAL_GPIO_Init>

}
 8005bc8:	bf00      	nop
 8005bca:	3738      	adds	r7, #56	; 0x38
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	40020400 	.word	0x40020400
 8005bd8:	40021800 	.word	0x40021800
 8005bdc:	10110000 	.word	0x10110000
 8005be0:	40020800 	.word	0x40020800
 8005be4:	40020000 	.word	0x40020000

08005be8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8005bec:	4b1b      	ldr	r3, [pc, #108]	; (8005c5c <MX_I2C1_Init+0x74>)
 8005bee:	4a1c      	ldr	r2, [pc, #112]	; (8005c60 <MX_I2C1_Init+0x78>)
 8005bf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8005bf2:	4b1a      	ldr	r3, [pc, #104]	; (8005c5c <MX_I2C1_Init+0x74>)
 8005bf4:	4a1b      	ldr	r2, [pc, #108]	; (8005c64 <MX_I2C1_Init+0x7c>)
 8005bf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005bf8:	4b18      	ldr	r3, [pc, #96]	; (8005c5c <MX_I2C1_Init+0x74>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005bfe:	4b17      	ldr	r3, [pc, #92]	; (8005c5c <MX_I2C1_Init+0x74>)
 8005c00:	2201      	movs	r2, #1
 8005c02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c04:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <MX_I2C1_Init+0x74>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005c0a:	4b14      	ldr	r3, [pc, #80]	; (8005c5c <MX_I2C1_Init+0x74>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005c10:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <MX_I2C1_Init+0x74>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c16:	4b11      	ldr	r3, [pc, #68]	; (8005c5c <MX_I2C1_Init+0x74>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c1c:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <MX_I2C1_Init+0x74>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005c22:	480e      	ldr	r0, [pc, #56]	; (8005c5c <MX_I2C1_Init+0x74>)
 8005c24:	f7fb f854 	bl	8000cd0 <HAL_I2C_Init>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005c2e:	f000 fa85 	bl	800613c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005c32:	2100      	movs	r1, #0
 8005c34:	4809      	ldr	r0, [pc, #36]	; (8005c5c <MX_I2C1_Init+0x74>)
 8005c36:	f7fc f99a 	bl	8001f6e <HAL_I2CEx_ConfigAnalogFilter>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005c40:	f000 fa7c 	bl	800613c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005c44:	2100      	movs	r1, #0
 8005c46:	4805      	ldr	r0, [pc, #20]	; (8005c5c <MX_I2C1_Init+0x74>)
 8005c48:	f7fc f9dc 	bl	8002004 <HAL_I2CEx_ConfigDigitalFilter>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005c52:	f000 fa73 	bl	800613c <Error_Handler>
  }

}
 8005c56:	bf00      	nop
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20000218 	.word	0x20000218
 8005c60:	40005400 	.word	0x40005400
 8005c64:	00808cd2 	.word	0x00808cd2

08005c68 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8005c6c:	4b1b      	ldr	r3, [pc, #108]	; (8005cdc <MX_I2C2_Init+0x74>)
 8005c6e:	4a1c      	ldr	r2, [pc, #112]	; (8005ce0 <MX_I2C2_Init+0x78>)
 8005c70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8005c72:	4b1a      	ldr	r3, [pc, #104]	; (8005cdc <MX_I2C2_Init+0x74>)
 8005c74:	4a1b      	ldr	r2, [pc, #108]	; (8005ce4 <MX_I2C2_Init+0x7c>)
 8005c76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005c78:	4b18      	ldr	r3, [pc, #96]	; (8005cdc <MX_I2C2_Init+0x74>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c7e:	4b17      	ldr	r3, [pc, #92]	; (8005cdc <MX_I2C2_Init+0x74>)
 8005c80:	2201      	movs	r2, #1
 8005c82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c84:	4b15      	ldr	r3, [pc, #84]	; (8005cdc <MX_I2C2_Init+0x74>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005c8a:	4b14      	ldr	r3, [pc, #80]	; (8005cdc <MX_I2C2_Init+0x74>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005c90:	4b12      	ldr	r3, [pc, #72]	; (8005cdc <MX_I2C2_Init+0x74>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c96:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <MX_I2C2_Init+0x74>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c9c:	4b0f      	ldr	r3, [pc, #60]	; (8005cdc <MX_I2C2_Init+0x74>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005ca2:	480e      	ldr	r0, [pc, #56]	; (8005cdc <MX_I2C2_Init+0x74>)
 8005ca4:	f7fb f814 	bl	8000cd0 <HAL_I2C_Init>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005cae:	f000 fa45 	bl	800613c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4809      	ldr	r0, [pc, #36]	; (8005cdc <MX_I2C2_Init+0x74>)
 8005cb6:	f7fc f95a 	bl	8001f6e <HAL_I2CEx_ConfigAnalogFilter>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005cc0:	f000 fa3c 	bl	800613c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	4805      	ldr	r0, [pc, #20]	; (8005cdc <MX_I2C2_Init+0x74>)
 8005cc8:	f7fc f99c 	bl	8002004 <HAL_I2CEx_ConfigDigitalFilter>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005cd2:	f000 fa33 	bl	800613c <Error_Handler>
  }

}
 8005cd6:	bf00      	nop
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20000264 	.word	0x20000264
 8005ce0:	40005800 	.word	0x40005800
 8005ce4:	00808cd2 	.word	0x00808cd2

08005ce8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08c      	sub	sp, #48	; 0x30
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cf0:	f107 031c 	add.w	r3, r7, #28
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	609a      	str	r2, [r3, #8]
 8005cfc:	60da      	str	r2, [r3, #12]
 8005cfe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a3e      	ldr	r2, [pc, #248]	; (8005e00 <HAL_I2C_MspInit+0x118>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d139      	bne.n	8005d7e <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d0a:	4b3e      	ldr	r3, [pc, #248]	; (8005e04 <HAL_I2C_MspInit+0x11c>)
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	4a3d      	ldr	r2, [pc, #244]	; (8005e04 <HAL_I2C_MspInit+0x11c>)
 8005d10:	f043 0302 	orr.w	r3, r3, #2
 8005d14:	6313      	str	r3, [r2, #48]	; 0x30
 8005d16:	4b3b      	ldr	r3, [pc, #236]	; (8005e04 <HAL_I2C_MspInit+0x11c>)
 8005d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	61bb      	str	r3, [r7, #24]
 8005d20:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8005d22:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d28:	2312      	movs	r3, #18
 8005d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d30:	2303      	movs	r3, #3
 8005d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005d34:	2304      	movs	r3, #4
 8005d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d38:	f107 031c 	add.w	r3, r7, #28
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4832      	ldr	r0, [pc, #200]	; (8005e08 <HAL_I2C_MspInit+0x120>)
 8005d40:	f7fa fdea 	bl	8000918 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005d44:	4b2f      	ldr	r3, [pc, #188]	; (8005e04 <HAL_I2C_MspInit+0x11c>)
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	4a2e      	ldr	r2, [pc, #184]	; (8005e04 <HAL_I2C_MspInit+0x11c>)
 8005d4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8005d50:	4b2c      	ldr	r3, [pc, #176]	; (8005e04 <HAL_I2C_MspInit+0x11c>)
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	2100      	movs	r1, #0
 8005d60:	201f      	movs	r0, #31
 8005d62:	f7fa fd80 	bl	8000866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005d66:	201f      	movs	r0, #31
 8005d68:	f7fa fd99 	bl	800089e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2100      	movs	r1, #0
 8005d70:	2020      	movs	r0, #32
 8005d72:	f7fa fd78 	bl	8000866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005d76:	2020      	movs	r0, #32
 8005d78:	f7fa fd91 	bl	800089e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005d7c:	e03c      	b.n	8005df8 <HAL_I2C_MspInit+0x110>
  else if(i2cHandle->Instance==I2C2)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a22      	ldr	r2, [pc, #136]	; (8005e0c <HAL_I2C_MspInit+0x124>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d137      	bne.n	8005df8 <HAL_I2C_MspInit+0x110>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005d88:	4b1e      	ldr	r3, [pc, #120]	; (8005e04 <HAL_I2C_MspInit+0x11c>)
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8c:	4a1d      	ldr	r2, [pc, #116]	; (8005e04 <HAL_I2C_MspInit+0x11c>)
 8005d8e:	f043 0320 	orr.w	r3, r3, #32
 8005d92:	6313      	str	r3, [r2, #48]	; 0x30
 8005d94:	4b1b      	ldr	r3, [pc, #108]	; (8005e04 <HAL_I2C_MspInit+0x11c>)
 8005d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d98:	f003 0320 	and.w	r3, r3, #32
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005da0:	2303      	movs	r3, #3
 8005da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005da4:	2312      	movs	r3, #18
 8005da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005da8:	2301      	movs	r3, #1
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dac:	2303      	movs	r3, #3
 8005dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005db0:	2304      	movs	r3, #4
 8005db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005db4:	f107 031c 	add.w	r3, r7, #28
 8005db8:	4619      	mov	r1, r3
 8005dba:	4815      	ldr	r0, [pc, #84]	; (8005e10 <HAL_I2C_MspInit+0x128>)
 8005dbc:	f7fa fdac 	bl	8000918 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005dc0:	4b10      	ldr	r3, [pc, #64]	; (8005e04 <HAL_I2C_MspInit+0x11c>)
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc4:	4a0f      	ldr	r2, [pc, #60]	; (8005e04 <HAL_I2C_MspInit+0x11c>)
 8005dc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005dca:	6413      	str	r3, [r2, #64]	; 0x40
 8005dcc:	4b0d      	ldr	r3, [pc, #52]	; (8005e04 <HAL_I2C_MspInit+0x11c>)
 8005dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2100      	movs	r1, #0
 8005ddc:	2021      	movs	r0, #33	; 0x21
 8005dde:	f7fa fd42 	bl	8000866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8005de2:	2021      	movs	r0, #33	; 0x21
 8005de4:	f7fa fd5b 	bl	800089e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8005de8:	2200      	movs	r2, #0
 8005dea:	2100      	movs	r1, #0
 8005dec:	2022      	movs	r0, #34	; 0x22
 8005dee:	f7fa fd3a 	bl	8000866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8005df2:	2022      	movs	r0, #34	; 0x22
 8005df4:	f7fa fd53 	bl	800089e <HAL_NVIC_EnableIRQ>
}
 8005df8:	bf00      	nop
 8005dfa:	3730      	adds	r7, #48	; 0x30
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	40005400 	.word	0x40005400
 8005e04:	40023800 	.word	0x40023800
 8005e08:	40020400 	.word	0x40020400
 8005e0c:	40005800 	.word	0x40005800
 8005e10:	40021400 	.word	0x40021400

08005e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e18:	f7fa fbca 	bl	80005b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e1c:	f000 f89e 	bl	8005f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005e20:	f7ff fde4 	bl	80059ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8005e24:	f000 fc60 	bl	80066e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8005e28:	f000 fcda 	bl	80067e0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8005e2c:	f7ff fedc 	bl	8005be8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005e30:	f7ff ff1a 	bl	8005c68 <MX_I2C2_Init>
  MX_TIM3_Init();
 8005e34:	f000 fb36 	bl	80064a4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8005e38:	f000 fa6e 	bl	8006318 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, msg, 12);
 8005e3c:	220c      	movs	r2, #12
 8005e3e:	4937      	ldr	r1, [pc, #220]	; (8005f1c <main+0x108>)
 8005e40:	4837      	ldr	r0, [pc, #220]	; (8005f20 <main+0x10c>)
 8005e42:	f7fe fb09 	bl	8004458 <HAL_UART_Receive_IT>
  BH1750_Init(&hi2c1);
 8005e46:	4837      	ldr	r0, [pc, #220]	; (8005f24 <main+0x110>)
 8005e48:	f7ff fcc0 	bl	80057cc <BH1750_Init>
  BH1750_Init(&hi2c2);
 8005e4c:	4836      	ldr	r0, [pc, #216]	; (8005f28 <main+0x114>)
 8005e4e:	f7ff fcbd 	bl	80057cc <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8005e52:	2011      	movs	r0, #17
 8005e54:	f7ff fcf0 	bl	8005838 <BH1750_SetMode>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8005e58:	2100      	movs	r1, #0
 8005e5a:	4834      	ldr	r0, [pc, #208]	; (8005f2c <main+0x118>)
 8005e5c:	f7fd fb12 	bl	8003484 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8005e60:	2104      	movs	r1, #4
 8005e62:	4832      	ldr	r0, [pc, #200]	; (8005f2c <main+0x118>)
 8005e64:	f7fd fb0e 	bl	8003484 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8005e68:	2108      	movs	r1, #8
 8005e6a:	4830      	ldr	r0, [pc, #192]	; (8005f2c <main+0x118>)
 8005e6c:	f7fd fb0a 	bl	8003484 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      //! testowa obsługa USARTA od przycisku
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)==GPIO_PIN_SET)
 8005e70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e74:	482e      	ldr	r0, [pc, #184]	; (8005f30 <main+0x11c>)
 8005e76:	f7fa fef9 	bl	8000c6c <HAL_GPIO_ReadPin>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d113      	bne.n	8005ea8 <main+0x94>
	  {
		  n=sprintf(tx_buff,"test");
 8005e80:	4b2c      	ldr	r3, [pc, #176]	; (8005f34 <main+0x120>)
 8005e82:	4a2d      	ldr	r2, [pc, #180]	; (8005f38 <main+0x124>)
 8005e84:	6810      	ldr	r0, [r2, #0]
 8005e86:	6018      	str	r0, [r3, #0]
 8005e88:	7912      	ldrb	r2, [r2, #4]
 8005e8a:	711a      	strb	r2, [r3, #4]
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	4b2b      	ldr	r3, [pc, #172]	; (8005f3c <main+0x128>)
 8005e90:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart3, tx_buff, n);
 8005e92:	4b2a      	ldr	r3, [pc, #168]	; (8005f3c <main+0x128>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	461a      	mov	r2, r3
 8005e9a:	4926      	ldr	r1, [pc, #152]	; (8005f34 <main+0x120>)
 8005e9c:	4820      	ldr	r0, [pc, #128]	; (8005f20 <main+0x10c>)
 8005e9e:	f7fe fa7f 	bl	80043a0 <HAL_UART_Transmit_IT>
		  HAL_Delay(200);
 8005ea2:	20c8      	movs	r0, #200	; 0xc8
 8005ea4:	f7fa fbe2 	bl	800066c <HAL_Delay>
	  }
	 // HAL_UART_Receive_IT(&huart3, &msg, 12);
	 	  if(BH1750_OK == BH1750_ReadLight(&BH1750_lux_1))
 8005ea8:	4825      	ldr	r0, [pc, #148]	; (8005f40 <main+0x12c>)
 8005eaa:	f7ff fd45 	bl	8005938 <BH1750_ReadLight>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1dd      	bne.n	8005e70 <main+0x5c>
	 	  	  {
	 		  	  BH1750_lux_int_1 = BH1750_lux_1;
 8005eb4:	4b22      	ldr	r3, [pc, #136]	; (8005f40 <main+0x12c>)
 8005eb6:	edd3 7a00 	vldr	s15, [r3]
 8005eba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ebe:	ee17 2a90 	vmov	r2, s15
 8005ec2:	4b20      	ldr	r3, [pc, #128]	; (8005f44 <main+0x130>)
 8005ec4:	601a      	str	r2, [r3, #0]
	 	  		  size = sprintf(buffer, "BH1750 Lux: %d", BH1750_lux_int_1);
 8005ec6:	4b1f      	ldr	r3, [pc, #124]	; (8005f44 <main+0x130>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	491e      	ldr	r1, [pc, #120]	; (8005f48 <main+0x134>)
 8005ece:	481f      	ldr	r0, [pc, #124]	; (8005f4c <main+0x138>)
 8005ed0:	f000 fd70 	bl	80069b4 <siprintf>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	4b1d      	ldr	r3, [pc, #116]	; (8005f50 <main+0x13c>)
 8005eda:	701a      	strb	r2, [r3, #0]
	 	  	  	  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, size, 200);
 8005edc:	4b1c      	ldr	r3, [pc, #112]	; (8005f50 <main+0x13c>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	23c8      	movs	r3, #200	; 0xc8
 8005ee4:	4919      	ldr	r1, [pc, #100]	; (8005f4c <main+0x138>)
 8005ee6:	480e      	ldr	r0, [pc, #56]	; (8005f20 <main+0x10c>)
 8005ee8:	f7fe f9c8 	bl	800427c <HAL_UART_Transmit>

	 	  	  	 size = sprintf(buffer, ", %d\n\r", wypelnienie);
 8005eec:	4b19      	ldr	r3, [pc, #100]	; (8005f54 <main+0x140>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	4919      	ldr	r1, [pc, #100]	; (8005f58 <main+0x144>)
 8005ef4:	4815      	ldr	r0, [pc, #84]	; (8005f4c <main+0x138>)
 8005ef6:	f000 fd5d 	bl	80069b4 <siprintf>
 8005efa:	4603      	mov	r3, r0
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	4b14      	ldr	r3, [pc, #80]	; (8005f50 <main+0x13c>)
 8005f00:	701a      	strb	r2, [r3, #0]
	 	  	  	 HAL_UART_Transmit(&huart3, (uint8_t*)buffer, size, 200);
 8005f02:	4b13      	ldr	r3, [pc, #76]	; (8005f50 <main+0x13c>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	23c8      	movs	r3, #200	; 0xc8
 8005f0a:	4910      	ldr	r1, [pc, #64]	; (8005f4c <main+0x138>)
 8005f0c:	4804      	ldr	r0, [pc, #16]	; (8005f20 <main+0x10c>)
 8005f0e:	f7fe f9b5 	bl	800427c <HAL_UART_Transmit>
	 	  	  	  HAL_Delay(200);
 8005f12:	20c8      	movs	r0, #200	; 0xc8
 8005f14:	f7fa fbaa 	bl	800066c <HAL_Delay>
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)==GPIO_PIN_SET)
 8005f18:	e7aa      	b.n	8005e70 <main+0x5c>
 8005f1a:	bf00      	nop
 8005f1c:	200002bc 	.word	0x200002bc
 8005f20:	20000384 	.word	0x20000384
 8005f24:	20000218 	.word	0x20000218
 8005f28:	20000264 	.word	0x20000264
 8005f2c:	20000344 	.word	0x20000344
 8005f30:	40020800 	.word	0x40020800
 8005f34:	200002f8 	.word	0x200002f8
 8005f38:	08007344 	.word	0x08007344
 8005f3c:	200002b0 	.word	0x200002b0
 8005f40:	200002f0 	.word	0x200002f0
 8005f44:	200002fc 	.word	0x200002fc
 8005f48:	0800734c 	.word	0x0800734c
 8005f4c:	200002c8 	.word	0x200002c8
 8005f50:	200002f4 	.word	0x200002f4
 8005f54:	20000008 	.word	0x20000008
 8005f58:	0800735c 	.word	0x0800735c

08005f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b0b4      	sub	sp, #208	; 0xd0
 8005f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f62:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f66:	2230      	movs	r2, #48	; 0x30
 8005f68:	2100      	movs	r1, #0
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 fd1a 	bl	80069a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f70:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	605a      	str	r2, [r3, #4]
 8005f7a:	609a      	str	r2, [r3, #8]
 8005f7c:	60da      	str	r2, [r3, #12]
 8005f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f80:	f107 0308 	add.w	r3, r7, #8
 8005f84:	2284      	movs	r2, #132	; 0x84
 8005f86:	2100      	movs	r1, #0
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fd0b 	bl	80069a4 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8005f8e:	f7fc f9c1 	bl	8002314 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f92:	4b39      	ldr	r3, [pc, #228]	; (8006078 <SystemClock_Config+0x11c>)
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	4a38      	ldr	r2, [pc, #224]	; (8006078 <SystemClock_Config+0x11c>)
 8005f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f9e:	4b36      	ldr	r3, [pc, #216]	; (8006078 <SystemClock_Config+0x11c>)
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa6:	607b      	str	r3, [r7, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005faa:	4b34      	ldr	r3, [pc, #208]	; (800607c <SystemClock_Config+0x120>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005fb2:	4a32      	ldr	r2, [pc, #200]	; (800607c <SystemClock_Config+0x120>)
 8005fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	4b30      	ldr	r3, [pc, #192]	; (800607c <SystemClock_Config+0x120>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005fcc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005fda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005fde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005fe2:	2304      	movs	r3, #4
 8005fe4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8005fe8:	2348      	movs	r3, #72	; 0x48
 8005fea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005fee:	2302      	movs	r3, #2
 8005ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ffa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fc f998 	bl	8002334 <HAL_RCC_OscConfig>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800600a:	f000 f897 	bl	800613c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800600e:	230f      	movs	r3, #15
 8006010:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006014:	2302      	movs	r3, #2
 8006016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800601a:	2300      	movs	r3, #0
 800601c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006028:	2300      	movs	r3, #0
 800602a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800602e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006032:	2102      	movs	r1, #2
 8006034:	4618      	mov	r0, r3
 8006036:	f7fc fbed 	bl	8002814 <HAL_RCC_ClockConfig>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8006040:	f000 f87c 	bl	800613c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8006044:	4b0e      	ldr	r3, [pc, #56]	; (8006080 <SystemClock_Config+0x124>)
 8006046:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006048:	2300      	movs	r3, #0
 800604a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800604c:	2300      	movs	r3, #0
 800604e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006050:	2300      	movs	r3, #0
 8006052:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8006054:	2300      	movs	r3, #0
 8006056:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800605a:	f107 0308 	add.w	r3, r7, #8
 800605e:	4618      	mov	r0, r3
 8006060:	f7fc fdcc 	bl	8002bfc <HAL_RCCEx_PeriphCLKConfig>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <SystemClock_Config+0x112>
  {
    Error_Handler();
 800606a:	f000 f867 	bl	800613c <Error_Handler>
  }
}
 800606e:	bf00      	nop
 8006070:	37d0      	adds	r7, #208	; 0xd0
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	40023800 	.word	0x40023800
 800607c:	40007000 	.word	0x40007000
 8006080:	0020c100 	.word	0x0020c100

08006084 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//! przerwanie od USARTA sterujące tymczasowo diodami na płytce
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
    char value2[3];
	char value3[3];
	int value_i1,value_i2,value_i3;
	// HAL_UART_Receive(&huart3, &msg, 12, 100);//odebranie znaku

	value1[0] = msg[1];
 800608c:	4b28      	ldr	r3, [pc, #160]	; (8006130 <HAL_UART_RxCpltCallback+0xac>)
 800608e:	785b      	ldrb	r3, [r3, #1]
 8006090:	743b      	strb	r3, [r7, #16]
	value1[1] = msg[2];
 8006092:	4b27      	ldr	r3, [pc, #156]	; (8006130 <HAL_UART_RxCpltCallback+0xac>)
 8006094:	789b      	ldrb	r3, [r3, #2]
 8006096:	747b      	strb	r3, [r7, #17]
	value1[2] = msg[3];
 8006098:	4b25      	ldr	r3, [pc, #148]	; (8006130 <HAL_UART_RxCpltCallback+0xac>)
 800609a:	78db      	ldrb	r3, [r3, #3]
 800609c:	74bb      	strb	r3, [r7, #18]

	value2[0] = msg[5];
 800609e:	4b24      	ldr	r3, [pc, #144]	; (8006130 <HAL_UART_RxCpltCallback+0xac>)
 80060a0:	795b      	ldrb	r3, [r3, #5]
 80060a2:	733b      	strb	r3, [r7, #12]
	value2[1] = msg[6];
 80060a4:	4b22      	ldr	r3, [pc, #136]	; (8006130 <HAL_UART_RxCpltCallback+0xac>)
 80060a6:	799b      	ldrb	r3, [r3, #6]
 80060a8:	737b      	strb	r3, [r7, #13]
	value2[2] = msg[7];
 80060aa:	4b21      	ldr	r3, [pc, #132]	; (8006130 <HAL_UART_RxCpltCallback+0xac>)
 80060ac:	79db      	ldrb	r3, [r3, #7]
 80060ae:	73bb      	strb	r3, [r7, #14]

	value3[0] = msg[9];
 80060b0:	4b1f      	ldr	r3, [pc, #124]	; (8006130 <HAL_UART_RxCpltCallback+0xac>)
 80060b2:	7a5b      	ldrb	r3, [r3, #9]
 80060b4:	723b      	strb	r3, [r7, #8]
	value3[1] = msg[10];
 80060b6:	4b1e      	ldr	r3, [pc, #120]	; (8006130 <HAL_UART_RxCpltCallback+0xac>)
 80060b8:	7a9b      	ldrb	r3, [r3, #10]
 80060ba:	727b      	strb	r3, [r7, #9]
	value3[2] = msg[11];
 80060bc:	4b1c      	ldr	r3, [pc, #112]	; (8006130 <HAL_UART_RxCpltCallback+0xac>)
 80060be:	7adb      	ldrb	r3, [r3, #11]
 80060c0:	72bb      	strb	r3, [r7, #10]

	value_i1 = 10*(atoi(value1));
 80060c2:	f107 0310 	add.w	r3, r7, #16
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fc3d 	bl	8006946 <atoi>
 80060cc:	4602      	mov	r2, r0
 80060ce:	4613      	mov	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	61fb      	str	r3, [r7, #28]
	value_i2 = 10*(atoi(value2));
 80060d8:	f107 030c 	add.w	r3, r7, #12
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 fc32 	bl	8006946 <atoi>
 80060e2:	4602      	mov	r2, r0
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	61bb      	str	r3, [r7, #24]
	value_i3= 10*(atoi(value3));
 80060ee:	f107 0308 	add.w	r3, r7, #8
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fc27 	bl	8006946 <atoi>
 80060f8:	4602      	mov	r2, r0
 80060fa:	4613      	mov	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	617b      	str	r3, [r7, #20]

__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, value_i1);
 8006104:	4b0b      	ldr	r3, [pc, #44]	; (8006134 <HAL_UART_RxCpltCallback+0xb0>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	635a      	str	r2, [r3, #52]	; 0x34
__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, value_i2);
 800610c:	4b09      	ldr	r3, [pc, #36]	; (8006134 <HAL_UART_RxCpltCallback+0xb0>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	639a      	str	r2, [r3, #56]	; 0x38
__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, value_i3);
 8006114:	4b07      	ldr	r3, [pc, #28]	; (8006134 <HAL_UART_RxCpltCallback+0xb0>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	63da      	str	r2, [r3, #60]	; 0x3c

HAL_UART_Receive_IT(&huart3, msg, 12);
 800611c:	220c      	movs	r2, #12
 800611e:	4904      	ldr	r1, [pc, #16]	; (8006130 <HAL_UART_RxCpltCallback+0xac>)
 8006120:	4805      	ldr	r0, [pc, #20]	; (8006138 <HAL_UART_RxCpltCallback+0xb4>)
 8006122:	f7fe f999 	bl	8004458 <HAL_UART_Receive_IT>
}
 8006126:	bf00      	nop
 8006128:	3720      	adds	r7, #32
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	200002bc 	.word	0x200002bc
 8006134:	20000344 	.word	0x20000344
 8006138:	20000384 	.word	0x20000384

0800613c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006140:	bf00      	nop
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
	...

0800614c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006152:	4b0f      	ldr	r3, [pc, #60]	; (8006190 <HAL_MspInit+0x44>)
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	4a0e      	ldr	r2, [pc, #56]	; (8006190 <HAL_MspInit+0x44>)
 8006158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800615c:	6413      	str	r3, [r2, #64]	; 0x40
 800615e:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <HAL_MspInit+0x44>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006166:	607b      	str	r3, [r7, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800616a:	4b09      	ldr	r3, [pc, #36]	; (8006190 <HAL_MspInit+0x44>)
 800616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616e:	4a08      	ldr	r2, [pc, #32]	; (8006190 <HAL_MspInit+0x44>)
 8006170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006174:	6453      	str	r3, [r2, #68]	; 0x44
 8006176:	4b06      	ldr	r3, [pc, #24]	; (8006190 <HAL_MspInit+0x44>)
 8006178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40023800 	.word	0x40023800

08006194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006194:	b480      	push	{r7}
 8006196:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006198:	bf00      	nop
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80061a2:	b480      	push	{r7}
 80061a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80061a6:	e7fe      	b.n	80061a6 <HardFault_Handler+0x4>

080061a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80061ac:	e7fe      	b.n	80061ac <MemManage_Handler+0x4>

080061ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80061ae:	b480      	push	{r7}
 80061b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80061b2:	e7fe      	b.n	80061b2 <BusFault_Handler+0x4>

080061b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80061b8:	e7fe      	b.n	80061b8 <UsageFault_Handler+0x4>

080061ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80061ba:	b480      	push	{r7}
 80061bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80061be:	bf00      	nop
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80061cc:	bf00      	nop
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80061d6:	b480      	push	{r7}
 80061d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80061da:	bf00      	nop
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80061e8:	f7fa fa20 	bl	800062c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80061ec:	bf00      	nop
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80061f4:	4802      	ldr	r0, [pc, #8]	; (8006200 <I2C1_EV_IRQHandler+0x10>)
 80061f6:	f7fa ffe5 	bl	80011c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80061fa:	bf00      	nop
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20000218 	.word	0x20000218

08006204 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006208:	4802      	ldr	r0, [pc, #8]	; (8006214 <I2C1_ER_IRQHandler+0x10>)
 800620a:	f7fa fff5 	bl	80011f8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800620e:	bf00      	nop
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000218 	.word	0x20000218

08006218 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800621c:	4802      	ldr	r0, [pc, #8]	; (8006228 <I2C2_EV_IRQHandler+0x10>)
 800621e:	f7fa ffd1 	bl	80011c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8006222:	bf00      	nop
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000264 	.word	0x20000264

0800622c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8006230:	4802      	ldr	r0, [pc, #8]	; (800623c <I2C2_ER_IRQHandler+0x10>)
 8006232:	f7fa ffe1 	bl	80011f8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8006236:	bf00      	nop
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20000264 	.word	0x20000264

08006240 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006244:	4802      	ldr	r0, [pc, #8]	; (8006250 <USART3_IRQHandler+0x10>)
 8006246:	f7fe f9a9 	bl	800459c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800624a:	bf00      	nop
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000384 	.word	0x20000384

08006254 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800625c:	4b11      	ldr	r3, [pc, #68]	; (80062a4 <_sbrk+0x50>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d102      	bne.n	800626a <_sbrk+0x16>
		heap_end = &end;
 8006264:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <_sbrk+0x50>)
 8006266:	4a10      	ldr	r2, [pc, #64]	; (80062a8 <_sbrk+0x54>)
 8006268:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800626a:	4b0e      	ldr	r3, [pc, #56]	; (80062a4 <_sbrk+0x50>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006270:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <_sbrk+0x50>)
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4413      	add	r3, r2
 8006278:	466a      	mov	r2, sp
 800627a:	4293      	cmp	r3, r2
 800627c:	d907      	bls.n	800628e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800627e:	f000 fb67 	bl	8006950 <__errno>
 8006282:	4602      	mov	r2, r0
 8006284:	230c      	movs	r3, #12
 8006286:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006288:	f04f 33ff 	mov.w	r3, #4294967295
 800628c:	e006      	b.n	800629c <_sbrk+0x48>
	}

	heap_end += incr;
 800628e:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <_sbrk+0x50>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4413      	add	r3, r2
 8006296:	4a03      	ldr	r2, [pc, #12]	; (80062a4 <_sbrk+0x50>)
 8006298:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800629a:	68fb      	ldr	r3, [r7, #12]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	200001fc 	.word	0x200001fc
 80062a8:	20000810 	.word	0x20000810

080062ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80062b0:	4b15      	ldr	r3, [pc, #84]	; (8006308 <SystemInit+0x5c>)
 80062b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b6:	4a14      	ldr	r2, [pc, #80]	; (8006308 <SystemInit+0x5c>)
 80062b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80062c0:	4b12      	ldr	r3, [pc, #72]	; (800630c <SystemInit+0x60>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a11      	ldr	r2, [pc, #68]	; (800630c <SystemInit+0x60>)
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80062cc:	4b0f      	ldr	r3, [pc, #60]	; (800630c <SystemInit+0x60>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80062d2:	4b0e      	ldr	r3, [pc, #56]	; (800630c <SystemInit+0x60>)
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	490d      	ldr	r1, [pc, #52]	; (800630c <SystemInit+0x60>)
 80062d8:	4b0d      	ldr	r3, [pc, #52]	; (8006310 <SystemInit+0x64>)
 80062da:	4013      	ands	r3, r2
 80062dc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80062de:	4b0b      	ldr	r3, [pc, #44]	; (800630c <SystemInit+0x60>)
 80062e0:	4a0c      	ldr	r2, [pc, #48]	; (8006314 <SystemInit+0x68>)
 80062e2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80062e4:	4b09      	ldr	r3, [pc, #36]	; (800630c <SystemInit+0x60>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a08      	ldr	r2, [pc, #32]	; (800630c <SystemInit+0x60>)
 80062ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80062f0:	4b06      	ldr	r3, [pc, #24]	; (800630c <SystemInit+0x60>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80062f6:	4b04      	ldr	r3, [pc, #16]	; (8006308 <SystemInit+0x5c>)
 80062f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80062fc:	609a      	str	r2, [r3, #8]
#endif
}
 80062fe:	bf00      	nop
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	e000ed00 	.word	0xe000ed00
 800630c:	40023800 	.word	0x40023800
 8006310:	fef6ffff 	.word	0xfef6ffff
 8006314:	24003010 	.word	0x24003010

08006318 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b09a      	sub	sp, #104	; 0x68
 800631c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800631e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	605a      	str	r2, [r3, #4]
 8006328:	609a      	str	r2, [r3, #8]
 800632a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800632c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	605a      	str	r2, [r3, #4]
 8006336:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006338:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	605a      	str	r2, [r3, #4]
 8006342:	609a      	str	r2, [r3, #8]
 8006344:	60da      	str	r2, [r3, #12]
 8006346:	611a      	str	r2, [r3, #16]
 8006348:	615a      	str	r2, [r3, #20]
 800634a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800634c:	1d3b      	adds	r3, r7, #4
 800634e:	222c      	movs	r2, #44	; 0x2c
 8006350:	2100      	movs	r1, #0
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fb26 	bl	80069a4 <memset>

  htim1.Instance = TIM1;
 8006358:	4b50      	ldr	r3, [pc, #320]	; (800649c <MX_TIM1_Init+0x184>)
 800635a:	4a51      	ldr	r2, [pc, #324]	; (80064a0 <MX_TIM1_Init+0x188>)
 800635c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800635e:	4b4f      	ldr	r3, [pc, #316]	; (800649c <MX_TIM1_Init+0x184>)
 8006360:	2247      	movs	r2, #71	; 0x47
 8006362:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006364:	4b4d      	ldr	r3, [pc, #308]	; (800649c <MX_TIM1_Init+0x184>)
 8006366:	2200      	movs	r2, #0
 8006368:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800636a:	4b4c      	ldr	r3, [pc, #304]	; (800649c <MX_TIM1_Init+0x184>)
 800636c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006370:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006372:	4b4a      	ldr	r3, [pc, #296]	; (800649c <MX_TIM1_Init+0x184>)
 8006374:	2200      	movs	r2, #0
 8006376:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006378:	4b48      	ldr	r3, [pc, #288]	; (800649c <MX_TIM1_Init+0x184>)
 800637a:	2200      	movs	r2, #0
 800637c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800637e:	4b47      	ldr	r3, [pc, #284]	; (800649c <MX_TIM1_Init+0x184>)
 8006380:	2200      	movs	r2, #0
 8006382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006384:	4845      	ldr	r0, [pc, #276]	; (800649c <MX_TIM1_Init+0x184>)
 8006386:	f7fd f827 	bl	80033d8 <HAL_TIM_Base_Init>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8006390:	f7ff fed4 	bl	800613c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006398:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800639a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800639e:	4619      	mov	r1, r3
 80063a0:	483e      	ldr	r0, [pc, #248]	; (800649c <MX_TIM1_Init+0x184>)
 80063a2:	f7fd f9cb 	bl	800373c <HAL_TIM_ConfigClockSource>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80063ac:	f7ff fec6 	bl	800613c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80063b0:	483a      	ldr	r0, [pc, #232]	; (800649c <MX_TIM1_Init+0x184>)
 80063b2:	f7fd f83c 	bl	800342e <HAL_TIM_PWM_Init>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80063bc:	f7ff febe 	bl	800613c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063c0:	2300      	movs	r3, #0
 80063c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80063c4:	2300      	movs	r3, #0
 80063c6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063c8:	2300      	movs	r3, #0
 80063ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80063cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80063d0:	4619      	mov	r1, r3
 80063d2:	4832      	ldr	r0, [pc, #200]	; (800649c <MX_TIM1_Init+0x184>)
 80063d4:	f7fd fe2a 	bl	800402c <HAL_TIMEx_MasterConfigSynchronization>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80063de:	f7ff fead 	bl	800613c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063e2:	2360      	movs	r3, #96	; 0x60
 80063e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 80063e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80063ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063ec:	2300      	movs	r3, #0
 80063ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80063f0:	2300      	movs	r3, #0
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80063f8:	2300      	movs	r3, #0
 80063fa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80063fc:	2300      	movs	r3, #0
 80063fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006400:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006404:	2200      	movs	r2, #0
 8006406:	4619      	mov	r1, r3
 8006408:	4824      	ldr	r0, [pc, #144]	; (800649c <MX_TIM1_Init+0x184>)
 800640a:	f7fd f87f 	bl	800350c <HAL_TIM_PWM_ConfigChannel>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8006414:	f7ff fe92 	bl	800613c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006418:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800641c:	2204      	movs	r2, #4
 800641e:	4619      	mov	r1, r3
 8006420:	481e      	ldr	r0, [pc, #120]	; (800649c <MX_TIM1_Init+0x184>)
 8006422:	f7fd f873 	bl	800350c <HAL_TIM_PWM_ConfigChannel>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800642c:	f7ff fe86 	bl	800613c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006430:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006434:	2208      	movs	r2, #8
 8006436:	4619      	mov	r1, r3
 8006438:	4818      	ldr	r0, [pc, #96]	; (800649c <MX_TIM1_Init+0x184>)
 800643a:	f7fd f867 	bl	800350c <HAL_TIM_PWM_ConfigChannel>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8006444:	f7ff fe7a 	bl	800613c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006448:	2300      	movs	r3, #0
 800644a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800644c:	2300      	movs	r3, #0
 800644e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006454:	2300      	movs	r3, #0
 8006456:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006458:	2300      	movs	r3, #0
 800645a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800645c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006460:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006462:	2300      	movs	r3, #0
 8006464:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006466:	2300      	movs	r3, #0
 8006468:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800646a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006470:	2300      	movs	r3, #0
 8006472:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006474:	2300      	movs	r3, #0
 8006476:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006478:	1d3b      	adds	r3, r7, #4
 800647a:	4619      	mov	r1, r3
 800647c:	4807      	ldr	r0, [pc, #28]	; (800649c <MX_TIM1_Init+0x184>)
 800647e:	f7fd fe31 	bl	80040e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8006488:	f7ff fe58 	bl	800613c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800648c:	4803      	ldr	r0, [pc, #12]	; (800649c <MX_TIM1_Init+0x184>)
 800648e:	f000 f8af 	bl	80065f0 <HAL_TIM_MspPostInit>

}
 8006492:	bf00      	nop
 8006494:	3768      	adds	r7, #104	; 0x68
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	20000344 	.word	0x20000344
 80064a0:	40010000 	.word	0x40010000

080064a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08a      	sub	sp, #40	; 0x28
 80064a8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064aa:	f107 031c 	add.w	r3, r7, #28
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	605a      	str	r2, [r3, #4]
 80064b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80064b6:	463b      	mov	r3, r7
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	605a      	str	r2, [r3, #4]
 80064be:	609a      	str	r2, [r3, #8]
 80064c0:	60da      	str	r2, [r3, #12]
 80064c2:	611a      	str	r2, [r3, #16]
 80064c4:	615a      	str	r2, [r3, #20]
 80064c6:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80064c8:	4b27      	ldr	r3, [pc, #156]	; (8006568 <MX_TIM3_Init+0xc4>)
 80064ca:	4a28      	ldr	r2, [pc, #160]	; (800656c <MX_TIM3_Init+0xc8>)
 80064cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80064ce:	4b26      	ldr	r3, [pc, #152]	; (8006568 <MX_TIM3_Init+0xc4>)
 80064d0:	2247      	movs	r2, #71	; 0x47
 80064d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064d4:	4b24      	ldr	r3, [pc, #144]	; (8006568 <MX_TIM3_Init+0xc4>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80064da:	4b23      	ldr	r3, [pc, #140]	; (8006568 <MX_TIM3_Init+0xc4>)
 80064dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80064e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064e2:	4b21      	ldr	r3, [pc, #132]	; (8006568 <MX_TIM3_Init+0xc4>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064e8:	4b1f      	ldr	r3, [pc, #124]	; (8006568 <MX_TIM3_Init+0xc4>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80064ee:	481e      	ldr	r0, [pc, #120]	; (8006568 <MX_TIM3_Init+0xc4>)
 80064f0:	f7fc ff9d 	bl	800342e <HAL_TIM_PWM_Init>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80064fa:	f7ff fe1f 	bl	800613c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064fe:	2300      	movs	r3, #0
 8006500:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006502:	2300      	movs	r3, #0
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006506:	f107 031c 	add.w	r3, r7, #28
 800650a:	4619      	mov	r1, r3
 800650c:	4816      	ldr	r0, [pc, #88]	; (8006568 <MX_TIM3_Init+0xc4>)
 800650e:	f7fd fd8d 	bl	800402c <HAL_TIMEx_MasterConfigSynchronization>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8006518:	f7ff fe10 	bl	800613c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800651c:	2360      	movs	r3, #96	; 0x60
 800651e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006524:	2300      	movs	r3, #0
 8006526:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006528:	2300      	movs	r3, #0
 800652a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800652c:	463b      	mov	r3, r7
 800652e:	2200      	movs	r2, #0
 8006530:	4619      	mov	r1, r3
 8006532:	480d      	ldr	r0, [pc, #52]	; (8006568 <MX_TIM3_Init+0xc4>)
 8006534:	f7fc ffea 	bl	800350c <HAL_TIM_PWM_ConfigChannel>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800653e:	f7ff fdfd 	bl	800613c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006542:	463b      	mov	r3, r7
 8006544:	2204      	movs	r2, #4
 8006546:	4619      	mov	r1, r3
 8006548:	4807      	ldr	r0, [pc, #28]	; (8006568 <MX_TIM3_Init+0xc4>)
 800654a:	f7fc ffdf 	bl	800350c <HAL_TIM_PWM_ConfigChannel>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8006554:	f7ff fdf2 	bl	800613c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8006558:	4803      	ldr	r0, [pc, #12]	; (8006568 <MX_TIM3_Init+0xc4>)
 800655a:	f000 f849 	bl	80065f0 <HAL_TIM_MspPostInit>

}
 800655e:	bf00      	nop
 8006560:	3728      	adds	r7, #40	; 0x28
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20000304 	.word	0x20000304
 800656c:	40000400 	.word	0x40000400

08006570 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a0a      	ldr	r2, [pc, #40]	; (80065a8 <HAL_TIM_Base_MspInit+0x38>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d10b      	bne.n	800659a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006582:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <HAL_TIM_Base_MspInit+0x3c>)
 8006584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006586:	4a09      	ldr	r2, [pc, #36]	; (80065ac <HAL_TIM_Base_MspInit+0x3c>)
 8006588:	f043 0301 	orr.w	r3, r3, #1
 800658c:	6453      	str	r3, [r2, #68]	; 0x44
 800658e:	4b07      	ldr	r3, [pc, #28]	; (80065ac <HAL_TIM_Base_MspInit+0x3c>)
 8006590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800659a:	bf00      	nop
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40010000 	.word	0x40010000
 80065ac:	40023800 	.word	0x40023800

080065b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a0a      	ldr	r2, [pc, #40]	; (80065e8 <HAL_TIM_PWM_MspInit+0x38>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d10b      	bne.n	80065da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80065c2:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <HAL_TIM_PWM_MspInit+0x3c>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	4a09      	ldr	r2, [pc, #36]	; (80065ec <HAL_TIM_PWM_MspInit+0x3c>)
 80065c8:	f043 0302 	orr.w	r3, r3, #2
 80065cc:	6413      	str	r3, [r2, #64]	; 0x40
 80065ce:	4b07      	ldr	r3, [pc, #28]	; (80065ec <HAL_TIM_PWM_MspInit+0x3c>)
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80065da:	bf00      	nop
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40000400 	.word	0x40000400
 80065ec:	40023800 	.word	0x40023800

080065f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08a      	sub	sp, #40	; 0x28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065f8:	f107 0314 	add.w	r3, r7, #20
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	605a      	str	r2, [r3, #4]
 8006602:	609a      	str	r2, [r3, #8]
 8006604:	60da      	str	r2, [r3, #12]
 8006606:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a30      	ldr	r2, [pc, #192]	; (80066d0 <HAL_TIM_MspPostInit+0xe0>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d11d      	bne.n	800664e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006612:	4b30      	ldr	r3, [pc, #192]	; (80066d4 <HAL_TIM_MspPostInit+0xe4>)
 8006614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006616:	4a2f      	ldr	r2, [pc, #188]	; (80066d4 <HAL_TIM_MspPostInit+0xe4>)
 8006618:	f043 0310 	orr.w	r3, r3, #16
 800661c:	6313      	str	r3, [r2, #48]	; 0x30
 800661e:	4b2d      	ldr	r3, [pc, #180]	; (80066d4 <HAL_TIM_MspPostInit+0xe4>)
 8006620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006622:	f003 0310 	and.w	r3, r3, #16
 8006626:	613b      	str	r3, [r7, #16]
 8006628:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 800662a:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800662e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006630:	2302      	movs	r3, #2
 8006632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006634:	2300      	movs	r3, #0
 8006636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006638:	2300      	movs	r3, #0
 800663a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800663c:	2301      	movs	r3, #1
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006640:	f107 0314 	add.w	r3, r7, #20
 8006644:	4619      	mov	r1, r3
 8006646:	4824      	ldr	r0, [pc, #144]	; (80066d8 <HAL_TIM_MspPostInit+0xe8>)
 8006648:	f7fa f966 	bl	8000918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800664c:	e03c      	b.n	80066c8 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM3)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a22      	ldr	r2, [pc, #136]	; (80066dc <HAL_TIM_MspPostInit+0xec>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d137      	bne.n	80066c8 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006658:	4b1e      	ldr	r3, [pc, #120]	; (80066d4 <HAL_TIM_MspPostInit+0xe4>)
 800665a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665c:	4a1d      	ldr	r2, [pc, #116]	; (80066d4 <HAL_TIM_MspPostInit+0xe4>)
 800665e:	f043 0301 	orr.w	r3, r3, #1
 8006662:	6313      	str	r3, [r2, #48]	; 0x30
 8006664:	4b1b      	ldr	r3, [pc, #108]	; (80066d4 <HAL_TIM_MspPostInit+0xe4>)
 8006666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	60fb      	str	r3, [r7, #12]
 800666e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006670:	4b18      	ldr	r3, [pc, #96]	; (80066d4 <HAL_TIM_MspPostInit+0xe4>)
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	4a17      	ldr	r2, [pc, #92]	; (80066d4 <HAL_TIM_MspPostInit+0xe4>)
 8006676:	f043 0304 	orr.w	r3, r3, #4
 800667a:	6313      	str	r3, [r2, #48]	; 0x30
 800667c:	4b15      	ldr	r3, [pc, #84]	; (80066d4 <HAL_TIM_MspPostInit+0xe4>)
 800667e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	60bb      	str	r3, [r7, #8]
 8006686:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006688:	2340      	movs	r3, #64	; 0x40
 800668a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800668c:	2302      	movs	r3, #2
 800668e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006690:	2300      	movs	r3, #0
 8006692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006694:	2300      	movs	r3, #0
 8006696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006698:	2302      	movs	r3, #2
 800669a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800669c:	f107 0314 	add.w	r3, r7, #20
 80066a0:	4619      	mov	r1, r3
 80066a2:	480f      	ldr	r0, [pc, #60]	; (80066e0 <HAL_TIM_MspPostInit+0xf0>)
 80066a4:	f7fa f938 	bl	8000918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80066a8:	2380      	movs	r3, #128	; 0x80
 80066aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066ac:	2302      	movs	r3, #2
 80066ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066b4:	2300      	movs	r3, #0
 80066b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80066b8:	2302      	movs	r3, #2
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066bc:	f107 0314 	add.w	r3, r7, #20
 80066c0:	4619      	mov	r1, r3
 80066c2:	4808      	ldr	r0, [pc, #32]	; (80066e4 <HAL_TIM_MspPostInit+0xf4>)
 80066c4:	f7fa f928 	bl	8000918 <HAL_GPIO_Init>
}
 80066c8:	bf00      	nop
 80066ca:	3728      	adds	r7, #40	; 0x28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40010000 	.word	0x40010000
 80066d4:	40023800 	.word	0x40023800
 80066d8:	40021000 	.word	0x40021000
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40020000 	.word	0x40020000
 80066e4:	40020800 	.word	0x40020800

080066e8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80066ec:	4b14      	ldr	r3, [pc, #80]	; (8006740 <MX_USART3_UART_Init+0x58>)
 80066ee:	4a15      	ldr	r2, [pc, #84]	; (8006744 <MX_USART3_UART_Init+0x5c>)
 80066f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80066f2:	4b13      	ldr	r3, [pc, #76]	; (8006740 <MX_USART3_UART_Init+0x58>)
 80066f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80066f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80066fa:	4b11      	ldr	r3, [pc, #68]	; (8006740 <MX_USART3_UART_Init+0x58>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006700:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <MX_USART3_UART_Init+0x58>)
 8006702:	2200      	movs	r2, #0
 8006704:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006706:	4b0e      	ldr	r3, [pc, #56]	; (8006740 <MX_USART3_UART_Init+0x58>)
 8006708:	2200      	movs	r2, #0
 800670a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800670c:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <MX_USART3_UART_Init+0x58>)
 800670e:	220c      	movs	r2, #12
 8006710:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006712:	4b0b      	ldr	r3, [pc, #44]	; (8006740 <MX_USART3_UART_Init+0x58>)
 8006714:	2200      	movs	r2, #0
 8006716:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006718:	4b09      	ldr	r3, [pc, #36]	; (8006740 <MX_USART3_UART_Init+0x58>)
 800671a:	2200      	movs	r2, #0
 800671c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800671e:	4b08      	ldr	r3, [pc, #32]	; (8006740 <MX_USART3_UART_Init+0x58>)
 8006720:	2200      	movs	r2, #0
 8006722:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <MX_USART3_UART_Init+0x58>)
 8006726:	2200      	movs	r2, #0
 8006728:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800672a:	4805      	ldr	r0, [pc, #20]	; (8006740 <MX_USART3_UART_Init+0x58>)
 800672c:	f7fd fd58 	bl	80041e0 <HAL_UART_Init>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8006736:	f7ff fd01 	bl	800613c <Error_Handler>
  }

}
 800673a:	bf00      	nop
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20000384 	.word	0x20000384
 8006744:	40004800 	.word	0x40004800

08006748 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08a      	sub	sp, #40	; 0x28
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006750:	f107 0314 	add.w	r3, r7, #20
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	605a      	str	r2, [r3, #4]
 800675a:	609a      	str	r2, [r3, #8]
 800675c:	60da      	str	r2, [r3, #12]
 800675e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a1b      	ldr	r2, [pc, #108]	; (80067d4 <HAL_UART_MspInit+0x8c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d130      	bne.n	80067cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800676a:	4b1b      	ldr	r3, [pc, #108]	; (80067d8 <HAL_UART_MspInit+0x90>)
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	4a1a      	ldr	r2, [pc, #104]	; (80067d8 <HAL_UART_MspInit+0x90>)
 8006770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006774:	6413      	str	r3, [r2, #64]	; 0x40
 8006776:	4b18      	ldr	r3, [pc, #96]	; (80067d8 <HAL_UART_MspInit+0x90>)
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800677e:	613b      	str	r3, [r7, #16]
 8006780:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006782:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <HAL_UART_MspInit+0x90>)
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	4a14      	ldr	r2, [pc, #80]	; (80067d8 <HAL_UART_MspInit+0x90>)
 8006788:	f043 0308 	orr.w	r3, r3, #8
 800678c:	6313      	str	r3, [r2, #48]	; 0x30
 800678e:	4b12      	ldr	r3, [pc, #72]	; (80067d8 <HAL_UART_MspInit+0x90>)
 8006790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	60fb      	str	r3, [r7, #12]
 8006798:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800679a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800679e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067a0:	2302      	movs	r3, #2
 80067a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067a4:	2300      	movs	r3, #0
 80067a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067a8:	2303      	movs	r3, #3
 80067aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80067ac:	2307      	movs	r3, #7
 80067ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80067b0:	f107 0314 	add.w	r3, r7, #20
 80067b4:	4619      	mov	r1, r3
 80067b6:	4809      	ldr	r0, [pc, #36]	; (80067dc <HAL_UART_MspInit+0x94>)
 80067b8:	f7fa f8ae 	bl	8000918 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80067bc:	2200      	movs	r2, #0
 80067be:	2100      	movs	r1, #0
 80067c0:	2027      	movs	r0, #39	; 0x27
 80067c2:	f7fa f850 	bl	8000866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80067c6:	2027      	movs	r0, #39	; 0x27
 80067c8:	f7fa f869 	bl	800089e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80067cc:	bf00      	nop
 80067ce:	3728      	adds	r7, #40	; 0x28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	40004800 	.word	0x40004800
 80067d8:	40023800 	.word	0x40023800
 80067dc:	40020c00 	.word	0x40020c00

080067e0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80067e4:	4b14      	ldr	r3, [pc, #80]	; (8006838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80067e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80067ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80067ec:	4b12      	ldr	r3, [pc, #72]	; (8006838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80067ee:	2206      	movs	r2, #6
 80067f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80067f2:	4b11      	ldr	r3, [pc, #68]	; (8006838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80067f4:	2202      	movs	r2, #2
 80067f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80067f8:	4b0f      	ldr	r3, [pc, #60]	; (8006838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80067fe:	4b0e      	ldr	r3, [pc, #56]	; (8006838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006800:	2202      	movs	r2, #2
 8006802:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006804:	4b0c      	ldr	r3, [pc, #48]	; (8006838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006806:	2201      	movs	r2, #1
 8006808:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800680a:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800680c:	2200      	movs	r2, #0
 800680e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006810:	4b09      	ldr	r3, [pc, #36]	; (8006838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006812:	2200      	movs	r2, #0
 8006814:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006816:	4b08      	ldr	r3, [pc, #32]	; (8006838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006818:	2201      	movs	r2, #1
 800681a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800681c:	4b06      	ldr	r3, [pc, #24]	; (8006838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800681e:	2200      	movs	r2, #0
 8006820:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006822:	4805      	ldr	r0, [pc, #20]	; (8006838 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006824:	f7fb fc3a 	bl	800209c <HAL_PCD_Init>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800682e:	f7ff fc85 	bl	800613c <Error_Handler>
  }

}
 8006832:	bf00      	nop
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	20000404 	.word	0x20000404

0800683c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b08a      	sub	sp, #40	; 0x28
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006844:	f107 0314 	add.w	r3, r7, #20
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	605a      	str	r2, [r3, #4]
 800684e:	609a      	str	r2, [r3, #8]
 8006850:	60da      	str	r2, [r3, #12]
 8006852:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800685c:	d141      	bne.n	80068e2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800685e:	4b23      	ldr	r3, [pc, #140]	; (80068ec <HAL_PCD_MspInit+0xb0>)
 8006860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006862:	4a22      	ldr	r2, [pc, #136]	; (80068ec <HAL_PCD_MspInit+0xb0>)
 8006864:	f043 0301 	orr.w	r3, r3, #1
 8006868:	6313      	str	r3, [r2, #48]	; 0x30
 800686a:	4b20      	ldr	r3, [pc, #128]	; (80068ec <HAL_PCD_MspInit+0xb0>)
 800686c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006876:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800687a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800687c:	2302      	movs	r3, #2
 800687e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006880:	2300      	movs	r3, #0
 8006882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006884:	2303      	movs	r3, #3
 8006886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006888:	230a      	movs	r3, #10
 800688a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800688c:	f107 0314 	add.w	r3, r7, #20
 8006890:	4619      	mov	r1, r3
 8006892:	4817      	ldr	r0, [pc, #92]	; (80068f0 <HAL_PCD_MspInit+0xb4>)
 8006894:	f7fa f840 	bl	8000918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800689c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800689e:	2300      	movs	r3, #0
 80068a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80068a6:	f107 0314 	add.w	r3, r7, #20
 80068aa:	4619      	mov	r1, r3
 80068ac:	4810      	ldr	r0, [pc, #64]	; (80068f0 <HAL_PCD_MspInit+0xb4>)
 80068ae:	f7fa f833 	bl	8000918 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80068b2:	4b0e      	ldr	r3, [pc, #56]	; (80068ec <HAL_PCD_MspInit+0xb0>)
 80068b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b6:	4a0d      	ldr	r2, [pc, #52]	; (80068ec <HAL_PCD_MspInit+0xb0>)
 80068b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068bc:	6353      	str	r3, [r2, #52]	; 0x34
 80068be:	4b0b      	ldr	r3, [pc, #44]	; (80068ec <HAL_PCD_MspInit+0xb0>)
 80068c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4b08      	ldr	r3, [pc, #32]	; (80068ec <HAL_PCD_MspInit+0xb0>)
 80068cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ce:	4a07      	ldr	r2, [pc, #28]	; (80068ec <HAL_PCD_MspInit+0xb0>)
 80068d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068d4:	6453      	str	r3, [r2, #68]	; 0x44
 80068d6:	4b05      	ldr	r3, [pc, #20]	; (80068ec <HAL_PCD_MspInit+0xb0>)
 80068d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068de:	60bb      	str	r3, [r7, #8]
 80068e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80068e2:	bf00      	nop
 80068e4:	3728      	adds	r7, #40	; 0x28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	40023800 	.word	0x40023800
 80068f0:	40020000 	.word	0x40020000

080068f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80068f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800692c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80068f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80068fa:	e003      	b.n	8006904 <LoopCopyDataInit>

080068fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80068fc:	4b0c      	ldr	r3, [pc, #48]	; (8006930 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80068fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006900:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006902:	3104      	adds	r1, #4

08006904 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006904:	480b      	ldr	r0, [pc, #44]	; (8006934 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006906:	4b0c      	ldr	r3, [pc, #48]	; (8006938 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006908:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800690a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800690c:	d3f6      	bcc.n	80068fc <CopyDataInit>
  ldr  r2, =_sbss
 800690e:	4a0b      	ldr	r2, [pc, #44]	; (800693c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006910:	e002      	b.n	8006918 <LoopFillZerobss>

08006912 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006912:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006914:	f842 3b04 	str.w	r3, [r2], #4

08006918 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006918:	4b09      	ldr	r3, [pc, #36]	; (8006940 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800691a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800691c:	d3f9      	bcc.n	8006912 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800691e:	f7ff fcc5 	bl	80062ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006922:	f000 f81b 	bl	800695c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006926:	f7ff fa75 	bl	8005e14 <main>
  bx  lr    
 800692a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800692c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8006930:	080074cc 	.word	0x080074cc
  ldr  r0, =_sdata
 8006934:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006938:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800693c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006940:	2000080c 	.word	0x2000080c

08006944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006944:	e7fe      	b.n	8006944 <ADC_IRQHandler>

08006946 <atoi>:
 8006946:	220a      	movs	r2, #10
 8006948:	2100      	movs	r1, #0
 800694a:	f000 b8cf 	b.w	8006aec <strtol>
	...

08006950 <__errno>:
 8006950:	4b01      	ldr	r3, [pc, #4]	; (8006958 <__errno+0x8>)
 8006952:	6818      	ldr	r0, [r3, #0]
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	20000010 	.word	0x20000010

0800695c <__libc_init_array>:
 800695c:	b570      	push	{r4, r5, r6, lr}
 800695e:	4e0d      	ldr	r6, [pc, #52]	; (8006994 <__libc_init_array+0x38>)
 8006960:	4c0d      	ldr	r4, [pc, #52]	; (8006998 <__libc_init_array+0x3c>)
 8006962:	1ba4      	subs	r4, r4, r6
 8006964:	10a4      	asrs	r4, r4, #2
 8006966:	2500      	movs	r5, #0
 8006968:	42a5      	cmp	r5, r4
 800696a:	d109      	bne.n	8006980 <__libc_init_array+0x24>
 800696c:	4e0b      	ldr	r6, [pc, #44]	; (800699c <__libc_init_array+0x40>)
 800696e:	4c0c      	ldr	r4, [pc, #48]	; (80069a0 <__libc_init_array+0x44>)
 8006970:	f000 fcdc 	bl	800732c <_init>
 8006974:	1ba4      	subs	r4, r4, r6
 8006976:	10a4      	asrs	r4, r4, #2
 8006978:	2500      	movs	r5, #0
 800697a:	42a5      	cmp	r5, r4
 800697c:	d105      	bne.n	800698a <__libc_init_array+0x2e>
 800697e:	bd70      	pop	{r4, r5, r6, pc}
 8006980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006984:	4798      	blx	r3
 8006986:	3501      	adds	r5, #1
 8006988:	e7ee      	b.n	8006968 <__libc_init_array+0xc>
 800698a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800698e:	4798      	blx	r3
 8006990:	3501      	adds	r5, #1
 8006992:	e7f2      	b.n	800697a <__libc_init_array+0x1e>
 8006994:	080074c4 	.word	0x080074c4
 8006998:	080074c4 	.word	0x080074c4
 800699c:	080074c4 	.word	0x080074c4
 80069a0:	080074c8 	.word	0x080074c8

080069a4 <memset>:
 80069a4:	4402      	add	r2, r0
 80069a6:	4603      	mov	r3, r0
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d100      	bne.n	80069ae <memset+0xa>
 80069ac:	4770      	bx	lr
 80069ae:	f803 1b01 	strb.w	r1, [r3], #1
 80069b2:	e7f9      	b.n	80069a8 <memset+0x4>

080069b4 <siprintf>:
 80069b4:	b40e      	push	{r1, r2, r3}
 80069b6:	b500      	push	{lr}
 80069b8:	b09c      	sub	sp, #112	; 0x70
 80069ba:	ab1d      	add	r3, sp, #116	; 0x74
 80069bc:	9002      	str	r0, [sp, #8]
 80069be:	9006      	str	r0, [sp, #24]
 80069c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069c4:	4809      	ldr	r0, [pc, #36]	; (80069ec <siprintf+0x38>)
 80069c6:	9107      	str	r1, [sp, #28]
 80069c8:	9104      	str	r1, [sp, #16]
 80069ca:	4909      	ldr	r1, [pc, #36]	; (80069f0 <siprintf+0x3c>)
 80069cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80069d0:	9105      	str	r1, [sp, #20]
 80069d2:	6800      	ldr	r0, [r0, #0]
 80069d4:	9301      	str	r3, [sp, #4]
 80069d6:	a902      	add	r1, sp, #8
 80069d8:	f000 f90e 	bl	8006bf8 <_svfiprintf_r>
 80069dc:	9b02      	ldr	r3, [sp, #8]
 80069de:	2200      	movs	r2, #0
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	b01c      	add	sp, #112	; 0x70
 80069e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069e8:	b003      	add	sp, #12
 80069ea:	4770      	bx	lr
 80069ec:	20000010 	.word	0x20000010
 80069f0:	ffff0208 	.word	0xffff0208

080069f4 <_strtol_l.isra.0>:
 80069f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f8:	4680      	mov	r8, r0
 80069fa:	4689      	mov	r9, r1
 80069fc:	4692      	mov	sl, r2
 80069fe:	461e      	mov	r6, r3
 8006a00:	460f      	mov	r7, r1
 8006a02:	463d      	mov	r5, r7
 8006a04:	9808      	ldr	r0, [sp, #32]
 8006a06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a0a:	f000 f885 	bl	8006b18 <__locale_ctype_ptr_l>
 8006a0e:	4420      	add	r0, r4
 8006a10:	7843      	ldrb	r3, [r0, #1]
 8006a12:	f013 0308 	ands.w	r3, r3, #8
 8006a16:	d132      	bne.n	8006a7e <_strtol_l.isra.0+0x8a>
 8006a18:	2c2d      	cmp	r4, #45	; 0x2d
 8006a1a:	d132      	bne.n	8006a82 <_strtol_l.isra.0+0x8e>
 8006a1c:	787c      	ldrb	r4, [r7, #1]
 8006a1e:	1cbd      	adds	r5, r7, #2
 8006a20:	2201      	movs	r2, #1
 8006a22:	2e00      	cmp	r6, #0
 8006a24:	d05d      	beq.n	8006ae2 <_strtol_l.isra.0+0xee>
 8006a26:	2e10      	cmp	r6, #16
 8006a28:	d109      	bne.n	8006a3e <_strtol_l.isra.0+0x4a>
 8006a2a:	2c30      	cmp	r4, #48	; 0x30
 8006a2c:	d107      	bne.n	8006a3e <_strtol_l.isra.0+0x4a>
 8006a2e:	782b      	ldrb	r3, [r5, #0]
 8006a30:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a34:	2b58      	cmp	r3, #88	; 0x58
 8006a36:	d14f      	bne.n	8006ad8 <_strtol_l.isra.0+0xe4>
 8006a38:	786c      	ldrb	r4, [r5, #1]
 8006a3a:	2610      	movs	r6, #16
 8006a3c:	3502      	adds	r5, #2
 8006a3e:	2a00      	cmp	r2, #0
 8006a40:	bf14      	ite	ne
 8006a42:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006a46:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006a4a:	2700      	movs	r7, #0
 8006a4c:	fbb1 fcf6 	udiv	ip, r1, r6
 8006a50:	4638      	mov	r0, r7
 8006a52:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006a56:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006a5a:	2b09      	cmp	r3, #9
 8006a5c:	d817      	bhi.n	8006a8e <_strtol_l.isra.0+0x9a>
 8006a5e:	461c      	mov	r4, r3
 8006a60:	42a6      	cmp	r6, r4
 8006a62:	dd23      	ble.n	8006aac <_strtol_l.isra.0+0xb8>
 8006a64:	1c7b      	adds	r3, r7, #1
 8006a66:	d007      	beq.n	8006a78 <_strtol_l.isra.0+0x84>
 8006a68:	4584      	cmp	ip, r0
 8006a6a:	d31c      	bcc.n	8006aa6 <_strtol_l.isra.0+0xb2>
 8006a6c:	d101      	bne.n	8006a72 <_strtol_l.isra.0+0x7e>
 8006a6e:	45a6      	cmp	lr, r4
 8006a70:	db19      	blt.n	8006aa6 <_strtol_l.isra.0+0xb2>
 8006a72:	fb00 4006 	mla	r0, r0, r6, r4
 8006a76:	2701      	movs	r7, #1
 8006a78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a7c:	e7eb      	b.n	8006a56 <_strtol_l.isra.0+0x62>
 8006a7e:	462f      	mov	r7, r5
 8006a80:	e7bf      	b.n	8006a02 <_strtol_l.isra.0+0xe>
 8006a82:	2c2b      	cmp	r4, #43	; 0x2b
 8006a84:	bf04      	itt	eq
 8006a86:	1cbd      	addeq	r5, r7, #2
 8006a88:	787c      	ldrbeq	r4, [r7, #1]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	e7c9      	b.n	8006a22 <_strtol_l.isra.0+0x2e>
 8006a8e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006a92:	2b19      	cmp	r3, #25
 8006a94:	d801      	bhi.n	8006a9a <_strtol_l.isra.0+0xa6>
 8006a96:	3c37      	subs	r4, #55	; 0x37
 8006a98:	e7e2      	b.n	8006a60 <_strtol_l.isra.0+0x6c>
 8006a9a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006a9e:	2b19      	cmp	r3, #25
 8006aa0:	d804      	bhi.n	8006aac <_strtol_l.isra.0+0xb8>
 8006aa2:	3c57      	subs	r4, #87	; 0x57
 8006aa4:	e7dc      	b.n	8006a60 <_strtol_l.isra.0+0x6c>
 8006aa6:	f04f 37ff 	mov.w	r7, #4294967295
 8006aaa:	e7e5      	b.n	8006a78 <_strtol_l.isra.0+0x84>
 8006aac:	1c7b      	adds	r3, r7, #1
 8006aae:	d108      	bne.n	8006ac2 <_strtol_l.isra.0+0xce>
 8006ab0:	2322      	movs	r3, #34	; 0x22
 8006ab2:	f8c8 3000 	str.w	r3, [r8]
 8006ab6:	4608      	mov	r0, r1
 8006ab8:	f1ba 0f00 	cmp.w	sl, #0
 8006abc:	d107      	bne.n	8006ace <_strtol_l.isra.0+0xda>
 8006abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac2:	b102      	cbz	r2, 8006ac6 <_strtol_l.isra.0+0xd2>
 8006ac4:	4240      	negs	r0, r0
 8006ac6:	f1ba 0f00 	cmp.w	sl, #0
 8006aca:	d0f8      	beq.n	8006abe <_strtol_l.isra.0+0xca>
 8006acc:	b10f      	cbz	r7, 8006ad2 <_strtol_l.isra.0+0xde>
 8006ace:	f105 39ff 	add.w	r9, r5, #4294967295
 8006ad2:	f8ca 9000 	str.w	r9, [sl]
 8006ad6:	e7f2      	b.n	8006abe <_strtol_l.isra.0+0xca>
 8006ad8:	2430      	movs	r4, #48	; 0x30
 8006ada:	2e00      	cmp	r6, #0
 8006adc:	d1af      	bne.n	8006a3e <_strtol_l.isra.0+0x4a>
 8006ade:	2608      	movs	r6, #8
 8006ae0:	e7ad      	b.n	8006a3e <_strtol_l.isra.0+0x4a>
 8006ae2:	2c30      	cmp	r4, #48	; 0x30
 8006ae4:	d0a3      	beq.n	8006a2e <_strtol_l.isra.0+0x3a>
 8006ae6:	260a      	movs	r6, #10
 8006ae8:	e7a9      	b.n	8006a3e <_strtol_l.isra.0+0x4a>
	...

08006aec <strtol>:
 8006aec:	4b08      	ldr	r3, [pc, #32]	; (8006b10 <strtol+0x24>)
 8006aee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006af0:	681c      	ldr	r4, [r3, #0]
 8006af2:	4d08      	ldr	r5, [pc, #32]	; (8006b14 <strtol+0x28>)
 8006af4:	6a23      	ldr	r3, [r4, #32]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bf08      	it	eq
 8006afa:	462b      	moveq	r3, r5
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	4613      	mov	r3, r2
 8006b00:	460a      	mov	r2, r1
 8006b02:	4601      	mov	r1, r0
 8006b04:	4620      	mov	r0, r4
 8006b06:	f7ff ff75 	bl	80069f4 <_strtol_l.isra.0>
 8006b0a:	b003      	add	sp, #12
 8006b0c:	bd30      	pop	{r4, r5, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000010 	.word	0x20000010
 8006b14:	20000074 	.word	0x20000074

08006b18 <__locale_ctype_ptr_l>:
 8006b18:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006b1c:	4770      	bx	lr

08006b1e <__ascii_mbtowc>:
 8006b1e:	b082      	sub	sp, #8
 8006b20:	b901      	cbnz	r1, 8006b24 <__ascii_mbtowc+0x6>
 8006b22:	a901      	add	r1, sp, #4
 8006b24:	b142      	cbz	r2, 8006b38 <__ascii_mbtowc+0x1a>
 8006b26:	b14b      	cbz	r3, 8006b3c <__ascii_mbtowc+0x1e>
 8006b28:	7813      	ldrb	r3, [r2, #0]
 8006b2a:	600b      	str	r3, [r1, #0]
 8006b2c:	7812      	ldrb	r2, [r2, #0]
 8006b2e:	1c10      	adds	r0, r2, #0
 8006b30:	bf18      	it	ne
 8006b32:	2001      	movne	r0, #1
 8006b34:	b002      	add	sp, #8
 8006b36:	4770      	bx	lr
 8006b38:	4610      	mov	r0, r2
 8006b3a:	e7fb      	b.n	8006b34 <__ascii_mbtowc+0x16>
 8006b3c:	f06f 0001 	mvn.w	r0, #1
 8006b40:	e7f8      	b.n	8006b34 <__ascii_mbtowc+0x16>

08006b42 <__ssputs_r>:
 8006b42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b46:	688e      	ldr	r6, [r1, #8]
 8006b48:	429e      	cmp	r6, r3
 8006b4a:	4682      	mov	sl, r0
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	4690      	mov	r8, r2
 8006b50:	4699      	mov	r9, r3
 8006b52:	d837      	bhi.n	8006bc4 <__ssputs_r+0x82>
 8006b54:	898a      	ldrh	r2, [r1, #12]
 8006b56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b5a:	d031      	beq.n	8006bc0 <__ssputs_r+0x7e>
 8006b5c:	6825      	ldr	r5, [r4, #0]
 8006b5e:	6909      	ldr	r1, [r1, #16]
 8006b60:	1a6f      	subs	r7, r5, r1
 8006b62:	6965      	ldr	r5, [r4, #20]
 8006b64:	2302      	movs	r3, #2
 8006b66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b6a:	fb95 f5f3 	sdiv	r5, r5, r3
 8006b6e:	f109 0301 	add.w	r3, r9, #1
 8006b72:	443b      	add	r3, r7
 8006b74:	429d      	cmp	r5, r3
 8006b76:	bf38      	it	cc
 8006b78:	461d      	movcc	r5, r3
 8006b7a:	0553      	lsls	r3, r2, #21
 8006b7c:	d530      	bpl.n	8006be0 <__ssputs_r+0x9e>
 8006b7e:	4629      	mov	r1, r5
 8006b80:	f000 fb3a 	bl	80071f8 <_malloc_r>
 8006b84:	4606      	mov	r6, r0
 8006b86:	b950      	cbnz	r0, 8006b9e <__ssputs_r+0x5c>
 8006b88:	230c      	movs	r3, #12
 8006b8a:	f8ca 3000 	str.w	r3, [sl]
 8006b8e:	89a3      	ldrh	r3, [r4, #12]
 8006b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b94:	81a3      	strh	r3, [r4, #12]
 8006b96:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b9e:	463a      	mov	r2, r7
 8006ba0:	6921      	ldr	r1, [r4, #16]
 8006ba2:	f000 fab6 	bl	8007112 <memcpy>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb0:	81a3      	strh	r3, [r4, #12]
 8006bb2:	6126      	str	r6, [r4, #16]
 8006bb4:	6165      	str	r5, [r4, #20]
 8006bb6:	443e      	add	r6, r7
 8006bb8:	1bed      	subs	r5, r5, r7
 8006bba:	6026      	str	r6, [r4, #0]
 8006bbc:	60a5      	str	r5, [r4, #8]
 8006bbe:	464e      	mov	r6, r9
 8006bc0:	454e      	cmp	r6, r9
 8006bc2:	d900      	bls.n	8006bc6 <__ssputs_r+0x84>
 8006bc4:	464e      	mov	r6, r9
 8006bc6:	4632      	mov	r2, r6
 8006bc8:	4641      	mov	r1, r8
 8006bca:	6820      	ldr	r0, [r4, #0]
 8006bcc:	f000 faac 	bl	8007128 <memmove>
 8006bd0:	68a3      	ldr	r3, [r4, #8]
 8006bd2:	1b9b      	subs	r3, r3, r6
 8006bd4:	60a3      	str	r3, [r4, #8]
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	441e      	add	r6, r3
 8006bda:	6026      	str	r6, [r4, #0]
 8006bdc:	2000      	movs	r0, #0
 8006bde:	e7dc      	b.n	8006b9a <__ssputs_r+0x58>
 8006be0:	462a      	mov	r2, r5
 8006be2:	f000 fb63 	bl	80072ac <_realloc_r>
 8006be6:	4606      	mov	r6, r0
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d1e2      	bne.n	8006bb2 <__ssputs_r+0x70>
 8006bec:	6921      	ldr	r1, [r4, #16]
 8006bee:	4650      	mov	r0, sl
 8006bf0:	f000 fab4 	bl	800715c <_free_r>
 8006bf4:	e7c8      	b.n	8006b88 <__ssputs_r+0x46>
	...

08006bf8 <_svfiprintf_r>:
 8006bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfc:	461d      	mov	r5, r3
 8006bfe:	898b      	ldrh	r3, [r1, #12]
 8006c00:	061f      	lsls	r7, r3, #24
 8006c02:	b09d      	sub	sp, #116	; 0x74
 8006c04:	4680      	mov	r8, r0
 8006c06:	460c      	mov	r4, r1
 8006c08:	4616      	mov	r6, r2
 8006c0a:	d50f      	bpl.n	8006c2c <_svfiprintf_r+0x34>
 8006c0c:	690b      	ldr	r3, [r1, #16]
 8006c0e:	b96b      	cbnz	r3, 8006c2c <_svfiprintf_r+0x34>
 8006c10:	2140      	movs	r1, #64	; 0x40
 8006c12:	f000 faf1 	bl	80071f8 <_malloc_r>
 8006c16:	6020      	str	r0, [r4, #0]
 8006c18:	6120      	str	r0, [r4, #16]
 8006c1a:	b928      	cbnz	r0, 8006c28 <_svfiprintf_r+0x30>
 8006c1c:	230c      	movs	r3, #12
 8006c1e:	f8c8 3000 	str.w	r3, [r8]
 8006c22:	f04f 30ff 	mov.w	r0, #4294967295
 8006c26:	e0c8      	b.n	8006dba <_svfiprintf_r+0x1c2>
 8006c28:	2340      	movs	r3, #64	; 0x40
 8006c2a:	6163      	str	r3, [r4, #20]
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c30:	2320      	movs	r3, #32
 8006c32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c36:	2330      	movs	r3, #48	; 0x30
 8006c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c3c:	9503      	str	r5, [sp, #12]
 8006c3e:	f04f 0b01 	mov.w	fp, #1
 8006c42:	4637      	mov	r7, r6
 8006c44:	463d      	mov	r5, r7
 8006c46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c4a:	b10b      	cbz	r3, 8006c50 <_svfiprintf_r+0x58>
 8006c4c:	2b25      	cmp	r3, #37	; 0x25
 8006c4e:	d13e      	bne.n	8006cce <_svfiprintf_r+0xd6>
 8006c50:	ebb7 0a06 	subs.w	sl, r7, r6
 8006c54:	d00b      	beq.n	8006c6e <_svfiprintf_r+0x76>
 8006c56:	4653      	mov	r3, sl
 8006c58:	4632      	mov	r2, r6
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	4640      	mov	r0, r8
 8006c5e:	f7ff ff70 	bl	8006b42 <__ssputs_r>
 8006c62:	3001      	adds	r0, #1
 8006c64:	f000 80a4 	beq.w	8006db0 <_svfiprintf_r+0x1b8>
 8006c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c6a:	4453      	add	r3, sl
 8006c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6e:	783b      	ldrb	r3, [r7, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 809d 	beq.w	8006db0 <_svfiprintf_r+0x1b8>
 8006c76:	2300      	movs	r3, #0
 8006c78:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c80:	9304      	str	r3, [sp, #16]
 8006c82:	9307      	str	r3, [sp, #28]
 8006c84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c88:	931a      	str	r3, [sp, #104]	; 0x68
 8006c8a:	462f      	mov	r7, r5
 8006c8c:	2205      	movs	r2, #5
 8006c8e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006c92:	4850      	ldr	r0, [pc, #320]	; (8006dd4 <_svfiprintf_r+0x1dc>)
 8006c94:	f7f9 fabc 	bl	8000210 <memchr>
 8006c98:	9b04      	ldr	r3, [sp, #16]
 8006c9a:	b9d0      	cbnz	r0, 8006cd2 <_svfiprintf_r+0xda>
 8006c9c:	06d9      	lsls	r1, r3, #27
 8006c9e:	bf44      	itt	mi
 8006ca0:	2220      	movmi	r2, #32
 8006ca2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ca6:	071a      	lsls	r2, r3, #28
 8006ca8:	bf44      	itt	mi
 8006caa:	222b      	movmi	r2, #43	; 0x2b
 8006cac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006cb0:	782a      	ldrb	r2, [r5, #0]
 8006cb2:	2a2a      	cmp	r2, #42	; 0x2a
 8006cb4:	d015      	beq.n	8006ce2 <_svfiprintf_r+0xea>
 8006cb6:	9a07      	ldr	r2, [sp, #28]
 8006cb8:	462f      	mov	r7, r5
 8006cba:	2000      	movs	r0, #0
 8006cbc:	250a      	movs	r5, #10
 8006cbe:	4639      	mov	r1, r7
 8006cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cc4:	3b30      	subs	r3, #48	; 0x30
 8006cc6:	2b09      	cmp	r3, #9
 8006cc8:	d94d      	bls.n	8006d66 <_svfiprintf_r+0x16e>
 8006cca:	b1b8      	cbz	r0, 8006cfc <_svfiprintf_r+0x104>
 8006ccc:	e00f      	b.n	8006cee <_svfiprintf_r+0xf6>
 8006cce:	462f      	mov	r7, r5
 8006cd0:	e7b8      	b.n	8006c44 <_svfiprintf_r+0x4c>
 8006cd2:	4a40      	ldr	r2, [pc, #256]	; (8006dd4 <_svfiprintf_r+0x1dc>)
 8006cd4:	1a80      	subs	r0, r0, r2
 8006cd6:	fa0b f000 	lsl.w	r0, fp, r0
 8006cda:	4318      	orrs	r0, r3
 8006cdc:	9004      	str	r0, [sp, #16]
 8006cde:	463d      	mov	r5, r7
 8006ce0:	e7d3      	b.n	8006c8a <_svfiprintf_r+0x92>
 8006ce2:	9a03      	ldr	r2, [sp, #12]
 8006ce4:	1d11      	adds	r1, r2, #4
 8006ce6:	6812      	ldr	r2, [r2, #0]
 8006ce8:	9103      	str	r1, [sp, #12]
 8006cea:	2a00      	cmp	r2, #0
 8006cec:	db01      	blt.n	8006cf2 <_svfiprintf_r+0xfa>
 8006cee:	9207      	str	r2, [sp, #28]
 8006cf0:	e004      	b.n	8006cfc <_svfiprintf_r+0x104>
 8006cf2:	4252      	negs	r2, r2
 8006cf4:	f043 0302 	orr.w	r3, r3, #2
 8006cf8:	9207      	str	r2, [sp, #28]
 8006cfa:	9304      	str	r3, [sp, #16]
 8006cfc:	783b      	ldrb	r3, [r7, #0]
 8006cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8006d00:	d10c      	bne.n	8006d1c <_svfiprintf_r+0x124>
 8006d02:	787b      	ldrb	r3, [r7, #1]
 8006d04:	2b2a      	cmp	r3, #42	; 0x2a
 8006d06:	d133      	bne.n	8006d70 <_svfiprintf_r+0x178>
 8006d08:	9b03      	ldr	r3, [sp, #12]
 8006d0a:	1d1a      	adds	r2, r3, #4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	9203      	str	r2, [sp, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	bfb8      	it	lt
 8006d14:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d18:	3702      	adds	r7, #2
 8006d1a:	9305      	str	r3, [sp, #20]
 8006d1c:	4d2e      	ldr	r5, [pc, #184]	; (8006dd8 <_svfiprintf_r+0x1e0>)
 8006d1e:	7839      	ldrb	r1, [r7, #0]
 8006d20:	2203      	movs	r2, #3
 8006d22:	4628      	mov	r0, r5
 8006d24:	f7f9 fa74 	bl	8000210 <memchr>
 8006d28:	b138      	cbz	r0, 8006d3a <_svfiprintf_r+0x142>
 8006d2a:	2340      	movs	r3, #64	; 0x40
 8006d2c:	1b40      	subs	r0, r0, r5
 8006d2e:	fa03 f000 	lsl.w	r0, r3, r0
 8006d32:	9b04      	ldr	r3, [sp, #16]
 8006d34:	4303      	orrs	r3, r0
 8006d36:	3701      	adds	r7, #1
 8006d38:	9304      	str	r3, [sp, #16]
 8006d3a:	7839      	ldrb	r1, [r7, #0]
 8006d3c:	4827      	ldr	r0, [pc, #156]	; (8006ddc <_svfiprintf_r+0x1e4>)
 8006d3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d42:	2206      	movs	r2, #6
 8006d44:	1c7e      	adds	r6, r7, #1
 8006d46:	f7f9 fa63 	bl	8000210 <memchr>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d038      	beq.n	8006dc0 <_svfiprintf_r+0x1c8>
 8006d4e:	4b24      	ldr	r3, [pc, #144]	; (8006de0 <_svfiprintf_r+0x1e8>)
 8006d50:	bb13      	cbnz	r3, 8006d98 <_svfiprintf_r+0x1a0>
 8006d52:	9b03      	ldr	r3, [sp, #12]
 8006d54:	3307      	adds	r3, #7
 8006d56:	f023 0307 	bic.w	r3, r3, #7
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	9303      	str	r3, [sp, #12]
 8006d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d60:	444b      	add	r3, r9
 8006d62:	9309      	str	r3, [sp, #36]	; 0x24
 8006d64:	e76d      	b.n	8006c42 <_svfiprintf_r+0x4a>
 8006d66:	fb05 3202 	mla	r2, r5, r2, r3
 8006d6a:	2001      	movs	r0, #1
 8006d6c:	460f      	mov	r7, r1
 8006d6e:	e7a6      	b.n	8006cbe <_svfiprintf_r+0xc6>
 8006d70:	2300      	movs	r3, #0
 8006d72:	3701      	adds	r7, #1
 8006d74:	9305      	str	r3, [sp, #20]
 8006d76:	4619      	mov	r1, r3
 8006d78:	250a      	movs	r5, #10
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d80:	3a30      	subs	r2, #48	; 0x30
 8006d82:	2a09      	cmp	r2, #9
 8006d84:	d903      	bls.n	8006d8e <_svfiprintf_r+0x196>
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0c8      	beq.n	8006d1c <_svfiprintf_r+0x124>
 8006d8a:	9105      	str	r1, [sp, #20]
 8006d8c:	e7c6      	b.n	8006d1c <_svfiprintf_r+0x124>
 8006d8e:	fb05 2101 	mla	r1, r5, r1, r2
 8006d92:	2301      	movs	r3, #1
 8006d94:	4607      	mov	r7, r0
 8006d96:	e7f0      	b.n	8006d7a <_svfiprintf_r+0x182>
 8006d98:	ab03      	add	r3, sp, #12
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	4622      	mov	r2, r4
 8006d9e:	4b11      	ldr	r3, [pc, #68]	; (8006de4 <_svfiprintf_r+0x1ec>)
 8006da0:	a904      	add	r1, sp, #16
 8006da2:	4640      	mov	r0, r8
 8006da4:	f3af 8000 	nop.w
 8006da8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006dac:	4681      	mov	r9, r0
 8006dae:	d1d6      	bne.n	8006d5e <_svfiprintf_r+0x166>
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	065b      	lsls	r3, r3, #25
 8006db4:	f53f af35 	bmi.w	8006c22 <_svfiprintf_r+0x2a>
 8006db8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dba:	b01d      	add	sp, #116	; 0x74
 8006dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc0:	ab03      	add	r3, sp, #12
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <_svfiprintf_r+0x1ec>)
 8006dc8:	a904      	add	r1, sp, #16
 8006dca:	4640      	mov	r0, r8
 8006dcc:	f000 f882 	bl	8006ed4 <_printf_i>
 8006dd0:	e7ea      	b.n	8006da8 <_svfiprintf_r+0x1b0>
 8006dd2:	bf00      	nop
 8006dd4:	08007386 	.word	0x08007386
 8006dd8:	0800738c 	.word	0x0800738c
 8006ddc:	08007390 	.word	0x08007390
 8006de0:	00000000 	.word	0x00000000
 8006de4:	08006b43 	.word	0x08006b43

08006de8 <_printf_common>:
 8006de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dec:	4691      	mov	r9, r2
 8006dee:	461f      	mov	r7, r3
 8006df0:	688a      	ldr	r2, [r1, #8]
 8006df2:	690b      	ldr	r3, [r1, #16]
 8006df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	bfb8      	it	lt
 8006dfc:	4613      	movlt	r3, r2
 8006dfe:	f8c9 3000 	str.w	r3, [r9]
 8006e02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e06:	4606      	mov	r6, r0
 8006e08:	460c      	mov	r4, r1
 8006e0a:	b112      	cbz	r2, 8006e12 <_printf_common+0x2a>
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	f8c9 3000 	str.w	r3, [r9]
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	0699      	lsls	r1, r3, #26
 8006e16:	bf42      	ittt	mi
 8006e18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006e1c:	3302      	addmi	r3, #2
 8006e1e:	f8c9 3000 	strmi.w	r3, [r9]
 8006e22:	6825      	ldr	r5, [r4, #0]
 8006e24:	f015 0506 	ands.w	r5, r5, #6
 8006e28:	d107      	bne.n	8006e3a <_printf_common+0x52>
 8006e2a:	f104 0a19 	add.w	sl, r4, #25
 8006e2e:	68e3      	ldr	r3, [r4, #12]
 8006e30:	f8d9 2000 	ldr.w	r2, [r9]
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	42ab      	cmp	r3, r5
 8006e38:	dc28      	bgt.n	8006e8c <_printf_common+0xa4>
 8006e3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006e3e:	6822      	ldr	r2, [r4, #0]
 8006e40:	3300      	adds	r3, #0
 8006e42:	bf18      	it	ne
 8006e44:	2301      	movne	r3, #1
 8006e46:	0692      	lsls	r2, r2, #26
 8006e48:	d42d      	bmi.n	8006ea6 <_printf_common+0xbe>
 8006e4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e4e:	4639      	mov	r1, r7
 8006e50:	4630      	mov	r0, r6
 8006e52:	47c0      	blx	r8
 8006e54:	3001      	adds	r0, #1
 8006e56:	d020      	beq.n	8006e9a <_printf_common+0xb2>
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	68e5      	ldr	r5, [r4, #12]
 8006e5c:	f8d9 2000 	ldr.w	r2, [r9]
 8006e60:	f003 0306 	and.w	r3, r3, #6
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	bf08      	it	eq
 8006e68:	1aad      	subeq	r5, r5, r2
 8006e6a:	68a3      	ldr	r3, [r4, #8]
 8006e6c:	6922      	ldr	r2, [r4, #16]
 8006e6e:	bf0c      	ite	eq
 8006e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e74:	2500      	movne	r5, #0
 8006e76:	4293      	cmp	r3, r2
 8006e78:	bfc4      	itt	gt
 8006e7a:	1a9b      	subgt	r3, r3, r2
 8006e7c:	18ed      	addgt	r5, r5, r3
 8006e7e:	f04f 0900 	mov.w	r9, #0
 8006e82:	341a      	adds	r4, #26
 8006e84:	454d      	cmp	r5, r9
 8006e86:	d11a      	bne.n	8006ebe <_printf_common+0xd6>
 8006e88:	2000      	movs	r0, #0
 8006e8a:	e008      	b.n	8006e9e <_printf_common+0xb6>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	4652      	mov	r2, sl
 8006e90:	4639      	mov	r1, r7
 8006e92:	4630      	mov	r0, r6
 8006e94:	47c0      	blx	r8
 8006e96:	3001      	adds	r0, #1
 8006e98:	d103      	bne.n	8006ea2 <_printf_common+0xba>
 8006e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea2:	3501      	adds	r5, #1
 8006ea4:	e7c3      	b.n	8006e2e <_printf_common+0x46>
 8006ea6:	18e1      	adds	r1, r4, r3
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	2030      	movs	r0, #48	; 0x30
 8006eac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006eb0:	4422      	add	r2, r4
 8006eb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006eb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006eba:	3302      	adds	r3, #2
 8006ebc:	e7c5      	b.n	8006e4a <_printf_common+0x62>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	4639      	mov	r1, r7
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	47c0      	blx	r8
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d0e6      	beq.n	8006e9a <_printf_common+0xb2>
 8006ecc:	f109 0901 	add.w	r9, r9, #1
 8006ed0:	e7d8      	b.n	8006e84 <_printf_common+0x9c>
	...

08006ed4 <_printf_i>:
 8006ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ed8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006edc:	460c      	mov	r4, r1
 8006ede:	7e09      	ldrb	r1, [r1, #24]
 8006ee0:	b085      	sub	sp, #20
 8006ee2:	296e      	cmp	r1, #110	; 0x6e
 8006ee4:	4617      	mov	r7, r2
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	4698      	mov	r8, r3
 8006eea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006eec:	f000 80b3 	beq.w	8007056 <_printf_i+0x182>
 8006ef0:	d822      	bhi.n	8006f38 <_printf_i+0x64>
 8006ef2:	2963      	cmp	r1, #99	; 0x63
 8006ef4:	d036      	beq.n	8006f64 <_printf_i+0x90>
 8006ef6:	d80a      	bhi.n	8006f0e <_printf_i+0x3a>
 8006ef8:	2900      	cmp	r1, #0
 8006efa:	f000 80b9 	beq.w	8007070 <_printf_i+0x19c>
 8006efe:	2958      	cmp	r1, #88	; 0x58
 8006f00:	f000 8083 	beq.w	800700a <_printf_i+0x136>
 8006f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006f0c:	e032      	b.n	8006f74 <_printf_i+0xa0>
 8006f0e:	2964      	cmp	r1, #100	; 0x64
 8006f10:	d001      	beq.n	8006f16 <_printf_i+0x42>
 8006f12:	2969      	cmp	r1, #105	; 0x69
 8006f14:	d1f6      	bne.n	8006f04 <_printf_i+0x30>
 8006f16:	6820      	ldr	r0, [r4, #0]
 8006f18:	6813      	ldr	r3, [r2, #0]
 8006f1a:	0605      	lsls	r5, r0, #24
 8006f1c:	f103 0104 	add.w	r1, r3, #4
 8006f20:	d52a      	bpl.n	8006f78 <_printf_i+0xa4>
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6011      	str	r1, [r2, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	da03      	bge.n	8006f32 <_printf_i+0x5e>
 8006f2a:	222d      	movs	r2, #45	; 0x2d
 8006f2c:	425b      	negs	r3, r3
 8006f2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006f32:	486f      	ldr	r0, [pc, #444]	; (80070f0 <_printf_i+0x21c>)
 8006f34:	220a      	movs	r2, #10
 8006f36:	e039      	b.n	8006fac <_printf_i+0xd8>
 8006f38:	2973      	cmp	r1, #115	; 0x73
 8006f3a:	f000 809d 	beq.w	8007078 <_printf_i+0x1a4>
 8006f3e:	d808      	bhi.n	8006f52 <_printf_i+0x7e>
 8006f40:	296f      	cmp	r1, #111	; 0x6f
 8006f42:	d020      	beq.n	8006f86 <_printf_i+0xb2>
 8006f44:	2970      	cmp	r1, #112	; 0x70
 8006f46:	d1dd      	bne.n	8006f04 <_printf_i+0x30>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	f043 0320 	orr.w	r3, r3, #32
 8006f4e:	6023      	str	r3, [r4, #0]
 8006f50:	e003      	b.n	8006f5a <_printf_i+0x86>
 8006f52:	2975      	cmp	r1, #117	; 0x75
 8006f54:	d017      	beq.n	8006f86 <_printf_i+0xb2>
 8006f56:	2978      	cmp	r1, #120	; 0x78
 8006f58:	d1d4      	bne.n	8006f04 <_printf_i+0x30>
 8006f5a:	2378      	movs	r3, #120	; 0x78
 8006f5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f60:	4864      	ldr	r0, [pc, #400]	; (80070f4 <_printf_i+0x220>)
 8006f62:	e055      	b.n	8007010 <_printf_i+0x13c>
 8006f64:	6813      	ldr	r3, [r2, #0]
 8006f66:	1d19      	adds	r1, r3, #4
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6011      	str	r1, [r2, #0]
 8006f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f74:	2301      	movs	r3, #1
 8006f76:	e08c      	b.n	8007092 <_printf_i+0x1be>
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6011      	str	r1, [r2, #0]
 8006f7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f80:	bf18      	it	ne
 8006f82:	b21b      	sxthne	r3, r3
 8006f84:	e7cf      	b.n	8006f26 <_printf_i+0x52>
 8006f86:	6813      	ldr	r3, [r2, #0]
 8006f88:	6825      	ldr	r5, [r4, #0]
 8006f8a:	1d18      	adds	r0, r3, #4
 8006f8c:	6010      	str	r0, [r2, #0]
 8006f8e:	0628      	lsls	r0, r5, #24
 8006f90:	d501      	bpl.n	8006f96 <_printf_i+0xc2>
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	e002      	b.n	8006f9c <_printf_i+0xc8>
 8006f96:	0668      	lsls	r0, r5, #25
 8006f98:	d5fb      	bpl.n	8006f92 <_printf_i+0xbe>
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	4854      	ldr	r0, [pc, #336]	; (80070f0 <_printf_i+0x21c>)
 8006f9e:	296f      	cmp	r1, #111	; 0x6f
 8006fa0:	bf14      	ite	ne
 8006fa2:	220a      	movne	r2, #10
 8006fa4:	2208      	moveq	r2, #8
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fac:	6865      	ldr	r5, [r4, #4]
 8006fae:	60a5      	str	r5, [r4, #8]
 8006fb0:	2d00      	cmp	r5, #0
 8006fb2:	f2c0 8095 	blt.w	80070e0 <_printf_i+0x20c>
 8006fb6:	6821      	ldr	r1, [r4, #0]
 8006fb8:	f021 0104 	bic.w	r1, r1, #4
 8006fbc:	6021      	str	r1, [r4, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d13d      	bne.n	800703e <_printf_i+0x16a>
 8006fc2:	2d00      	cmp	r5, #0
 8006fc4:	f040 808e 	bne.w	80070e4 <_printf_i+0x210>
 8006fc8:	4665      	mov	r5, ip
 8006fca:	2a08      	cmp	r2, #8
 8006fcc:	d10b      	bne.n	8006fe6 <_printf_i+0x112>
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	07db      	lsls	r3, r3, #31
 8006fd2:	d508      	bpl.n	8006fe6 <_printf_i+0x112>
 8006fd4:	6923      	ldr	r3, [r4, #16]
 8006fd6:	6862      	ldr	r2, [r4, #4]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	bfde      	ittt	le
 8006fdc:	2330      	movle	r3, #48	; 0x30
 8006fde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fe2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006fe6:	ebac 0305 	sub.w	r3, ip, r5
 8006fea:	6123      	str	r3, [r4, #16]
 8006fec:	f8cd 8000 	str.w	r8, [sp]
 8006ff0:	463b      	mov	r3, r7
 8006ff2:	aa03      	add	r2, sp, #12
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f7ff fef6 	bl	8006de8 <_printf_common>
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	d14d      	bne.n	800709c <_printf_i+0x1c8>
 8007000:	f04f 30ff 	mov.w	r0, #4294967295
 8007004:	b005      	add	sp, #20
 8007006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800700a:	4839      	ldr	r0, [pc, #228]	; (80070f0 <_printf_i+0x21c>)
 800700c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007010:	6813      	ldr	r3, [r2, #0]
 8007012:	6821      	ldr	r1, [r4, #0]
 8007014:	1d1d      	adds	r5, r3, #4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6015      	str	r5, [r2, #0]
 800701a:	060a      	lsls	r2, r1, #24
 800701c:	d50b      	bpl.n	8007036 <_printf_i+0x162>
 800701e:	07ca      	lsls	r2, r1, #31
 8007020:	bf44      	itt	mi
 8007022:	f041 0120 	orrmi.w	r1, r1, #32
 8007026:	6021      	strmi	r1, [r4, #0]
 8007028:	b91b      	cbnz	r3, 8007032 <_printf_i+0x15e>
 800702a:	6822      	ldr	r2, [r4, #0]
 800702c:	f022 0220 	bic.w	r2, r2, #32
 8007030:	6022      	str	r2, [r4, #0]
 8007032:	2210      	movs	r2, #16
 8007034:	e7b7      	b.n	8006fa6 <_printf_i+0xd2>
 8007036:	064d      	lsls	r5, r1, #25
 8007038:	bf48      	it	mi
 800703a:	b29b      	uxthmi	r3, r3
 800703c:	e7ef      	b.n	800701e <_printf_i+0x14a>
 800703e:	4665      	mov	r5, ip
 8007040:	fbb3 f1f2 	udiv	r1, r3, r2
 8007044:	fb02 3311 	mls	r3, r2, r1, r3
 8007048:	5cc3      	ldrb	r3, [r0, r3]
 800704a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800704e:	460b      	mov	r3, r1
 8007050:	2900      	cmp	r1, #0
 8007052:	d1f5      	bne.n	8007040 <_printf_i+0x16c>
 8007054:	e7b9      	b.n	8006fca <_printf_i+0xf6>
 8007056:	6813      	ldr	r3, [r2, #0]
 8007058:	6825      	ldr	r5, [r4, #0]
 800705a:	6961      	ldr	r1, [r4, #20]
 800705c:	1d18      	adds	r0, r3, #4
 800705e:	6010      	str	r0, [r2, #0]
 8007060:	0628      	lsls	r0, r5, #24
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	d501      	bpl.n	800706a <_printf_i+0x196>
 8007066:	6019      	str	r1, [r3, #0]
 8007068:	e002      	b.n	8007070 <_printf_i+0x19c>
 800706a:	066a      	lsls	r2, r5, #25
 800706c:	d5fb      	bpl.n	8007066 <_printf_i+0x192>
 800706e:	8019      	strh	r1, [r3, #0]
 8007070:	2300      	movs	r3, #0
 8007072:	6123      	str	r3, [r4, #16]
 8007074:	4665      	mov	r5, ip
 8007076:	e7b9      	b.n	8006fec <_printf_i+0x118>
 8007078:	6813      	ldr	r3, [r2, #0]
 800707a:	1d19      	adds	r1, r3, #4
 800707c:	6011      	str	r1, [r2, #0]
 800707e:	681d      	ldr	r5, [r3, #0]
 8007080:	6862      	ldr	r2, [r4, #4]
 8007082:	2100      	movs	r1, #0
 8007084:	4628      	mov	r0, r5
 8007086:	f7f9 f8c3 	bl	8000210 <memchr>
 800708a:	b108      	cbz	r0, 8007090 <_printf_i+0x1bc>
 800708c:	1b40      	subs	r0, r0, r5
 800708e:	6060      	str	r0, [r4, #4]
 8007090:	6863      	ldr	r3, [r4, #4]
 8007092:	6123      	str	r3, [r4, #16]
 8007094:	2300      	movs	r3, #0
 8007096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800709a:	e7a7      	b.n	8006fec <_printf_i+0x118>
 800709c:	6923      	ldr	r3, [r4, #16]
 800709e:	462a      	mov	r2, r5
 80070a0:	4639      	mov	r1, r7
 80070a2:	4630      	mov	r0, r6
 80070a4:	47c0      	blx	r8
 80070a6:	3001      	adds	r0, #1
 80070a8:	d0aa      	beq.n	8007000 <_printf_i+0x12c>
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	079b      	lsls	r3, r3, #30
 80070ae:	d413      	bmi.n	80070d8 <_printf_i+0x204>
 80070b0:	68e0      	ldr	r0, [r4, #12]
 80070b2:	9b03      	ldr	r3, [sp, #12]
 80070b4:	4298      	cmp	r0, r3
 80070b6:	bfb8      	it	lt
 80070b8:	4618      	movlt	r0, r3
 80070ba:	e7a3      	b.n	8007004 <_printf_i+0x130>
 80070bc:	2301      	movs	r3, #1
 80070be:	464a      	mov	r2, r9
 80070c0:	4639      	mov	r1, r7
 80070c2:	4630      	mov	r0, r6
 80070c4:	47c0      	blx	r8
 80070c6:	3001      	adds	r0, #1
 80070c8:	d09a      	beq.n	8007000 <_printf_i+0x12c>
 80070ca:	3501      	adds	r5, #1
 80070cc:	68e3      	ldr	r3, [r4, #12]
 80070ce:	9a03      	ldr	r2, [sp, #12]
 80070d0:	1a9b      	subs	r3, r3, r2
 80070d2:	42ab      	cmp	r3, r5
 80070d4:	dcf2      	bgt.n	80070bc <_printf_i+0x1e8>
 80070d6:	e7eb      	b.n	80070b0 <_printf_i+0x1dc>
 80070d8:	2500      	movs	r5, #0
 80070da:	f104 0919 	add.w	r9, r4, #25
 80070de:	e7f5      	b.n	80070cc <_printf_i+0x1f8>
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1ac      	bne.n	800703e <_printf_i+0x16a>
 80070e4:	7803      	ldrb	r3, [r0, #0]
 80070e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070ee:	e76c      	b.n	8006fca <_printf_i+0xf6>
 80070f0:	08007397 	.word	0x08007397
 80070f4:	080073a8 	.word	0x080073a8

080070f8 <__ascii_wctomb>:
 80070f8:	b149      	cbz	r1, 800710e <__ascii_wctomb+0x16>
 80070fa:	2aff      	cmp	r2, #255	; 0xff
 80070fc:	bf85      	ittet	hi
 80070fe:	238a      	movhi	r3, #138	; 0x8a
 8007100:	6003      	strhi	r3, [r0, #0]
 8007102:	700a      	strbls	r2, [r1, #0]
 8007104:	f04f 30ff 	movhi.w	r0, #4294967295
 8007108:	bf98      	it	ls
 800710a:	2001      	movls	r0, #1
 800710c:	4770      	bx	lr
 800710e:	4608      	mov	r0, r1
 8007110:	4770      	bx	lr

08007112 <memcpy>:
 8007112:	b510      	push	{r4, lr}
 8007114:	1e43      	subs	r3, r0, #1
 8007116:	440a      	add	r2, r1
 8007118:	4291      	cmp	r1, r2
 800711a:	d100      	bne.n	800711e <memcpy+0xc>
 800711c:	bd10      	pop	{r4, pc}
 800711e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007126:	e7f7      	b.n	8007118 <memcpy+0x6>

08007128 <memmove>:
 8007128:	4288      	cmp	r0, r1
 800712a:	b510      	push	{r4, lr}
 800712c:	eb01 0302 	add.w	r3, r1, r2
 8007130:	d807      	bhi.n	8007142 <memmove+0x1a>
 8007132:	1e42      	subs	r2, r0, #1
 8007134:	4299      	cmp	r1, r3
 8007136:	d00a      	beq.n	800714e <memmove+0x26>
 8007138:	f811 4b01 	ldrb.w	r4, [r1], #1
 800713c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007140:	e7f8      	b.n	8007134 <memmove+0xc>
 8007142:	4283      	cmp	r3, r0
 8007144:	d9f5      	bls.n	8007132 <memmove+0xa>
 8007146:	1881      	adds	r1, r0, r2
 8007148:	1ad2      	subs	r2, r2, r3
 800714a:	42d3      	cmn	r3, r2
 800714c:	d100      	bne.n	8007150 <memmove+0x28>
 800714e:	bd10      	pop	{r4, pc}
 8007150:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007154:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007158:	e7f7      	b.n	800714a <memmove+0x22>
	...

0800715c <_free_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4605      	mov	r5, r0
 8007160:	2900      	cmp	r1, #0
 8007162:	d045      	beq.n	80071f0 <_free_r+0x94>
 8007164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007168:	1f0c      	subs	r4, r1, #4
 800716a:	2b00      	cmp	r3, #0
 800716c:	bfb8      	it	lt
 800716e:	18e4      	addlt	r4, r4, r3
 8007170:	f000 f8d2 	bl	8007318 <__malloc_lock>
 8007174:	4a1f      	ldr	r2, [pc, #124]	; (80071f4 <_free_r+0x98>)
 8007176:	6813      	ldr	r3, [r2, #0]
 8007178:	4610      	mov	r0, r2
 800717a:	b933      	cbnz	r3, 800718a <_free_r+0x2e>
 800717c:	6063      	str	r3, [r4, #4]
 800717e:	6014      	str	r4, [r2, #0]
 8007180:	4628      	mov	r0, r5
 8007182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007186:	f000 b8c8 	b.w	800731a <__malloc_unlock>
 800718a:	42a3      	cmp	r3, r4
 800718c:	d90c      	bls.n	80071a8 <_free_r+0x4c>
 800718e:	6821      	ldr	r1, [r4, #0]
 8007190:	1862      	adds	r2, r4, r1
 8007192:	4293      	cmp	r3, r2
 8007194:	bf04      	itt	eq
 8007196:	681a      	ldreq	r2, [r3, #0]
 8007198:	685b      	ldreq	r3, [r3, #4]
 800719a:	6063      	str	r3, [r4, #4]
 800719c:	bf04      	itt	eq
 800719e:	1852      	addeq	r2, r2, r1
 80071a0:	6022      	streq	r2, [r4, #0]
 80071a2:	6004      	str	r4, [r0, #0]
 80071a4:	e7ec      	b.n	8007180 <_free_r+0x24>
 80071a6:	4613      	mov	r3, r2
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	b10a      	cbz	r2, 80071b0 <_free_r+0x54>
 80071ac:	42a2      	cmp	r2, r4
 80071ae:	d9fa      	bls.n	80071a6 <_free_r+0x4a>
 80071b0:	6819      	ldr	r1, [r3, #0]
 80071b2:	1858      	adds	r0, r3, r1
 80071b4:	42a0      	cmp	r0, r4
 80071b6:	d10b      	bne.n	80071d0 <_free_r+0x74>
 80071b8:	6820      	ldr	r0, [r4, #0]
 80071ba:	4401      	add	r1, r0
 80071bc:	1858      	adds	r0, r3, r1
 80071be:	4282      	cmp	r2, r0
 80071c0:	6019      	str	r1, [r3, #0]
 80071c2:	d1dd      	bne.n	8007180 <_free_r+0x24>
 80071c4:	6810      	ldr	r0, [r2, #0]
 80071c6:	6852      	ldr	r2, [r2, #4]
 80071c8:	605a      	str	r2, [r3, #4]
 80071ca:	4401      	add	r1, r0
 80071cc:	6019      	str	r1, [r3, #0]
 80071ce:	e7d7      	b.n	8007180 <_free_r+0x24>
 80071d0:	d902      	bls.n	80071d8 <_free_r+0x7c>
 80071d2:	230c      	movs	r3, #12
 80071d4:	602b      	str	r3, [r5, #0]
 80071d6:	e7d3      	b.n	8007180 <_free_r+0x24>
 80071d8:	6820      	ldr	r0, [r4, #0]
 80071da:	1821      	adds	r1, r4, r0
 80071dc:	428a      	cmp	r2, r1
 80071de:	bf04      	itt	eq
 80071e0:	6811      	ldreq	r1, [r2, #0]
 80071e2:	6852      	ldreq	r2, [r2, #4]
 80071e4:	6062      	str	r2, [r4, #4]
 80071e6:	bf04      	itt	eq
 80071e8:	1809      	addeq	r1, r1, r0
 80071ea:	6021      	streq	r1, [r4, #0]
 80071ec:	605c      	str	r4, [r3, #4]
 80071ee:	e7c7      	b.n	8007180 <_free_r+0x24>
 80071f0:	bd38      	pop	{r3, r4, r5, pc}
 80071f2:	bf00      	nop
 80071f4:	20000200 	.word	0x20000200

080071f8 <_malloc_r>:
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	1ccd      	adds	r5, r1, #3
 80071fc:	f025 0503 	bic.w	r5, r5, #3
 8007200:	3508      	adds	r5, #8
 8007202:	2d0c      	cmp	r5, #12
 8007204:	bf38      	it	cc
 8007206:	250c      	movcc	r5, #12
 8007208:	2d00      	cmp	r5, #0
 800720a:	4606      	mov	r6, r0
 800720c:	db01      	blt.n	8007212 <_malloc_r+0x1a>
 800720e:	42a9      	cmp	r1, r5
 8007210:	d903      	bls.n	800721a <_malloc_r+0x22>
 8007212:	230c      	movs	r3, #12
 8007214:	6033      	str	r3, [r6, #0]
 8007216:	2000      	movs	r0, #0
 8007218:	bd70      	pop	{r4, r5, r6, pc}
 800721a:	f000 f87d 	bl	8007318 <__malloc_lock>
 800721e:	4a21      	ldr	r2, [pc, #132]	; (80072a4 <_malloc_r+0xac>)
 8007220:	6814      	ldr	r4, [r2, #0]
 8007222:	4621      	mov	r1, r4
 8007224:	b991      	cbnz	r1, 800724c <_malloc_r+0x54>
 8007226:	4c20      	ldr	r4, [pc, #128]	; (80072a8 <_malloc_r+0xb0>)
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	b91b      	cbnz	r3, 8007234 <_malloc_r+0x3c>
 800722c:	4630      	mov	r0, r6
 800722e:	f000 f863 	bl	80072f8 <_sbrk_r>
 8007232:	6020      	str	r0, [r4, #0]
 8007234:	4629      	mov	r1, r5
 8007236:	4630      	mov	r0, r6
 8007238:	f000 f85e 	bl	80072f8 <_sbrk_r>
 800723c:	1c43      	adds	r3, r0, #1
 800723e:	d124      	bne.n	800728a <_malloc_r+0x92>
 8007240:	230c      	movs	r3, #12
 8007242:	6033      	str	r3, [r6, #0]
 8007244:	4630      	mov	r0, r6
 8007246:	f000 f868 	bl	800731a <__malloc_unlock>
 800724a:	e7e4      	b.n	8007216 <_malloc_r+0x1e>
 800724c:	680b      	ldr	r3, [r1, #0]
 800724e:	1b5b      	subs	r3, r3, r5
 8007250:	d418      	bmi.n	8007284 <_malloc_r+0x8c>
 8007252:	2b0b      	cmp	r3, #11
 8007254:	d90f      	bls.n	8007276 <_malloc_r+0x7e>
 8007256:	600b      	str	r3, [r1, #0]
 8007258:	50cd      	str	r5, [r1, r3]
 800725a:	18cc      	adds	r4, r1, r3
 800725c:	4630      	mov	r0, r6
 800725e:	f000 f85c 	bl	800731a <__malloc_unlock>
 8007262:	f104 000b 	add.w	r0, r4, #11
 8007266:	1d23      	adds	r3, r4, #4
 8007268:	f020 0007 	bic.w	r0, r0, #7
 800726c:	1ac3      	subs	r3, r0, r3
 800726e:	d0d3      	beq.n	8007218 <_malloc_r+0x20>
 8007270:	425a      	negs	r2, r3
 8007272:	50e2      	str	r2, [r4, r3]
 8007274:	e7d0      	b.n	8007218 <_malloc_r+0x20>
 8007276:	428c      	cmp	r4, r1
 8007278:	684b      	ldr	r3, [r1, #4]
 800727a:	bf16      	itet	ne
 800727c:	6063      	strne	r3, [r4, #4]
 800727e:	6013      	streq	r3, [r2, #0]
 8007280:	460c      	movne	r4, r1
 8007282:	e7eb      	b.n	800725c <_malloc_r+0x64>
 8007284:	460c      	mov	r4, r1
 8007286:	6849      	ldr	r1, [r1, #4]
 8007288:	e7cc      	b.n	8007224 <_malloc_r+0x2c>
 800728a:	1cc4      	adds	r4, r0, #3
 800728c:	f024 0403 	bic.w	r4, r4, #3
 8007290:	42a0      	cmp	r0, r4
 8007292:	d005      	beq.n	80072a0 <_malloc_r+0xa8>
 8007294:	1a21      	subs	r1, r4, r0
 8007296:	4630      	mov	r0, r6
 8007298:	f000 f82e 	bl	80072f8 <_sbrk_r>
 800729c:	3001      	adds	r0, #1
 800729e:	d0cf      	beq.n	8007240 <_malloc_r+0x48>
 80072a0:	6025      	str	r5, [r4, #0]
 80072a2:	e7db      	b.n	800725c <_malloc_r+0x64>
 80072a4:	20000200 	.word	0x20000200
 80072a8:	20000204 	.word	0x20000204

080072ac <_realloc_r>:
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ae:	4607      	mov	r7, r0
 80072b0:	4614      	mov	r4, r2
 80072b2:	460e      	mov	r6, r1
 80072b4:	b921      	cbnz	r1, 80072c0 <_realloc_r+0x14>
 80072b6:	4611      	mov	r1, r2
 80072b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80072bc:	f7ff bf9c 	b.w	80071f8 <_malloc_r>
 80072c0:	b922      	cbnz	r2, 80072cc <_realloc_r+0x20>
 80072c2:	f7ff ff4b 	bl	800715c <_free_r>
 80072c6:	4625      	mov	r5, r4
 80072c8:	4628      	mov	r0, r5
 80072ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072cc:	f000 f826 	bl	800731c <_malloc_usable_size_r>
 80072d0:	42a0      	cmp	r0, r4
 80072d2:	d20f      	bcs.n	80072f4 <_realloc_r+0x48>
 80072d4:	4621      	mov	r1, r4
 80072d6:	4638      	mov	r0, r7
 80072d8:	f7ff ff8e 	bl	80071f8 <_malloc_r>
 80072dc:	4605      	mov	r5, r0
 80072de:	2800      	cmp	r0, #0
 80072e0:	d0f2      	beq.n	80072c8 <_realloc_r+0x1c>
 80072e2:	4631      	mov	r1, r6
 80072e4:	4622      	mov	r2, r4
 80072e6:	f7ff ff14 	bl	8007112 <memcpy>
 80072ea:	4631      	mov	r1, r6
 80072ec:	4638      	mov	r0, r7
 80072ee:	f7ff ff35 	bl	800715c <_free_r>
 80072f2:	e7e9      	b.n	80072c8 <_realloc_r+0x1c>
 80072f4:	4635      	mov	r5, r6
 80072f6:	e7e7      	b.n	80072c8 <_realloc_r+0x1c>

080072f8 <_sbrk_r>:
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	4c06      	ldr	r4, [pc, #24]	; (8007314 <_sbrk_r+0x1c>)
 80072fc:	2300      	movs	r3, #0
 80072fe:	4605      	mov	r5, r0
 8007300:	4608      	mov	r0, r1
 8007302:	6023      	str	r3, [r4, #0]
 8007304:	f7fe ffa6 	bl	8006254 <_sbrk>
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	d102      	bne.n	8007312 <_sbrk_r+0x1a>
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	b103      	cbz	r3, 8007312 <_sbrk_r+0x1a>
 8007310:	602b      	str	r3, [r5, #0]
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	20000808 	.word	0x20000808

08007318 <__malloc_lock>:
 8007318:	4770      	bx	lr

0800731a <__malloc_unlock>:
 800731a:	4770      	bx	lr

0800731c <_malloc_usable_size_r>:
 800731c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007320:	1f18      	subs	r0, r3, #4
 8007322:	2b00      	cmp	r3, #0
 8007324:	bfbc      	itt	lt
 8007326:	580b      	ldrlt	r3, [r1, r0]
 8007328:	18c0      	addlt	r0, r0, r3
 800732a:	4770      	bx	lr

0800732c <_init>:
 800732c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732e:	bf00      	nop
 8007330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007332:	bc08      	pop	{r3}
 8007334:	469e      	mov	lr, r3
 8007336:	4770      	bx	lr

08007338 <_fini>:
 8007338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733a:	bf00      	nop
 800733c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800733e:	bc08      	pop	{r3}
 8007340:	469e      	mov	lr, r3
 8007342:	4770      	bx	lr
