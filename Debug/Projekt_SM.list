
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dc0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005f90  08005f90  00015f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ffc  08005ffc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006004  08006004  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800600c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  20000074  08006080  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08006080  00020620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012402  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a0c  00000000  00000000  000324a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e88  00000000  00000000  00034eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d10  00000000  00000000  00035d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000262c4  00000000  00000000  00036a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e199  00000000  00000000  0005cd14  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e59a0  00000000  00000000  0006aead  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015084d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd0  00000000  00000000  001508c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005f78 	.word	0x08005f78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08005f78 	.word	0x08005f78

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f94b 	bl	8000850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 f806 	bl	80005cc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005c0:	f004 fe8c 	bl	80052dc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_InitTick+0x54>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <HAL_InitTick+0x58>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4619      	mov	r1, r3
 80005de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f965 	bl	80008ba <HAL_SYSTICK_Config>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e00e      	b.n	8000618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b0f      	cmp	r3, #15
 80005fe:	d80a      	bhi.n	8000616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000600:	2200      	movs	r2, #0
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	f04f 30ff 	mov.w	r0, #4294967295
 8000608:	f000 f92d 	bl	8000866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800060c:	4a06      	ldr	r2, [pc, #24]	; (8000628 <HAL_InitTick+0x5c>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000612:	2300      	movs	r3, #0
 8000614:	e000      	b.n	8000618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000000c 	.word	0x2000000c
 8000624:	20000004 	.word	0x20000004
 8000628:	20000000 	.word	0x20000000

0800062c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_IncTick+0x20>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_IncTick+0x24>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4413      	add	r3, r2
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <HAL_IncTick+0x24>)
 800063e:	6013      	str	r3, [r2, #0]
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000004 	.word	0x20000004
 8000650:	2000009c 	.word	0x2000009c

08000654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return uwTick;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <HAL_GetTick+0x14>)
 800065a:	681b      	ldr	r3, [r3, #0]
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	2000009c 	.word	0x2000009c

0800066c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000674:	f7ff ffee 	bl	8000654 <HAL_GetTick>
 8000678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000684:	d005      	beq.n	8000692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <HAL_Delay+0x40>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	461a      	mov	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4413      	add	r3, r2
 8000690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000692:	bf00      	nop
 8000694:	f7ff ffde 	bl	8000654 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d8f7      	bhi.n	8000694 <HAL_Delay+0x28>
  {
  }
}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000004 	.word	0x20000004

080006b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <__NVIC_SetPriorityGrouping+0x40>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006da:	4313      	orrs	r3, r2
 80006dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <__NVIC_SetPriorityGrouping+0x40>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	60d3      	str	r3, [r2, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00
 80006f4:	05fa0000 	.word	0x05fa0000

080006f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <__NVIC_GetPriorityGrouping+0x18>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	0a1b      	lsrs	r3, r3, #8
 8000702:	f003 0307 	and.w	r3, r3, #7
}
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	2b00      	cmp	r3, #0
 8000724:	db0b      	blt.n	800073e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	f003 021f 	and.w	r2, r3, #31
 800072c:	4907      	ldr	r1, [pc, #28]	; (800074c <__NVIC_EnableIRQ+0x38>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	095b      	lsrs	r3, r3, #5
 8000734:	2001      	movs	r0, #1
 8000736:	fa00 f202 	lsl.w	r2, r0, r2
 800073a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000e100 	.word	0xe000e100

08000750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	db0a      	blt.n	800077a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	; (800079c <__NVIC_SetPriority+0x4c>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000778:	e00a      	b.n	8000790 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4908      	ldr	r1, [pc, #32]	; (80007a0 <__NVIC_SetPriority+0x50>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	3b04      	subs	r3, #4
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	440b      	add	r3, r1
 800078e:	761a      	strb	r2, [r3, #24]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	f1c3 0307 	rsb	r3, r3, #7
 80007be:	2b04      	cmp	r3, #4
 80007c0:	bf28      	it	cs
 80007c2:	2304      	movcs	r3, #4
 80007c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	d902      	bls.n	80007d4 <NVIC_EncodePriority+0x30>
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3b03      	subs	r3, #3
 80007d2:	e000      	b.n	80007d6 <NVIC_EncodePriority+0x32>
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	f04f 32ff 	mov.w	r2, #4294967295
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43da      	mvns	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	401a      	ands	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43d9      	mvns	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	4313      	orrs	r3, r2
         );
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3724      	adds	r7, #36	; 0x24
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800081c:	d301      	bcc.n	8000822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081e:	2301      	movs	r3, #1
 8000820:	e00f      	b.n	8000842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <SysTick_Config+0x40>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082a:	210f      	movs	r1, #15
 800082c:	f04f 30ff 	mov.w	r0, #4294967295
 8000830:	f7ff ff8e 	bl	8000750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <SysTick_Config+0x40>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <SysTick_Config+0x40>)
 800083c:	2207      	movs	r2, #7
 800083e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	e000e010 	.word	0xe000e010

08000850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff29 	bl	80006b0 <__NVIC_SetPriorityGrouping>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000866:	b580      	push	{r7, lr}
 8000868:	b086      	sub	sp, #24
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
 8000872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000878:	f7ff ff3e 	bl	80006f8 <__NVIC_GetPriorityGrouping>
 800087c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	68b9      	ldr	r1, [r7, #8]
 8000882:	6978      	ldr	r0, [r7, #20]
 8000884:	f7ff ff8e 	bl	80007a4 <NVIC_EncodePriority>
 8000888:	4602      	mov	r2, r0
 800088a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088e:	4611      	mov	r1, r2
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff5d 	bl	8000750 <__NVIC_SetPriority>
}
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff31 	bl	8000714 <__NVIC_EnableIRQ>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b082      	sub	sp, #8
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff ffa2 	bl	800080c <SysTick_Config>
 80008c8:	4603      	mov	r3, r0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008d2:	b480      	push	{r7}
 80008d4:	b083      	sub	sp, #12
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d004      	beq.n	80008f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e00c      	b.n	800090a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2205      	movs	r2, #5
 80008f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f022 0201 	bic.w	r2, r2, #1
 8000906:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800092e:	2300      	movs	r3, #0
 8000930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
 8000936:	e175      	b.n	8000c24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000938:	2201      	movs	r2, #1
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	697a      	ldr	r2, [r7, #20]
 8000948:	4013      	ands	r3, r2
 800094a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	429a      	cmp	r2, r3
 8000952:	f040 8164 	bne.w	8000c1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	2b02      	cmp	r3, #2
 800095c:	d003      	beq.n	8000966 <HAL_GPIO_Init+0x4e>
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	2b12      	cmp	r3, #18
 8000964:	d123      	bne.n	80009ae <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	08da      	lsrs	r2, r3, #3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3208      	adds	r2, #8
 800096e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	220f      	movs	r2, #15
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	4013      	ands	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	691a      	ldr	r2, [r3, #16]
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	f003 0307 	and.w	r3, r3, #7
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	69ba      	ldr	r2, [r7, #24]
 800099c:	4313      	orrs	r3, r2
 800099e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	08da      	lsrs	r2, r3, #3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3208      	adds	r2, #8
 80009a8:	69b9      	ldr	r1, [r7, #24]
 80009aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	2203      	movs	r2, #3
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	4013      	ands	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 0203 	and.w	r2, r3, #3
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	4313      	orrs	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d00b      	beq.n	8000a02 <HAL_GPIO_Init+0xea>
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d007      	beq.n	8000a02 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f6:	2b11      	cmp	r3, #17
 80009f8:	d003      	beq.n	8000a02 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	2b12      	cmp	r3, #18
 8000a00:	d130      	bne.n	8000a64 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	4013      	ands	r3, r2
 8000a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	68da      	ldr	r2, [r3, #12]
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a38:	2201      	movs	r2, #1
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	4013      	ands	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	091b      	lsrs	r3, r3, #4
 8000a4e:	f003 0201 	and.w	r2, r3, #1
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	2203      	movs	r2, #3
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	689a      	ldr	r2, [r3, #8]
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	f000 80be 	beq.w	8000c1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b65      	ldr	r3, [pc, #404]	; (8000c38 <HAL_GPIO_Init+0x320>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a64      	ldr	r2, [pc, #400]	; (8000c38 <HAL_GPIO_Init+0x320>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b62      	ldr	r3, [pc, #392]	; (8000c38 <HAL_GPIO_Init+0x320>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000aba:	4a60      	ldr	r2, [pc, #384]	; (8000c3c <HAL_GPIO_Init+0x324>)
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	089b      	lsrs	r3, r3, #2
 8000ac0:	3302      	adds	r3, #2
 8000ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	220f      	movs	r2, #15
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	4013      	ands	r3, r2
 8000adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a57      	ldr	r2, [pc, #348]	; (8000c40 <HAL_GPIO_Init+0x328>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d037      	beq.n	8000b56 <HAL_GPIO_Init+0x23e>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a56      	ldr	r2, [pc, #344]	; (8000c44 <HAL_GPIO_Init+0x32c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d031      	beq.n	8000b52 <HAL_GPIO_Init+0x23a>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a55      	ldr	r2, [pc, #340]	; (8000c48 <HAL_GPIO_Init+0x330>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d02b      	beq.n	8000b4e <HAL_GPIO_Init+0x236>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a54      	ldr	r2, [pc, #336]	; (8000c4c <HAL_GPIO_Init+0x334>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d025      	beq.n	8000b4a <HAL_GPIO_Init+0x232>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a53      	ldr	r2, [pc, #332]	; (8000c50 <HAL_GPIO_Init+0x338>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d01f      	beq.n	8000b46 <HAL_GPIO_Init+0x22e>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a52      	ldr	r2, [pc, #328]	; (8000c54 <HAL_GPIO_Init+0x33c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d019      	beq.n	8000b42 <HAL_GPIO_Init+0x22a>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a51      	ldr	r2, [pc, #324]	; (8000c58 <HAL_GPIO_Init+0x340>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d013      	beq.n	8000b3e <HAL_GPIO_Init+0x226>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a50      	ldr	r2, [pc, #320]	; (8000c5c <HAL_GPIO_Init+0x344>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d00d      	beq.n	8000b3a <HAL_GPIO_Init+0x222>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a4f      	ldr	r2, [pc, #316]	; (8000c60 <HAL_GPIO_Init+0x348>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d007      	beq.n	8000b36 <HAL_GPIO_Init+0x21e>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a4e      	ldr	r2, [pc, #312]	; (8000c64 <HAL_GPIO_Init+0x34c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d101      	bne.n	8000b32 <HAL_GPIO_Init+0x21a>
 8000b2e:	2309      	movs	r3, #9
 8000b30:	e012      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b32:	230a      	movs	r3, #10
 8000b34:	e010      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b36:	2308      	movs	r3, #8
 8000b38:	e00e      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	e00c      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b3e:	2306      	movs	r3, #6
 8000b40:	e00a      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b42:	2305      	movs	r3, #5
 8000b44:	e008      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b46:	2304      	movs	r3, #4
 8000b48:	e006      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e004      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b4e:	2302      	movs	r3, #2
 8000b50:	e002      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <HAL_GPIO_Init+0x240>
 8000b56:	2300      	movs	r3, #0
 8000b58:	69fa      	ldr	r2, [r7, #28]
 8000b5a:	f002 0203 	and.w	r2, r2, #3
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	4093      	lsls	r3, r2
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b68:	4934      	ldr	r1, [pc, #208]	; (8000c3c <HAL_GPIO_Init+0x324>)
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	3302      	adds	r3, #2
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b76:	4b3c      	ldr	r3, [pc, #240]	; (8000c68 <HAL_GPIO_Init+0x350>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	4013      	ands	r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b9a:	4a33      	ldr	r2, [pc, #204]	; (8000c68 <HAL_GPIO_Init+0x350>)
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ba0:	4b31      	ldr	r3, [pc, #196]	; (8000c68 <HAL_GPIO_Init+0x350>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	4013      	ands	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000bc4:	4a28      	ldr	r2, [pc, #160]	; (8000c68 <HAL_GPIO_Init+0x350>)
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bca:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <HAL_GPIO_Init+0x350>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bee:	4a1e      	ldr	r2, [pc, #120]	; (8000c68 <HAL_GPIO_Init+0x350>)
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <HAL_GPIO_Init+0x350>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4013      	ands	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c18:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <HAL_GPIO_Init+0x350>)
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3301      	adds	r3, #1
 8000c22:	61fb      	str	r3, [r7, #28]
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	2b0f      	cmp	r3, #15
 8000c28:	f67f ae86 	bls.w	8000938 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3724      	adds	r7, #36	; 0x24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40013800 	.word	0x40013800
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020c00 	.word	0x40020c00
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40021400 	.word	0x40021400
 8000c58:	40021800 	.word	0x40021800
 8000c5c:	40021c00 	.word	0x40021c00
 8000c60:	40022000 	.word	0x40022000
 8000c64:	40022400 	.word	0x40022400
 8000c68:	40013c00 	.word	0x40013c00

08000c6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	887b      	ldrh	r3, [r7, #2]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d002      	beq.n	8000c8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c84:	2301      	movs	r3, #1
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e001      	b.n	8000c8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	807b      	strh	r3, [r7, #2]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cac:	787b      	ldrb	r3, [r7, #1]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cb2:	887a      	ldrh	r2, [r7, #2]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000cb8:	e003      	b.n	8000cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000cba:	887b      	ldrh	r3, [r7, #2]
 8000cbc:	041a      	lsls	r2, r3, #16
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	619a      	str	r2, [r3, #24]
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	695a      	ldr	r2, [r3, #20]
 8000cde:	887b      	ldrh	r3, [r7, #2]
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	887b      	ldrh	r3, [r7, #2]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d104      	bne.n	8000cf2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ce8:	887b      	ldrh	r3, [r7, #2]
 8000cea:	041a      	lsls	r2, r3, #16
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000cf0:	e002      	b.n	8000cf8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000cf2:	887a      	ldrh	r2, [r7, #2]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	619a      	str	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e07f      	b.n	8000e16 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d106      	bne.n	8000d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f004 f8e6 	bl	8004efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2224      	movs	r2, #36	; 0x24
 8000d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f022 0201 	bic.w	r2, r2, #1
 8000d46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d107      	bne.n	8000d7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	e006      	b.n	8000d8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000d8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d104      	bne.n	8000d9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6859      	ldr	r1, [r3, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_I2C_Init+0x11c>)
 8000daa:	430b      	orrs	r3, r1
 8000dac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	691a      	ldr	r2, [r3, #16]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	ea42 0103 	orr.w	r1, r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	021a      	lsls	r2, r3, #8
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69d9      	ldr	r1, [r3, #28]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a1a      	ldr	r2, [r3, #32]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f042 0201 	orr.w	r2, r2, #1
 8000df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2220      	movs	r2, #32
 8000e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	02008000 	.word	0x02008000

08000e24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	460b      	mov	r3, r1
 8000e32:	817b      	strh	r3, [r7, #10]
 8000e34:	4613      	mov	r3, r2
 8000e36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b20      	cmp	r3, #32
 8000e42:	f040 80da 	bne.w	8000ffa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d101      	bne.n	8000e54 <HAL_I2C_Master_Transmit+0x30>
 8000e50:	2302      	movs	r3, #2
 8000e52:	e0d3      	b.n	8000ffc <HAL_I2C_Master_Transmit+0x1d8>
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2201      	movs	r2, #1
 8000e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e5c:	f7ff fbfa 	bl	8000654 <HAL_GetTick>
 8000e60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2319      	movs	r3, #25
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f000 fe76 	bl	8001b60 <I2C_WaitOnFlagUntilTimeout>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e0be      	b.n	8000ffc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2221      	movs	r2, #33	; 0x21
 8000e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2210      	movs	r2, #16
 8000e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2200      	movs	r2, #0
 8000e92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	893a      	ldrh	r2, [r7, #8]
 8000e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	2bff      	cmp	r3, #255	; 0xff
 8000eae:	d90e      	bls.n	8000ece <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	22ff      	movs	r2, #255	; 0xff
 8000eb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	8979      	ldrh	r1, [r7, #10]
 8000ebe:	4b51      	ldr	r3, [pc, #324]	; (8001004 <HAL_I2C_Master_Transmit+0x1e0>)
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f000 ffd8 	bl	8001e7c <I2C_TransferConfig>
 8000ecc:	e06c      	b.n	8000fa8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	8979      	ldrh	r1, [r7, #10]
 8000ee0:	4b48      	ldr	r3, [pc, #288]	; (8001004 <HAL_I2C_Master_Transmit+0x1e0>)
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ee8:	68f8      	ldr	r0, [r7, #12]
 8000eea:	f000 ffc7 	bl	8001e7c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000eee:	e05b      	b.n	8000fa8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	6a39      	ldr	r1, [r7, #32]
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f000 fe73 	bl	8001be0 <I2C_WaitOnTXISFlagUntilTimeout>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e07b      	b.n	8000ffc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f08:	781a      	ldrb	r2, [r3, #0]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	3b01      	subs	r3, #1
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d034      	beq.n	8000fa8 <HAL_I2C_Master_Transmit+0x184>
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d130      	bne.n	8000fa8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	68f8      	ldr	r0, [r7, #12]
 8000f52:	f000 fe05 	bl	8001b60 <I2C_WaitOnFlagUntilTimeout>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e04d      	b.n	8000ffc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	2bff      	cmp	r3, #255	; 0xff
 8000f68:	d90e      	bls.n	8000f88 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	22ff      	movs	r2, #255	; 0xff
 8000f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	8979      	ldrh	r1, [r7, #10]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 ff7b 	bl	8001e7c <I2C_TransferConfig>
 8000f86:	e00f      	b.n	8000fa8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	8979      	ldrh	r1, [r7, #10]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f000 ff6a 	bl	8001e7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d19e      	bne.n	8000ef0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	6a39      	ldr	r1, [r7, #32]
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 fe52 	bl	8001c60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e01a      	b.n	8000ffc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2220      	movs	r2, #32
 8000fcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6859      	ldr	r1, [r3, #4]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_I2C_Master_Transmit+0x1e4>)
 8000fda:	400b      	ands	r3, r1
 8000fdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e000      	b.n	8000ffc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8000ffa:	2302      	movs	r3, #2
  }
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	80002000 	.word	0x80002000
 8001008:	fe00e800 	.word	0xfe00e800

0800100c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af02      	add	r7, sp, #8
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	817b      	strh	r3, [r7, #10]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b20      	cmp	r3, #32
 800102a:	f040 80db 	bne.w	80011e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001034:	2b01      	cmp	r3, #1
 8001036:	d101      	bne.n	800103c <HAL_I2C_Master_Receive+0x30>
 8001038:	2302      	movs	r3, #2
 800103a:	e0d4      	b.n	80011e6 <HAL_I2C_Master_Receive+0x1da>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001044:	f7ff fb06 	bl	8000654 <HAL_GetTick>
 8001048:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2319      	movs	r3, #25
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f000 fd82 	bl	8001b60 <I2C_WaitOnFlagUntilTimeout>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e0bf      	b.n	80011e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2222      	movs	r2, #34	; 0x22
 800106a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2210      	movs	r2, #16
 8001072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2200      	movs	r2, #0
 800107a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	893a      	ldrh	r2, [r7, #8]
 8001086:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2200      	movs	r2, #0
 800108c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001092:	b29b      	uxth	r3, r3
 8001094:	2bff      	cmp	r3, #255	; 0xff
 8001096:	d90e      	bls.n	80010b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	22ff      	movs	r2, #255	; 0xff
 800109c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	8979      	ldrh	r1, [r7, #10]
 80010a6:	4b52      	ldr	r3, [pc, #328]	; (80011f0 <HAL_I2C_Master_Receive+0x1e4>)
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f000 fee4 	bl	8001e7c <I2C_TransferConfig>
 80010b4:	e06d      	b.n	8001192 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	8979      	ldrh	r1, [r7, #10]
 80010c8:	4b49      	ldr	r3, [pc, #292]	; (80011f0 <HAL_I2C_Master_Receive+0x1e4>)
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f000 fed3 	bl	8001e7c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80010d6:	e05c      	b.n	8001192 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	6a39      	ldr	r1, [r7, #32]
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 fdfb 	bl	8001cd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e07c      	b.n	80011e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001108:	3b01      	subs	r3, #1
 800110a:	b29a      	uxth	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001114:	b29b      	uxth	r3, r3
 8001116:	3b01      	subs	r3, #1
 8001118:	b29a      	uxth	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001122:	b29b      	uxth	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d034      	beq.n	8001192 <HAL_I2C_Master_Receive+0x186>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800112c:	2b00      	cmp	r3, #0
 800112e:	d130      	bne.n	8001192 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	2200      	movs	r2, #0
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f000 fd10 	bl	8001b60 <I2C_WaitOnFlagUntilTimeout>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e04d      	b.n	80011e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800114e:	b29b      	uxth	r3, r3
 8001150:	2bff      	cmp	r3, #255	; 0xff
 8001152:	d90e      	bls.n	8001172 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	22ff      	movs	r2, #255	; 0xff
 8001158:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800115e:	b2da      	uxtb	r2, r3
 8001160:	8979      	ldrh	r1, [r7, #10]
 8001162:	2300      	movs	r3, #0
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f000 fe86 	bl	8001e7c <I2C_TransferConfig>
 8001170:	e00f      	b.n	8001192 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001176:	b29a      	uxth	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001180:	b2da      	uxtb	r2, r3
 8001182:	8979      	ldrh	r1, [r7, #10]
 8001184:	2300      	movs	r3, #0
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f000 fe75 	bl	8001e7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001196:	b29b      	uxth	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d19d      	bne.n	80010d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	6a39      	ldr	r1, [r7, #32]
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f000 fd5d 	bl	8001c60 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e01a      	b.n	80011e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2220      	movs	r2, #32
 80011b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6859      	ldr	r1, [r3, #4]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_I2C_Master_Receive+0x1e8>)
 80011c4:	400b      	ands	r3, r1
 80011c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2220      	movs	r2, #32
 80011cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e000      	b.n	80011e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80011e4:	2302      	movs	r3, #2
  }
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	80002400 	.word	0x80002400
 80011f4:	fe00e800 	.word	0xfe00e800

080011f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	68f9      	ldr	r1, [r7, #12]
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	4798      	blx	r3
  }
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	0a1b      	lsrs	r3, r3, #8
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d010      	beq.n	8001272 <HAL_I2C_ER_IRQHandler+0x46>
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	09db      	lsrs	r3, r3, #7
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00a      	beq.n	8001272 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001260:	f043 0201 	orr.w	r2, r3, #1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001270:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	0a9b      	lsrs	r3, r3, #10
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d010      	beq.n	80012a0 <HAL_I2C_ER_IRQHandler+0x74>
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	09db      	lsrs	r3, r3, #7
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00a      	beq.n	80012a0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f043 0208 	orr.w	r2, r3, #8
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	0a5b      	lsrs	r3, r3, #9
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d010      	beq.n	80012ce <HAL_I2C_ER_IRQHandler+0xa2>
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	09db      	lsrs	r3, r3, #7
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00a      	beq.n	80012ce <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012bc:	f043 0202 	orr.w	r2, r3, #2
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012cc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 030b 	and.w	r3, r3, #11
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80012de:	68f9      	ldr	r1, [r7, #12]
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 fb35 	bl	8001950 <I2C_ITError>
  }
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	460b      	mov	r3, r1
 8001320:	70fb      	strb	r3, [r7, #3]
 8001322:	4613      	mov	r3, r2
 8001324:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <I2C_Slave_ISR_IT+0x24>
 800138e:	2302      	movs	r3, #2
 8001390:	e0f0      	b.n	8001574 <I2C_Slave_ISR_IT+0x206>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	091b      	lsrs	r3, r3, #4
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d04d      	beq.n	8001442 <I2C_Slave_ISR_IT+0xd4>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d047      	beq.n	8001442 <I2C_Slave_ISR_IT+0xd4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d128      	bne.n	800140e <I2C_Slave_ISR_IT+0xa0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b28      	cmp	r3, #40	; 0x28
 80013c6:	d108      	bne.n	80013da <I2C_Slave_ISR_IT+0x6c>
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80013ce:	d104      	bne.n	80013da <I2C_Slave_ISR_IT+0x6c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80013d0:	6979      	ldr	r1, [r7, #20]
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 fa68 	bl	80018a8 <I2C_ITListenCplt>
 80013d8:	e032      	b.n	8001440 <I2C_Slave_ISR_IT+0xd2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b29      	cmp	r3, #41	; 0x29
 80013e4:	d10e      	bne.n	8001404 <I2C_Slave_ISR_IT+0x96>
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80013ec:	d00a      	beq.n	8001404 <I2C_Slave_ISR_IT+0x96>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2210      	movs	r2, #16
 80013f4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 fb6a 	bl	8001ad0 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 f93f 	bl	8001680 <I2C_ITSlaveSeqCplt>
 8001402:	e01d      	b.n	8001440 <I2C_Slave_ISR_IT+0xd2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2210      	movs	r2, #16
 800140a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800140c:	e09a      	b.n	8001544 <I2C_Slave_ISR_IT+0x1d6>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2210      	movs	r2, #16
 8001414:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f043 0204 	orr.w	r2, r3, #4
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d004      	beq.n	8001432 <I2C_Slave_ISR_IT+0xc4>
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800142e:	f040 8089 	bne.w	8001544 <I2C_Slave_ISR_IT+0x1d6>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4619      	mov	r1, r3
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 fa89 	bl	8001950 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800143e:	e081      	b.n	8001544 <I2C_Slave_ISR_IT+0x1d6>
 8001440:	e080      	b.n	8001544 <I2C_Slave_ISR_IT+0x1d6>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d034      	beq.n	80014b8 <I2C_Slave_ISR_IT+0x14a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d02e      	beq.n	80014b8 <I2C_Slave_ISR_IT+0x14a>
  {
    if (hi2c->XferCount > 0U)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800145e:	b29b      	uxth	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d01c      	beq.n	800149e <I2C_Slave_ISR_IT+0x130>
    {
      /* Remove RXNE flag on temporary variable as read done */
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f023 0304 	bic.w	r3, r3, #4
 800146a:	617b      	str	r3, [r7, #20]

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001488:	3b01      	subs	r3, #1
 800148a:	b29a      	uxth	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001494:	b29b      	uxth	r3, r3
 8001496:	3b01      	subs	r3, #1
 8001498:	b29a      	uxth	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d14f      	bne.n	8001548 <I2C_Slave_ISR_IT+0x1da>
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80014ae:	d04b      	beq.n	8001548 <I2C_Slave_ISR_IT+0x1da>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 f8e5 	bl	8001680 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80014b6:	e047      	b.n	8001548 <I2C_Slave_ISR_IT+0x1da>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	08db      	lsrs	r3, r3, #3
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00a      	beq.n	80014da <I2C_Slave_ISR_IT+0x16c>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	08db      	lsrs	r3, r3, #3
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d004      	beq.n	80014da <I2C_Slave_ISR_IT+0x16c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80014d0:	6979      	ldr	r1, [r7, #20]
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f000 f852 	bl	800157c <I2C_ITAddrCplt>
 80014d8:	e037      	b.n	800154a <I2C_Slave_ISR_IT+0x1dc>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	085b      	lsrs	r3, r3, #1
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d031      	beq.n	800154a <I2C_Slave_ISR_IT+0x1dc>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	085b      	lsrs	r3, r3, #1
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d02b      	beq.n	800154a <I2C_Slave_ISR_IT+0x1dc>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d018      	beq.n	800152e <I2C_Slave_ISR_IT+0x1c0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001516:	b29b      	uxth	r3, r3
 8001518:	3b01      	subs	r3, #1
 800151a:	b29a      	uxth	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001524:	3b01      	subs	r3, #1
 8001526:	b29a      	uxth	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	851a      	strh	r2, [r3, #40]	; 0x28
 800152c:	e00d      	b.n	800154a <I2C_Slave_ISR_IT+0x1dc>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001534:	d002      	beq.n	800153c <I2C_Slave_ISR_IT+0x1ce>
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d106      	bne.n	800154a <I2C_Slave_ISR_IT+0x1dc>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 f89f 	bl	8001680 <I2C_ITSlaveSeqCplt>
 8001542:	e002      	b.n	800154a <I2C_Slave_ISR_IT+0x1dc>
    if (hi2c->XferCount == 0U)
 8001544:	bf00      	nop
 8001546:	e000      	b.n	800154a <I2C_Slave_ISR_IT+0x1dc>
    if ((hi2c->XferCount == 0U) && \
 8001548:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	095b      	lsrs	r3, r3, #5
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d009      	beq.n	800156a <I2C_Slave_ISR_IT+0x1fc>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	095b      	lsrs	r3, r3, #5
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <I2C_Slave_ISR_IT+0x1fc>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001562:	6979      	ldr	r1, [r7, #20]
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f000 f8c9 	bl	80016fc <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001592:	2b28      	cmp	r3, #40	; 0x28
 8001594:	d168      	bne.n	8001668 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	0c1b      	lsrs	r3, r3, #16
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	0c1b      	lsrs	r3, r3, #16
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80015b4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015c2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80015d0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d137      	bne.n	800164a <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80015da:	897b      	ldrh	r3, [r7, #10]
 80015dc:	09db      	lsrs	r3, r3, #7
 80015de:	b29a      	uxth	r2, r3
 80015e0:	89bb      	ldrh	r3, [r7, #12]
 80015e2:	4053      	eors	r3, r2
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	f003 0306 	and.w	r3, r3, #6
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d11c      	bne.n	8001628 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80015ee:	897b      	ldrh	r3, [r7, #10]
 80015f0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001600:	2b02      	cmp	r3, #2
 8001602:	d139      	bne.n	8001678 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2208      	movs	r2, #8
 8001610:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800161a:	89ba      	ldrh	r2, [r7, #12]
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	4619      	mov	r1, r3
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff fe78 	bl	8001316 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001626:	e027      	b.n	8001678 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8001628:	893b      	ldrh	r3, [r7, #8]
 800162a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800162c:	2104      	movs	r1, #4
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 fc52 	bl	8001ed8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800163c:	89ba      	ldrh	r2, [r7, #12]
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	4619      	mov	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fe67 	bl	8001316 <HAL_I2C_AddrCallback>
}
 8001648:	e016      	b.n	8001678 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800164a:	2104      	movs	r1, #4
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 fc43 	bl	8001ed8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800165a:	89ba      	ldrh	r2, [r7, #12]
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	4619      	mov	r1, r3
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff fe58 	bl	8001316 <HAL_I2C_AddrCallback>
}
 8001666:	e007      	b.n	8001678 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2208      	movs	r2, #8
 800166e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b29      	cmp	r3, #41	; 0x29
 800169a:	d112      	bne.n	80016c2 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2228      	movs	r2, #40	; 0x28
 80016a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2221      	movs	r2, #33	; 0x21
 80016a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80016aa:	2101      	movs	r1, #1
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 fc13 	bl	8001ed8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fe17 	bl	80012ee <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80016c0:	e017      	b.n	80016f2 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b2a      	cmp	r3, #42	; 0x2a
 80016cc:	d111      	bne.n	80016f2 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2228      	movs	r2, #40	; 0x28
 80016d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2222      	movs	r2, #34	; 0x22
 80016da:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80016dc:	2102      	movs	r1, #2
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 fbfa 	bl	8001ed8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fe08 	bl	8001302 <HAL_I2C_SlaveRxCpltCallback>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2220      	movs	r2, #32
 8001718:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800171a:	2107      	movs	r1, #7
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fbdb 	bl	8001ed8 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001730:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6859      	ldr	r1, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b58      	ldr	r3, [pc, #352]	; (80018a0 <I2C_ITSlaveCplt+0x1a4>)
 800173e:	400b      	ands	r3, r1
 8001740:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f9c4 	bl	8001ad0 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	0b9b      	lsrs	r3, r3, #14
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00b      	beq.n	800176c <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001758:	2b00      	cmp	r3, #0
 800175a:	d018      	beq.n	800178e <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	b29a      	uxth	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	855a      	strh	r2, [r3, #42]	; 0x2a
 800176a:	e010      	b.n	800178e <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	0bdb      	lsrs	r3, r3, #15
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00a      	beq.n	800178e <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177c:	2b00      	cmp	r3, #0
 800177e:	d006      	beq.n	800178e <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	b29a      	uxth	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d020      	beq.n	80017dc <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00c      	beq.n	80017dc <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	3b01      	subs	r3, #1
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d005      	beq.n	80017f2 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f043 0204 	orr.w	r2, r3, #4
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	2b00      	cmp	r3, #0
 800180c:	d010      	beq.n	8001830 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4619      	mov	r1, r3
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f89b 	bl	8001950 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b28      	cmp	r3, #40	; 0x28
 8001824:	d138      	bne.n	8001898 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001826:	68f9      	ldr	r1, [r7, #12]
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f83d 	bl	80018a8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800182e:	e033      	b.n	8001898 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001838:	d011      	beq.n	800185e <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ff20 	bl	8001680 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a18      	ldr	r2, [pc, #96]	; (80018a4 <I2C_ITSlaveCplt+0x1a8>)
 8001844:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2220      	movs	r2, #32
 800184a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff fd6b 	bl	8001332 <HAL_I2C_ListenCpltCallback>
}
 800185c:	e01c      	b.n	8001898 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b22      	cmp	r3, #34	; 0x22
 8001868:	d10b      	bne.n	8001882 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2220      	movs	r2, #32
 800186e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fd41 	bl	8001302 <HAL_I2C_SlaveRxCpltCallback>
}
 8001880:	e00a      	b.n	8001898 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2220      	movs	r2, #32
 8001886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff fd2b 	bl	80012ee <HAL_I2C_SlaveTxCpltCallback>
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	fe00e800 	.word	0xfe00e800
 80018a4:	ffff0000 	.word	0xffff0000

080018a8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a25      	ldr	r2, [pc, #148]	; (800194c <I2C_ITListenCplt+0xa4>)
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2220      	movs	r2, #32
 80018c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d022      	beq.n	8001926 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d012      	beq.n	8001926 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001904:	3b01      	subs	r3, #1
 8001906:	b29a      	uxth	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001910:	b29b      	uxth	r3, r3
 8001912:	3b01      	subs	r3, #1
 8001914:	b29a      	uxth	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f043 0204 	orr.w	r2, r3, #4
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001926:	2107      	movs	r1, #7
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 fad5 	bl	8001ed8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2210      	movs	r2, #16
 8001934:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fcf7 	bl	8001332 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	ffff0000 	.word	0xffff0000

08001950 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001960:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a55      	ldr	r2, [pc, #340]	; (8001ac4 <I2C_ITError+0x174>)
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	2b28      	cmp	r3, #40	; 0x28
 8001986:	d005      	beq.n	8001994 <I2C_ITError+0x44>
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	2b29      	cmp	r3, #41	; 0x29
 800198c:	d002      	beq.n	8001994 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	2b2a      	cmp	r3, #42	; 0x2a
 8001992:	d10e      	bne.n	80019b2 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001994:	2103      	movs	r1, #3
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 fa9e 	bl	8001ed8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2228      	movs	r2, #40	; 0x28
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a46      	ldr	r2, [pc, #280]	; (8001ac8 <I2C_ITError+0x178>)
 80019ae:	635a      	str	r2, [r3, #52]	; 0x34
 80019b0:	e013      	b.n	80019da <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80019b2:	2107      	movs	r1, #7
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 fa8f 	bl	8001ed8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b60      	cmp	r3, #96	; 0x60
 80019c4:	d003      	beq.n	80019ce <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2220      	movs	r2, #32
 80019ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019e8:	d123      	bne.n	8001a32 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80019f8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d05c      	beq.n	8001abc <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a06:	4a31      	ldr	r2, [pc, #196]	; (8001acc <I2C_ITError+0x17c>)
 8001a08:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe ff5b 	bl	80008d2 <HAL_DMA_Abort_IT>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d04c      	beq.n	8001abc <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001a30:	e044      	b.n	8001abc <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a40:	d123      	bne.n	8001a8a <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a50:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d030      	beq.n	8001abc <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5e:	4a1b      	ldr	r2, [pc, #108]	; (8001acc <I2C_ITError+0x17c>)
 8001a60:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe ff2f 	bl	80008d2 <HAL_DMA_Abort_IT>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d020      	beq.n	8001abc <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a84:	4610      	mov	r0, r2
 8001a86:	4798      	blx	r3
}
 8001a88:	e018      	b.n	8001abc <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b60      	cmp	r3, #96	; 0x60
 8001a94:	d10b      	bne.n	8001aae <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff fc57 	bl	800135a <HAL_I2C_AbortCpltCallback>
}
 8001aac:	e006      	b.n	8001abc <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fc45 	bl	8001346 <HAL_I2C_ErrorCallback>
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	ffff0000 	.word	0xffff0000
 8001ac8:	0800136f 	.word	0x0800136f
 8001acc:	08001b19 	.word	0x08001b19

08001ad0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d103      	bne.n	8001aee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2200      	movs	r2, #0
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d007      	beq.n	8001b0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699a      	ldr	r2, [r3, #24]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	619a      	str	r2, [r3, #24]
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b32:	2200      	movs	r2, #0
 8001b34:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b60      	cmp	r3, #96	; 0x60
 8001b40:	d107      	bne.n	8001b52 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2220      	movs	r2, #32
 8001b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f7ff fc05 	bl	800135a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001b50:	e002      	b.n	8001b58 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7ff fbf7 	bl	8001346 <HAL_I2C_ErrorCallback>
}
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b70:	e022      	b.n	8001bb8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b78:	d01e      	beq.n	8001bb8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b7a:	f7fe fd6b 	bl	8000654 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d302      	bcc.n	8001b90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d113      	bne.n	8001bb8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	f043 0220 	orr.w	r2, r3, #32
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e00f      	b.n	8001bd8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d0cd      	beq.n	8001b72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bec:	e02c      	b.n	8001c48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 f8dc 	bl	8001db0 <I2C_IsAcknowledgeFailed>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e02a      	b.n	8001c58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c08:	d01e      	beq.n	8001c48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c0a:	f7fe fd23 	bl	8000654 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d302      	bcc.n	8001c20 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d113      	bne.n	8001c48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c24:	f043 0220 	orr.w	r2, r3, #32
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e007      	b.n	8001c58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d1cb      	bne.n	8001bee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c6c:	e028      	b.n	8001cc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 f89c 	bl	8001db0 <I2C_IsAcknowledgeFailed>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e026      	b.n	8001cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c82:	f7fe fce7 	bl	8000654 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d302      	bcc.n	8001c98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d113      	bne.n	8001cc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9c:	f043 0220 	orr.w	r2, r3, #32
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e007      	b.n	8001cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	2b20      	cmp	r3, #32
 8001ccc:	d1cf      	bne.n	8001c6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ce4:	e055      	b.n	8001d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 f860 	bl	8001db0 <I2C_IsAcknowledgeFailed>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e053      	b.n	8001da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0320 	and.w	r3, r3, #32
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	d129      	bne.n	8001d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d105      	bne.n	8001d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e03f      	b.n	8001da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2220      	movs	r2, #32
 8001d28:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6859      	ldr	r1, [r3, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001d36:	400b      	ands	r3, r1
 8001d38:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e022      	b.n	8001da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d5c:	f7fe fc7a 	bl	8000654 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d302      	bcc.n	8001d72 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10f      	bne.n	8001d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f043 0220 	orr.w	r2, r3, #32
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2220      	movs	r2, #32
 8001d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e007      	b.n	8001da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d1a2      	bne.n	8001ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	fe00e800 	.word	0xfe00e800

08001db0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d151      	bne.n	8001e6e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dca:	e022      	b.n	8001e12 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd2:	d01e      	beq.n	8001e12 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd4:	f7fe fc3e 	bl	8000654 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d302      	bcc.n	8001dea <I2C_IsAcknowledgeFailed+0x3a>
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d113      	bne.n	8001e12 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f043 0220 	orr.w	r2, r3, #32
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e02e      	b.n	8001e70 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f003 0320 	and.w	r3, r3, #32
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d1d5      	bne.n	8001dcc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2210      	movs	r2, #16
 8001e26:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f7ff fe4d 	bl	8001ad0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <I2C_IsAcknowledgeFailed+0xc8>)
 8001e42:	400b      	ands	r3, r1
 8001e44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f043 0204 	orr.w	r2, r3, #4
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	fe00e800 	.word	0xfe00e800

08001e7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	817b      	strh	r3, [r7, #10]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	0d5b      	lsrs	r3, r3, #21
 8001e98:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <I2C_TransferConfig+0x58>)
 8001e9e:	430b      	orrs	r3, r1
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	ea02 0103 	and.w	r1, r2, r3
 8001ea6:	897b      	ldrh	r3, [r7, #10]
 8001ea8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001eac:	7a7b      	ldrb	r3, [r7, #9]
 8001eae:	041b      	lsls	r3, r3, #16
 8001eb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001ec6:	bf00      	nop
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	03ff63ff 	.word	0x03ff63ff

08001ed8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001ee8:	887b      	ldrh	r3, [r7, #2]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00f      	beq.n	8001f12 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8001ef8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f06:	2b28      	cmp	r3, #40	; 0x28
 8001f08:	d003      	beq.n	8001f12 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001f10:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001f12:	887b      	ldrh	r3, [r7, #2]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00f      	beq.n	8001f3c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8001f22:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f30:	2b28      	cmp	r3, #40	; 0x28
 8001f32:	d003      	beq.n	8001f3c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001f3a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8001f4c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	f003 0311 	and.w	r3, r3, #17
 8001f54:	2b11      	cmp	r3, #17
 8001f56:	d103      	bne.n	8001f60 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8001f5e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8001f60:	887b      	ldrh	r3, [r7, #2]
 8001f62:	f003 0312 	and.w	r3, r3, #18
 8001f66:	2b12      	cmp	r3, #18
 8001f68:	d103      	bne.n	8001f72 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f043 0320 	orr.w	r3, r3, #32
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	f003 0312 	and.w	r3, r3, #18
 8001f78:	2b12      	cmp	r3, #18
 8001f7a:	d103      	bne.n	8001f84 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f82:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6819      	ldr	r1, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	400a      	ands	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b20      	cmp	r3, #32
 8001fb6:	d138      	bne.n	800202a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e032      	b.n	800202c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2224      	movs	r2, #36	; 0x24
 8001fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0201 	bic.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ff4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6819      	ldr	r1, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0201 	orr.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2220      	movs	r2, #32
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800202a:	2302      	movs	r3, #2
  }
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b20      	cmp	r3, #32
 800204c:	d139      	bne.n	80020c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002058:	2302      	movs	r3, #2
 800205a:	e033      	b.n	80020c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2224      	movs	r2, #36	; 0x24
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0201 	bic.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800208a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	021b      	lsls	r3, r3, #8
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0201 	orr.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2220      	movs	r2, #32
 80020b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e000      	b.n	80020c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020c2:	2302      	movs	r3, #2
  }
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d2:	b08f      	sub	sp, #60	; 0x3c
 80020d4:	af0a      	add	r7, sp, #40	; 0x28
 80020d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e10a      	b.n	80022f8 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f003 fa80 	bl	80055fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2203      	movs	r2, #3
 8002100:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f002 fa0f 	bl	800452c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	687e      	ldr	r6, [r7, #4]
 8002116:	466d      	mov	r5, sp
 8002118:	f106 0410 	add.w	r4, r6, #16
 800211c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800211e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002124:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002128:	e885 0003 	stmia.w	r5, {r0, r1}
 800212c:	1d33      	adds	r3, r6, #4
 800212e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002130:	6838      	ldr	r0, [r7, #0]
 8002132:	f002 f9a3 	bl	800447c <USB_CoreInit>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0d7      	b.n	80022f8 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f002 f9fd 	bl	800454e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	e04a      	b.n	80021f0 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	333d      	adds	r3, #61	; 0x3d
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	333c      	adds	r3, #60	; 0x3c
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	b298      	uxth	r0, r3
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	1a9b      	subs	r3, r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	3342      	adds	r3, #66	; 0x42
 8002196:	4602      	mov	r2, r0
 8002198:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	333f      	adds	r3, #63	; 0x3f
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	3344      	adds	r3, #68	; 0x44
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	3348      	adds	r3, #72	; 0x48
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	3350      	adds	r3, #80	; 0x50
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	3301      	adds	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d3af      	bcc.n	800215a <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	73fb      	strb	r3, [r7, #15]
 80021fe:	e044      	b.n	800228a <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002200:	7bfa      	ldrb	r2, [r7, #15]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002216:	7bfa      	ldrb	r2, [r7, #15]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800226e:	7bfa      	ldrb	r2, [r7, #15]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	3301      	adds	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	d3b5      	bcc.n	8002200 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	687e      	ldr	r6, [r7, #4]
 800229c:	466d      	mov	r5, sp
 800229e:	f106 0410 	add.w	r4, r6, #16
 80022a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80022b2:	1d33      	adds	r3, r6, #4
 80022b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b6:	6838      	ldr	r0, [r7, #0]
 80022b8:	f002 f974 	bl	80045a4 <USB_DevInit>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2202      	movs	r2, #2
 80022c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e014      	b.n	80022f8 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d102      	bne.n	80022ec <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f80a 	bl	8002300 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f002 fb34 	bl	800495e <USB_DevDisconnect>

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002300 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_PCDEx_ActivateLPM+0x44>)
 8002330:	4313      	orrs	r3, r2
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	10000003 	.word	0x10000003

08002348 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40007000 	.word	0x40007000

08002368 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002370:	2300      	movs	r3, #0
 8002372:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e25c      	b.n	8002838 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8087 	beq.w	800249a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800238c:	4b96      	ldr	r3, [pc, #600]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 030c 	and.w	r3, r3, #12
 8002394:	2b04      	cmp	r3, #4
 8002396:	d00c      	beq.n	80023b2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002398:	4b93      	ldr	r3, [pc, #588]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d112      	bne.n	80023ca <HAL_RCC_OscConfig+0x62>
 80023a4:	4b90      	ldr	r3, [pc, #576]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023b0:	d10b      	bne.n	80023ca <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b2:	4b8d      	ldr	r3, [pc, #564]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d06c      	beq.n	8002498 <HAL_RCC_OscConfig+0x130>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d168      	bne.n	8002498 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e236      	b.n	8002838 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d2:	d106      	bne.n	80023e2 <HAL_RCC_OscConfig+0x7a>
 80023d4:	4b84      	ldr	r3, [pc, #528]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a83      	ldr	r2, [pc, #524]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80023da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	e02e      	b.n	8002440 <HAL_RCC_OscConfig+0xd8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x9c>
 80023ea:	4b7f      	ldr	r3, [pc, #508]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a7e      	ldr	r2, [pc, #504]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80023f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b7c      	ldr	r3, [pc, #496]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7b      	ldr	r2, [pc, #492]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80023fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e01d      	b.n	8002440 <HAL_RCC_OscConfig+0xd8>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0xc0>
 800240e:	4b76      	ldr	r3, [pc, #472]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a75      	ldr	r2, [pc, #468]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 8002414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	4b73      	ldr	r3, [pc, #460]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a72      	ldr	r2, [pc, #456]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e00b      	b.n	8002440 <HAL_RCC_OscConfig+0xd8>
 8002428:	4b6f      	ldr	r3, [pc, #444]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a6e      	ldr	r2, [pc, #440]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 800242e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	4b6c      	ldr	r3, [pc, #432]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a6b      	ldr	r2, [pc, #428]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 800243a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe f904 	bl	8000654 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002450:	f7fe f900 	bl	8000654 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	; 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e1ea      	b.n	8002838 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	4b61      	ldr	r3, [pc, #388]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0xe8>
 800246e:	e014      	b.n	800249a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe f8f0 	bl	8000654 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002478:	f7fe f8ec 	bl	8000654 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	; 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e1d6      	b.n	8002838 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248a:	4b57      	ldr	r3, [pc, #348]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x110>
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d069      	beq.n	800257a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024a6:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00b      	beq.n	80024ca <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024b2:	4b4d      	ldr	r3, [pc, #308]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d11c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x190>
 80024be:	4b4a      	ldr	r3, [pc, #296]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d116      	bne.n	80024f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <HAL_RCC_OscConfig+0x17a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d001      	beq.n	80024e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e1aa      	b.n	8002838 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e2:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	493d      	ldr	r1, [pc, #244]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f6:	e040      	b.n	800257a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d023      	beq.n	8002548 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002500:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a38      	ldr	r2, [pc, #224]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe f8a2 	bl	8000654 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002514:	f7fe f89e 	bl	8000654 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e188      	b.n	8002838 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002526:	4b30      	ldr	r3, [pc, #192]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4929      	ldr	r1, [pc, #164]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
 8002546:	e018      	b.n	800257a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002548:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7fe f87e 	bl	8000654 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800255c:	f7fe f87a 	bl	8000654 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e164      	b.n	8002838 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256e:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d038      	beq.n	80025f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d019      	beq.n	80025c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800258e:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 8002590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002592:	4a15      	ldr	r2, [pc, #84]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259a:	f7fe f85b 	bl	8000654 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a2:	f7fe f857 	bl	8000654 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e141      	b.n	8002838 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80025b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x23a>
 80025c0:	e01a      	b.n	80025f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80025c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c6:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <HAL_RCC_OscConfig+0x280>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ce:	f7fe f841 	bl	8000654 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d6:	f7fe f83d 	bl	8000654 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d903      	bls.n	80025ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e127      	b.n	8002838 <HAL_RCC_OscConfig+0x4d0>
 80025e8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ec:	4b94      	ldr	r3, [pc, #592]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 80025ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1ee      	bne.n	80025d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80a4 	beq.w	800274e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002606:	4b8e      	ldr	r3, [pc, #568]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10d      	bne.n	800262e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	4b8b      	ldr	r3, [pc, #556]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4a8a      	ldr	r2, [pc, #552]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 8002618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	4b88      	ldr	r3, [pc, #544]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800262a:	2301      	movs	r3, #1
 800262c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800262e:	4b85      	ldr	r3, [pc, #532]	; (8002844 <HAL_RCC_OscConfig+0x4dc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d118      	bne.n	800266c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800263a:	4b82      	ldr	r3, [pc, #520]	; (8002844 <HAL_RCC_OscConfig+0x4dc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a81      	ldr	r2, [pc, #516]	; (8002844 <HAL_RCC_OscConfig+0x4dc>)
 8002640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002646:	f7fe f805 	bl	8000654 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800264e:	f7fe f801 	bl	8000654 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b64      	cmp	r3, #100	; 0x64
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0eb      	b.n	8002838 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002660:	4b78      	ldr	r3, [pc, #480]	; (8002844 <HAL_RCC_OscConfig+0x4dc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d106      	bne.n	8002682 <HAL_RCC_OscConfig+0x31a>
 8002674:	4b72      	ldr	r3, [pc, #456]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002678:	4a71      	ldr	r2, [pc, #452]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6713      	str	r3, [r2, #112]	; 0x70
 8002680:	e02d      	b.n	80026de <HAL_RCC_OscConfig+0x376>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x33c>
 800268a:	4b6d      	ldr	r3, [pc, #436]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	4a6c      	ldr	r2, [pc, #432]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	6713      	str	r3, [r2, #112]	; 0x70
 8002696:	4b6a      	ldr	r3, [pc, #424]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269a:	4a69      	ldr	r2, [pc, #420]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 800269c:	f023 0304 	bic.w	r3, r3, #4
 80026a0:	6713      	str	r3, [r2, #112]	; 0x70
 80026a2:	e01c      	b.n	80026de <HAL_RCC_OscConfig+0x376>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b05      	cmp	r3, #5
 80026aa:	d10c      	bne.n	80026c6 <HAL_RCC_OscConfig+0x35e>
 80026ac:	4b64      	ldr	r3, [pc, #400]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	4a63      	ldr	r2, [pc, #396]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 80026b2:	f043 0304 	orr.w	r3, r3, #4
 80026b6:	6713      	str	r3, [r2, #112]	; 0x70
 80026b8:	4b61      	ldr	r3, [pc, #388]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	4a60      	ldr	r2, [pc, #384]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6713      	str	r3, [r2, #112]	; 0x70
 80026c4:	e00b      	b.n	80026de <HAL_RCC_OscConfig+0x376>
 80026c6:	4b5e      	ldr	r3, [pc, #376]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	4a5d      	ldr	r2, [pc, #372]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	6713      	str	r3, [r2, #112]	; 0x70
 80026d2:	4b5b      	ldr	r3, [pc, #364]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	4a5a      	ldr	r2, [pc, #360]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 80026d8:	f023 0304 	bic.w	r3, r3, #4
 80026dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d015      	beq.n	8002712 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e6:	f7fd ffb5 	bl	8000654 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ec:	e00a      	b.n	8002704 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ee:	f7fd ffb1 	bl	8000654 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e099      	b.n	8002838 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002704:	4b4e      	ldr	r3, [pc, #312]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0ee      	beq.n	80026ee <HAL_RCC_OscConfig+0x386>
 8002710:	e014      	b.n	800273c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7fd ff9f 	bl	8000654 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002718:	e00a      	b.n	8002730 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800271a:	f7fd ff9b 	bl	8000654 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	f241 3288 	movw	r2, #5000	; 0x1388
 8002728:	4293      	cmp	r3, r2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e083      	b.n	8002838 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002730:	4b43      	ldr	r3, [pc, #268]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1ee      	bne.n	800271a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800273c:	7dfb      	ldrb	r3, [r7, #23]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d105      	bne.n	800274e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002742:	4b3f      	ldr	r3, [pc, #252]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	4a3e      	ldr	r2, [pc, #248]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 8002748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d06f      	beq.n	8002836 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002756:	4b3a      	ldr	r3, [pc, #232]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	2b08      	cmp	r3, #8
 8002760:	d067      	beq.n	8002832 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d149      	bne.n	80027fe <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276a:	4b35      	ldr	r3, [pc, #212]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a34      	ldr	r2, [pc, #208]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 8002770:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7fd ff6d 	bl	8000654 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277e:	f7fd ff69 	bl	8000654 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e053      	b.n	8002838 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002790:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f0      	bne.n	800277e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69da      	ldr	r2, [r3, #28]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	019b      	lsls	r3, r3, #6
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	085b      	lsrs	r3, r3, #1
 80027b4:	3b01      	subs	r3, #1
 80027b6:	041b      	lsls	r3, r3, #16
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	061b      	lsls	r3, r3, #24
 80027c0:	4313      	orrs	r3, r2
 80027c2:	4a1f      	ldr	r2, [pc, #124]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 80027c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027c8:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ca:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 80027d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fd ff3d 	bl	8000654 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027de:	f7fd ff39 	bl	8000654 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e023      	b.n	8002838 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x476>
 80027fc:	e01b      	b.n	8002836 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a0f      	ldr	r2, [pc, #60]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 8002804:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280a:	f7fd ff23 	bl	8000654 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002812:	f7fd ff1f 	bl	8000654 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e009      	b.n	8002838 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_RCC_OscConfig+0x4d8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f0      	bne.n	8002812 <HAL_RCC_OscConfig+0x4aa>
 8002830:	e001      	b.n	8002836 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40023800 	.word	0x40023800
 8002844:	40007000 	.word	0x40007000

08002848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0ce      	b.n	80029fe <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002860:	4b69      	ldr	r3, [pc, #420]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d910      	bls.n	8002890 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286e:	4b66      	ldr	r3, [pc, #408]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 020f 	bic.w	r2, r3, #15
 8002876:	4964      	ldr	r1, [pc, #400]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b62      	ldr	r3, [pc, #392]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0b6      	b.n	80029fe <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a8:	4b58      	ldr	r3, [pc, #352]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a57      	ldr	r2, [pc, #348]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c0:	4b52      	ldr	r3, [pc, #328]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a51      	ldr	r2, [pc, #324]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028cc:	4b4f      	ldr	r3, [pc, #316]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	494c      	ldr	r1, [pc, #304]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d040      	beq.n	800296c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d107      	bne.n	8002902 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b46      	ldr	r3, [pc, #280]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d115      	bne.n	800292a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e07d      	b.n	80029fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d107      	bne.n	800291a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290a:	4b40      	ldr	r3, [pc, #256]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d109      	bne.n	800292a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e071      	b.n	80029fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291a:	4b3c      	ldr	r3, [pc, #240]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e069      	b.n	80029fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800292a:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f023 0203 	bic.w	r2, r3, #3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4935      	ldr	r1, [pc, #212]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800293c:	f7fd fe8a 	bl	8000654 <HAL_GetTick>
 8002940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002942:	e00a      	b.n	800295a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002944:	f7fd fe86 	bl	8000654 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e051      	b.n	80029fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295a:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 020c 	and.w	r2, r3, #12
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	429a      	cmp	r2, r3
 800296a:	d1eb      	bne.n	8002944 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800296c:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d210      	bcs.n	800299c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 020f 	bic.w	r2, r3, #15
 8002982:	4921      	ldr	r1, [pc, #132]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e030      	b.n	80029fe <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a8:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4915      	ldr	r1, [pc, #84]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029c6:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	490d      	ldr	r1, [pc, #52]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029da:	f000 f81d 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 80029de:	4601      	mov	r1, r0
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	4a09      	ldr	r2, [pc, #36]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 80029ec:	5cd3      	ldrb	r3, [r2, r3]
 80029ee:	fa21 f303 	lsr.w	r3, r1, r3
 80029f2:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <HAL_RCC_ClockConfig+0x1cc>)
 80029f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7fd fde8 	bl	80005cc <HAL_InitTick>

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023c00 	.word	0x40023c00
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	08005fb0 	.word	0x08005fb0
 8002a14:	2000000c 	.word	0x2000000c

08002a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	2300      	movs	r3, #0
 8002a28:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a2e:	4b63      	ldr	r3, [pc, #396]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d007      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0x32>
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d008      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x38>
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f040 80b4 	bne.w	8002bac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a44:	4b5e      	ldr	r3, [pc, #376]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a46:	60bb      	str	r3, [r7, #8]
       break;
 8002a48:	e0b3      	b.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a4a:	4b5e      	ldr	r3, [pc, #376]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002a4c:	60bb      	str	r3, [r7, #8]
      break;
 8002a4e:	e0b0      	b.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a50:	4b5a      	ldr	r3, [pc, #360]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a58:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a5a:	4b58      	ldr	r3, [pc, #352]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d04a      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a66:	4b55      	ldr	r3, [pc, #340]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	099b      	lsrs	r3, r3, #6
 8002a6c:	f04f 0400 	mov.w	r4, #0
 8002a70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	ea03 0501 	and.w	r5, r3, r1
 8002a7c:	ea04 0602 	and.w	r6, r4, r2
 8002a80:	4629      	mov	r1, r5
 8002a82:	4632      	mov	r2, r6
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	f04f 0400 	mov.w	r4, #0
 8002a8c:	0154      	lsls	r4, r2, #5
 8002a8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a92:	014b      	lsls	r3, r1, #5
 8002a94:	4619      	mov	r1, r3
 8002a96:	4622      	mov	r2, r4
 8002a98:	1b49      	subs	r1, r1, r5
 8002a9a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	f04f 0400 	mov.w	r4, #0
 8002aa6:	0194      	lsls	r4, r2, #6
 8002aa8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002aac:	018b      	lsls	r3, r1, #6
 8002aae:	1a5b      	subs	r3, r3, r1
 8002ab0:	eb64 0402 	sbc.w	r4, r4, r2
 8002ab4:	f04f 0100 	mov.w	r1, #0
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	00e2      	lsls	r2, r4, #3
 8002abe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ac2:	00d9      	lsls	r1, r3, #3
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4614      	mov	r4, r2
 8002ac8:	195b      	adds	r3, r3, r5
 8002aca:	eb44 0406 	adc.w	r4, r4, r6
 8002ace:	f04f 0100 	mov.w	r1, #0
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	0262      	lsls	r2, r4, #9
 8002ad8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002adc:	0259      	lsls	r1, r3, #9
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4614      	mov	r4, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f04f 0400 	mov.w	r4, #0
 8002aec:	461a      	mov	r2, r3
 8002aee:	4623      	mov	r3, r4
 8002af0:	f7fd fbde 	bl	80002b0 <__aeabi_uldivmod>
 8002af4:	4603      	mov	r3, r0
 8002af6:	460c      	mov	r4, r1
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	e049      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afc:	4b2f      	ldr	r3, [pc, #188]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	099b      	lsrs	r3, r3, #6
 8002b02:	f04f 0400 	mov.w	r4, #0
 8002b06:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	ea03 0501 	and.w	r5, r3, r1
 8002b12:	ea04 0602 	and.w	r6, r4, r2
 8002b16:	4629      	mov	r1, r5
 8002b18:	4632      	mov	r2, r6
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	f04f 0400 	mov.w	r4, #0
 8002b22:	0154      	lsls	r4, r2, #5
 8002b24:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b28:	014b      	lsls	r3, r1, #5
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4622      	mov	r2, r4
 8002b2e:	1b49      	subs	r1, r1, r5
 8002b30:	eb62 0206 	sbc.w	r2, r2, r6
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	f04f 0400 	mov.w	r4, #0
 8002b3c:	0194      	lsls	r4, r2, #6
 8002b3e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b42:	018b      	lsls	r3, r1, #6
 8002b44:	1a5b      	subs	r3, r3, r1
 8002b46:	eb64 0402 	sbc.w	r4, r4, r2
 8002b4a:	f04f 0100 	mov.w	r1, #0
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	00e2      	lsls	r2, r4, #3
 8002b54:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b58:	00d9      	lsls	r1, r3, #3
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4614      	mov	r4, r2
 8002b5e:	195b      	adds	r3, r3, r5
 8002b60:	eb44 0406 	adc.w	r4, r4, r6
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	02a2      	lsls	r2, r4, #10
 8002b6e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b72:	0299      	lsls	r1, r3, #10
 8002b74:	460b      	mov	r3, r1
 8002b76:	4614      	mov	r4, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f04f 0400 	mov.w	r4, #0
 8002b82:	461a      	mov	r2, r3
 8002b84:	4623      	mov	r3, r4
 8002b86:	f7fd fb93 	bl	80002b0 <__aeabi_uldivmod>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	460c      	mov	r4, r1
 8002b8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002b90:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba8:	60bb      	str	r3, [r7, #8]
      break;
 8002baa:	e002      	b.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002bae:	60bb      	str	r3, [r7, #8]
      break;
 8002bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	00f42400 	.word	0x00f42400
 8002bc4:	007a1200 	.word	0x007a1200

08002bc8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bcc:	4b03      	ldr	r3, [pc, #12]	; (8002bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bce:	681b      	ldr	r3, [r3, #0]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	2000000c 	.word	0x2000000c

08002be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002be4:	f7ff fff0 	bl	8002bc8 <HAL_RCC_GetHCLKFreq>
 8002be8:	4601      	mov	r1, r0
 8002bea:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	0a9b      	lsrs	r3, r3, #10
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	4a03      	ldr	r2, [pc, #12]	; (8002c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bf6:	5cd3      	ldrb	r3, [r2, r3]
 8002bf8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40023800 	.word	0x40023800
 8002c04:	08005fc0 	.word	0x08005fc0

08002c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c0c:	f7ff ffdc 	bl	8002bc8 <HAL_RCC_GetHCLKFreq>
 8002c10:	4601      	mov	r1, r0
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	0b5b      	lsrs	r3, r3, #13
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	4a03      	ldr	r2, [pc, #12]	; (8002c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c1e:	5cd3      	ldrb	r3, [r2, r3]
 8002c20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	08005fc0 	.word	0x08005fc0

08002c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d012      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c58:	4b69      	ldr	r3, [pc, #420]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4a68      	ldr	r2, [pc, #416]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c62:	6093      	str	r3, [r2, #8]
 8002c64:	4b66      	ldr	r3, [pc, #408]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6c:	4964      	ldr	r1, [pc, #400]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d017      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c8a:	4b5d      	ldr	r3, [pc, #372]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c98:	4959      	ldr	r1, [pc, #356]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca8:	d101      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002caa:	2301      	movs	r3, #1
 8002cac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d017      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cc6:	4b4e      	ldr	r3, [pc, #312]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ccc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	494a      	ldr	r1, [pc, #296]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce4:	d101      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d02:	2301      	movs	r3, #1
 8002d04:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 808b 	beq.w	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d14:	4b3a      	ldr	r3, [pc, #232]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	4a39      	ldr	r2, [pc, #228]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d20:	4b37      	ldr	r3, [pc, #220]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d2c:	4b35      	ldr	r3, [pc, #212]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a34      	ldr	r2, [pc, #208]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d38:	f7fd fc8c 	bl	8000654 <HAL_GetTick>
 8002d3c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d40:	f7fd fc88 	bl	8000654 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e355      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d52:	4b2c      	ldr	r3, [pc, #176]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d5e:	4b28      	ldr	r3, [pc, #160]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d66:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d035      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d02e      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d7c:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d84:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d86:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d90:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d92:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	4a1a      	ldr	r2, [pc, #104]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d9e:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002da4:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d114      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fd fc50 	bl	8000654 <HAL_GetTick>
 8002db4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db6:	e00a      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db8:	f7fd fc4c 	bl	8000654 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e317      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dce:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0ee      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002de6:	d111      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002df6:	400b      	ands	r3, r1
 8002df8:	4901      	ldr	r1, [pc, #4]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40007000 	.word	0x40007000
 8002e08:	0ffffcff 	.word	0x0ffffcff
 8002e0c:	4bb0      	ldr	r3, [pc, #704]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4aaf      	ldr	r2, [pc, #700]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e16:	6093      	str	r3, [r2, #8]
 8002e18:	4bad      	ldr	r3, [pc, #692]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e24:	49aa      	ldr	r1, [pc, #680]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d010      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e36:	4ba6      	ldr	r3, [pc, #664]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e3c:	4aa4      	ldr	r2, [pc, #656]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e46:	4ba2      	ldr	r3, [pc, #648]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e48:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	499f      	ldr	r1, [pc, #636]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e64:	4b9a      	ldr	r3, [pc, #616]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e72:	4997      	ldr	r1, [pc, #604]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e86:	4b92      	ldr	r3, [pc, #584]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e94:	498e      	ldr	r1, [pc, #568]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ea8:	4b89      	ldr	r3, [pc, #548]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb6:	4986      	ldr	r1, [pc, #536]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002eca:	4b81      	ldr	r3, [pc, #516]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	497d      	ldr	r1, [pc, #500]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eec:	4b78      	ldr	r3, [pc, #480]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	f023 0203 	bic.w	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	4975      	ldr	r1, [pc, #468]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f0e:	4b70      	ldr	r3, [pc, #448]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f14:	f023 020c 	bic.w	r2, r3, #12
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1c:	496c      	ldr	r1, [pc, #432]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f30:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3e:	4964      	ldr	r1, [pc, #400]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f52:	4b5f      	ldr	r3, [pc, #380]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f58:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f60:	495b      	ldr	r1, [pc, #364]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f74:	4b56      	ldr	r3, [pc, #344]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	4953      	ldr	r1, [pc, #332]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f96:	4b4e      	ldr	r3, [pc, #312]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	494a      	ldr	r1, [pc, #296]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002fb8:	4b45      	ldr	r3, [pc, #276]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc6:	4942      	ldr	r1, [pc, #264]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002fda:	4b3d      	ldr	r3, [pc, #244]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe8:	4939      	ldr	r1, [pc, #228]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ffc:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800300a:	4931      	ldr	r1, [pc, #196]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d011      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800301e:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800302c:	4928      	ldr	r1, [pc, #160]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003038:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800303c:	d101      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800303e:	2301      	movs	r3, #1
 8003040:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800304e:	2301      	movs	r3, #1
 8003050:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800305e:	4b1c      	ldr	r3, [pc, #112]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003064:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306c:	4918      	ldr	r1, [pc, #96]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00b      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003090:	490f      	ldr	r1, [pc, #60]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d005      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030a6:	f040 80d8 	bne.w	800325a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030aa:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b6:	f7fd facd 	bl	8000654 <HAL_GetTick>
 80030ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030bc:	e00a      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030be:	f7fd fac9 	bl	8000654 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b64      	cmp	r3, #100	; 0x64
 80030ca:	d903      	bls.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e196      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80030d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030d4:	4b6c      	ldr	r3, [pc, #432]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ee      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d021      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d11d      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030f4:	4b64      	ldr	r3, [pc, #400]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fa:	0c1b      	lsrs	r3, r3, #16
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003102:	4b61      	ldr	r3, [pc, #388]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003108:	0e1b      	lsrs	r3, r3, #24
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	019a      	lsls	r2, r3, #6
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	431a      	orrs	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	061b      	lsls	r3, r3, #24
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	071b      	lsls	r3, r3, #28
 8003128:	4957      	ldr	r1, [pc, #348]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d004      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003144:	d00a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800314e:	2b00      	cmp	r3, #0
 8003150:	d02e      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800315a:	d129      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800315c:	4b4a      	ldr	r3, [pc, #296]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800315e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003162:	0c1b      	lsrs	r3, r3, #16
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800316a:	4b47      	ldr	r3, [pc, #284]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800316c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003170:	0f1b      	lsrs	r3, r3, #28
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	019a      	lsls	r2, r3, #6
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	041b      	lsls	r3, r3, #16
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	431a      	orrs	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	071b      	lsls	r3, r3, #28
 8003190:	493d      	ldr	r1, [pc, #244]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003198:	4b3b      	ldr	r3, [pc, #236]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800319a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800319e:	f023 021f 	bic.w	r2, r3, #31
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	3b01      	subs	r3, #1
 80031a8:	4937      	ldr	r1, [pc, #220]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d01d      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031bc:	4b32      	ldr	r3, [pc, #200]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80031be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c2:	0e1b      	lsrs	r3, r3, #24
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031ca:	4b2f      	ldr	r3, [pc, #188]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80031cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d0:	0f1b      	lsrs	r3, r3, #28
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	019a      	lsls	r2, r3, #6
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	041b      	lsls	r3, r3, #16
 80031e4:	431a      	orrs	r2, r3
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	061b      	lsls	r3, r3, #24
 80031ea:	431a      	orrs	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	071b      	lsls	r3, r3, #28
 80031f0:	4925      	ldr	r1, [pc, #148]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d011      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	019a      	lsls	r2, r3, #6
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	041b      	lsls	r3, r3, #16
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	061b      	lsls	r3, r3, #24
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	071b      	lsls	r3, r3, #28
 8003220:	4919      	ldr	r1, [pc, #100]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003228:	4b17      	ldr	r3, [pc, #92]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a16      	ldr	r2, [pc, #88]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800322e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003232:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003234:	f7fd fa0e 	bl	8000654 <HAL_GetTick>
 8003238:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800323a:	e008      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800323c:	f7fd fa0a 	bl	8000654 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	; 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e0d7      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800324e:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b01      	cmp	r3, #1
 800325e:	f040 80cd 	bne.w	80033fc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a08      	ldr	r2, [pc, #32]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800326c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326e:	f7fd f9f1 	bl	8000654 <HAL_GetTick>
 8003272:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003274:	e00a      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003276:	f7fd f9ed 	bl	8000654 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b64      	cmp	r3, #100	; 0x64
 8003282:	d903      	bls.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e0ba      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003288:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800328c:	4b5e      	ldr	r3, [pc, #376]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003298:	d0ed      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d02e      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d12a      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032c2:	4b51      	ldr	r3, [pc, #324]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c8:	0c1b      	lsrs	r3, r3, #16
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032d0:	4b4d      	ldr	r3, [pc, #308]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	0f1b      	lsrs	r3, r3, #28
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	019a      	lsls	r2, r3, #6
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	041b      	lsls	r3, r3, #16
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	061b      	lsls	r3, r3, #24
 80032f0:	431a      	orrs	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	071b      	lsls	r3, r3, #28
 80032f6:	4944      	ldr	r1, [pc, #272]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032fe:	4b42      	ldr	r3, [pc, #264]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003304:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	493d      	ldr	r1, [pc, #244]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d022      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003328:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800332c:	d11d      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800332e:	4b36      	ldr	r3, [pc, #216]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003334:	0e1b      	lsrs	r3, r3, #24
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800333c:	4b32      	ldr	r3, [pc, #200]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	0f1b      	lsrs	r3, r3, #28
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	019a      	lsls	r2, r3, #6
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	041b      	lsls	r3, r3, #16
 8003356:	431a      	orrs	r2, r3
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	061b      	lsls	r3, r3, #24
 800335c:	431a      	orrs	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	071b      	lsls	r3, r3, #28
 8003362:	4929      	ldr	r1, [pc, #164]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d028      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003376:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337c:	0e1b      	lsrs	r3, r3, #24
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003384:	4b20      	ldr	r3, [pc, #128]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	0c1b      	lsrs	r3, r3, #16
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	019a      	lsls	r2, r3, #6
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	041b      	lsls	r3, r3, #16
 800339c:	431a      	orrs	r2, r3
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	061b      	lsls	r3, r3, #24
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	071b      	lsls	r3, r3, #28
 80033aa:	4917      	ldr	r1, [pc, #92]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033b2:	4b15      	ldr	r3, [pc, #84]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80033b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	4911      	ldr	r1, [pc, #68]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033c8:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0e      	ldr	r2, [pc, #56]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80033ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d4:	f7fd f93e 	bl	8000654 <HAL_GetTick>
 80033d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033dc:	f7fd f93a 	bl	8000654 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	; 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e007      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033fa:	d1ef      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3720      	adds	r7, #32
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800

0800340c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e040      	b.n	80034a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f002 f86a 	bl	8005508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2224      	movs	r2, #36	; 0x24
 8003438:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0201 	bic.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 faec 	bl	8003a28 <UART_SetConfig>
 8003450:	4603      	mov	r3, r0
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e022      	b.n	80034a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fd84 	bl	8003f70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003486:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fe0b 	bl	80040b4 <UART_CheckIdleState>
 800349e:	4603      	mov	r3, r0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d17f      	bne.n	80035c0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <HAL_UART_Transmit+0x24>
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e078      	b.n	80035c2 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_UART_Transmit+0x36>
 80034da:	2302      	movs	r3, #2
 80034dc:	e071      	b.n	80035c2 <HAL_UART_Transmit+0x11a>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2221      	movs	r2, #33	; 0x21
 80034f0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80034f2:	f7fd f8af 	bl	8000654 <HAL_GetTick>
 80034f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003510:	d108      	bne.n	8003524 <HAL_UART_Transmit+0x7c>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e003      	b.n	800352c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003528:	2300      	movs	r3, #0
 800352a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800352c:	e02c      	b.n	8003588 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2200      	movs	r2, #0
 8003536:	2180      	movs	r1, #128	; 0x80
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fdea 	bl	8004112 <UART_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e03c      	b.n	80035c2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10b      	bne.n	8003566 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800355c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	3302      	adds	r3, #2
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	e007      	b.n	8003576 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	781a      	ldrb	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	3301      	adds	r3, #1
 8003574:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1cc      	bne.n	800352e <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2200      	movs	r2, #0
 800359c:	2140      	movs	r1, #64	; 0x40
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fdb7 	bl	8004112 <UART_WaitOnFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e009      	b.n	80035c2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3720      	adds	r7, #32
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	4613      	mov	r3, r2
 80035d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d144      	bne.n	800366c <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <HAL_UART_Transmit_IT+0x22>
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e03d      	b.n	800366e <HAL_UART_Transmit_IT+0xa2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_UART_Transmit_IT+0x34>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e036      	b.n	800366e <HAL_UART_Transmit_IT+0xa2>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	88fa      	ldrh	r2, [r7, #6]
 8003612:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	88fa      	ldrh	r2, [r7, #6]
 800361a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2221      	movs	r2, #33	; 0x21
 800362e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003638:	d107      	bne.n	800364a <HAL_UART_Transmit_IT+0x7e>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4a0d      	ldr	r2, [pc, #52]	; (800367c <HAL_UART_Transmit_IT+0xb0>)
 8003646:	665a      	str	r2, [r3, #100]	; 0x64
 8003648:	e002      	b.n	8003650 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4a0c      	ldr	r2, [pc, #48]	; (8003680 <HAL_UART_Transmit_IT+0xb4>)
 800364e:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003666:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	e000      	b.n	800366e <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	08004281 	.word	0x08004281
 8003680:	0800420f 	.word	0x0800420f

08003684 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	4613      	mov	r3, r2
 8003690:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003696:	2b20      	cmp	r3, #32
 8003698:	f040 808a 	bne.w	80037b0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_UART_Receive_IT+0x24>
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e082      	b.n	80037b2 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_UART_Receive_IT+0x36>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e07b      	b.n	80037b2 <HAL_UART_Receive_IT+0x12e>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	88fa      	ldrh	r2, [r7, #6]
 80036cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	88fa      	ldrh	r2, [r7, #6]
 80036d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e6:	d10e      	bne.n	8003706 <HAL_UART_Receive_IT+0x82>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <HAL_UART_Receive_IT+0x78>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036fa:	e02d      	b.n	8003758 <HAL_UART_Receive_IT+0xd4>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	22ff      	movs	r2, #255	; 0xff
 8003700:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003704:	e028      	b.n	8003758 <HAL_UART_Receive_IT+0xd4>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10d      	bne.n	800372a <HAL_UART_Receive_IT+0xa6>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d104      	bne.n	8003720 <HAL_UART_Receive_IT+0x9c>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	22ff      	movs	r2, #255	; 0xff
 800371a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800371e:	e01b      	b.n	8003758 <HAL_UART_Receive_IT+0xd4>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	227f      	movs	r2, #127	; 0x7f
 8003724:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003728:	e016      	b.n	8003758 <HAL_UART_Receive_IT+0xd4>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003732:	d10d      	bne.n	8003750 <HAL_UART_Receive_IT+0xcc>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d104      	bne.n	8003746 <HAL_UART_Receive_IT+0xc2>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	227f      	movs	r2, #127	; 0x7f
 8003740:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003744:	e008      	b.n	8003758 <HAL_UART_Receive_IT+0xd4>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	223f      	movs	r2, #63	; 0x3f
 800374a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800374e:	e003      	b.n	8003758 <HAL_UART_Receive_IT+0xd4>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2222      	movs	r2, #34	; 0x22
 8003762:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377c:	d107      	bne.n	800378e <HAL_UART_Receive_IT+0x10a>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	4a0d      	ldr	r2, [pc, #52]	; (80037c0 <HAL_UART_Receive_IT+0x13c>)
 800378a:	661a      	str	r2, [r3, #96]	; 0x60
 800378c:	e002      	b.n	8003794 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a0c      	ldr	r2, [pc, #48]	; (80037c4 <HAL_UART_Receive_IT+0x140>)
 8003792:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80037aa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e000      	b.n	80037b2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
  }
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	080043d5 	.word	0x080043d5
 80037c4:	0800432f 	.word	0x0800432f

080037c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d113      	bne.n	800381e <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00e      	beq.n	800381e <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80eb 	beq.w	80039ea <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	4798      	blx	r3
      }
      return;
 800381c:	e0e5      	b.n	80039ea <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80c0 	beq.w	80039a6 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d105      	bne.n	800383c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 80b5 	beq.w	80039a6 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00e      	beq.n	8003864 <HAL_UART_IRQHandler+0x9c>
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d009      	beq.n	8003864 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2201      	movs	r2, #1
 8003856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800385c:	f043 0201 	orr.w	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00e      	beq.n	800388c <HAL_UART_IRQHandler+0xc4>
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d009      	beq.n	800388c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2202      	movs	r2, #2
 800387e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003884:	f043 0204 	orr.w	r2, r3, #4
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00e      	beq.n	80038b4 <HAL_UART_IRQHandler+0xec>
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d009      	beq.n	80038b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2204      	movs	r2, #4
 80038a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ac:	f043 0202 	orr.w	r2, r3, #2
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d013      	beq.n	80038e6 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d104      	bne.n	80038d2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2208      	movs	r2, #8
 80038d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038de:	f043 0208 	orr.w	r2, r3, #8
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d07f      	beq.n	80039ee <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00c      	beq.n	8003912 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003916:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d004      	beq.n	8003930 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800392c:	2b00      	cmp	r3, #0
 800392e:	d031      	beq.n	8003994 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fc36 	bl	80041a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003940:	2b40      	cmp	r3, #64	; 0x40
 8003942:	d123      	bne.n	800398c <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003952:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d013      	beq.n	8003984 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003960:	4a26      	ldr	r2, [pc, #152]	; (80039fc <HAL_UART_IRQHandler+0x234>)
 8003962:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003968:	4618      	mov	r0, r3
 800396a:	f7fc ffb2 	bl	80008d2 <HAL_DMA_Abort_IT>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d016      	beq.n	80039a2 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800397e:	4610      	mov	r0, r2
 8003980:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003982:	e00e      	b.n	80039a2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f845 	bl	8003a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800398a:	e00a      	b.n	80039a2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f841 	bl	8003a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003992:	e006      	b.n	80039a2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f83d 	bl	8003a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80039a0:	e025      	b.n	80039ee <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a2:	bf00      	nop
    return;
 80039a4:	e023      	b.n	80039ee <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d017      	beq.n	80039f2 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
    }
    return;
 80039ca:	e012      	b.n	80039f2 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00e      	beq.n	80039f4 <HAL_UART_IRQHandler+0x22c>
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fc8b 	bl	80042fc <UART_EndTransmit_IT>
    return;
 80039e6:	bf00      	nop
 80039e8:	e004      	b.n	80039f4 <HAL_UART_IRQHandler+0x22c>
      return;
 80039ea:	bf00      	nop
 80039ec:	e002      	b.n	80039f4 <HAL_UART_IRQHandler+0x22c>
    return;
 80039ee:	bf00      	nop
 80039f0:	e000      	b.n	80039f4 <HAL_UART_IRQHandler+0x22c>
    return;
 80039f2:	bf00      	nop
  }

}
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	080041e3 	.word	0x080041e3

08003a00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4bb1      	ldr	r3, [pc, #708]	; (8003d1c <UART_SetConfig+0x2f4>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	6939      	ldr	r1, [r7, #16]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a9f      	ldr	r2, [pc, #636]	; (8003d20 <UART_SetConfig+0x2f8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d121      	bne.n	8003aec <UART_SetConfig+0xc4>
 8003aa8:	4b9e      	ldr	r3, [pc, #632]	; (8003d24 <UART_SetConfig+0x2fc>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d816      	bhi.n	8003ae4 <UART_SetConfig+0xbc>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <UART_SetConfig+0x94>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003acd 	.word	0x08003acd
 8003ac0:	08003ad9 	.word	0x08003ad9
 8003ac4:	08003ad3 	.word	0x08003ad3
 8003ac8:	08003adf 	.word	0x08003adf
 8003acc:	2301      	movs	r3, #1
 8003ace:	77fb      	strb	r3, [r7, #31]
 8003ad0:	e151      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	77fb      	strb	r3, [r7, #31]
 8003ad6:	e14e      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003ad8:	2304      	movs	r3, #4
 8003ada:	77fb      	strb	r3, [r7, #31]
 8003adc:	e14b      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003ade:	2308      	movs	r3, #8
 8003ae0:	77fb      	strb	r3, [r7, #31]
 8003ae2:	e148      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	bf00      	nop
 8003aea:	e144      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a8d      	ldr	r2, [pc, #564]	; (8003d28 <UART_SetConfig+0x300>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d134      	bne.n	8003b60 <UART_SetConfig+0x138>
 8003af6:	4b8b      	ldr	r3, [pc, #556]	; (8003d24 <UART_SetConfig+0x2fc>)
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b0c      	cmp	r3, #12
 8003b02:	d829      	bhi.n	8003b58 <UART_SetConfig+0x130>
 8003b04:	a201      	add	r2, pc, #4	; (adr r2, 8003b0c <UART_SetConfig+0xe4>)
 8003b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0a:	bf00      	nop
 8003b0c:	08003b41 	.word	0x08003b41
 8003b10:	08003b59 	.word	0x08003b59
 8003b14:	08003b59 	.word	0x08003b59
 8003b18:	08003b59 	.word	0x08003b59
 8003b1c:	08003b4d 	.word	0x08003b4d
 8003b20:	08003b59 	.word	0x08003b59
 8003b24:	08003b59 	.word	0x08003b59
 8003b28:	08003b59 	.word	0x08003b59
 8003b2c:	08003b47 	.word	0x08003b47
 8003b30:	08003b59 	.word	0x08003b59
 8003b34:	08003b59 	.word	0x08003b59
 8003b38:	08003b59 	.word	0x08003b59
 8003b3c:	08003b53 	.word	0x08003b53
 8003b40:	2300      	movs	r3, #0
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	e117      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003b46:	2302      	movs	r3, #2
 8003b48:	77fb      	strb	r3, [r7, #31]
 8003b4a:	e114      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003b4c:	2304      	movs	r3, #4
 8003b4e:	77fb      	strb	r3, [r7, #31]
 8003b50:	e111      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003b52:	2308      	movs	r3, #8
 8003b54:	77fb      	strb	r3, [r7, #31]
 8003b56:	e10e      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003b58:	2310      	movs	r3, #16
 8003b5a:	77fb      	strb	r3, [r7, #31]
 8003b5c:	bf00      	nop
 8003b5e:	e10a      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a71      	ldr	r2, [pc, #452]	; (8003d2c <UART_SetConfig+0x304>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d120      	bne.n	8003bac <UART_SetConfig+0x184>
 8003b6a:	4b6e      	ldr	r3, [pc, #440]	; (8003d24 <UART_SetConfig+0x2fc>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b74:	2b10      	cmp	r3, #16
 8003b76:	d00f      	beq.n	8003b98 <UART_SetConfig+0x170>
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d802      	bhi.n	8003b82 <UART_SetConfig+0x15a>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <UART_SetConfig+0x164>
 8003b80:	e010      	b.n	8003ba4 <UART_SetConfig+0x17c>
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	d005      	beq.n	8003b92 <UART_SetConfig+0x16a>
 8003b86:	2b30      	cmp	r3, #48	; 0x30
 8003b88:	d009      	beq.n	8003b9e <UART_SetConfig+0x176>
 8003b8a:	e00b      	b.n	8003ba4 <UART_SetConfig+0x17c>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	77fb      	strb	r3, [r7, #31]
 8003b90:	e0f1      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003b92:	2302      	movs	r3, #2
 8003b94:	77fb      	strb	r3, [r7, #31]
 8003b96:	e0ee      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	77fb      	strb	r3, [r7, #31]
 8003b9c:	e0eb      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	77fb      	strb	r3, [r7, #31]
 8003ba2:	e0e8      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	77fb      	strb	r3, [r7, #31]
 8003ba8:	bf00      	nop
 8003baa:	e0e4      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a5f      	ldr	r2, [pc, #380]	; (8003d30 <UART_SetConfig+0x308>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d120      	bne.n	8003bf8 <UART_SetConfig+0x1d0>
 8003bb6:	4b5b      	ldr	r3, [pc, #364]	; (8003d24 <UART_SetConfig+0x2fc>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bc0:	2b40      	cmp	r3, #64	; 0x40
 8003bc2:	d00f      	beq.n	8003be4 <UART_SetConfig+0x1bc>
 8003bc4:	2b40      	cmp	r3, #64	; 0x40
 8003bc6:	d802      	bhi.n	8003bce <UART_SetConfig+0x1a6>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <UART_SetConfig+0x1b0>
 8003bcc:	e010      	b.n	8003bf0 <UART_SetConfig+0x1c8>
 8003bce:	2b80      	cmp	r3, #128	; 0x80
 8003bd0:	d005      	beq.n	8003bde <UART_SetConfig+0x1b6>
 8003bd2:	2bc0      	cmp	r3, #192	; 0xc0
 8003bd4:	d009      	beq.n	8003bea <UART_SetConfig+0x1c2>
 8003bd6:	e00b      	b.n	8003bf0 <UART_SetConfig+0x1c8>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	77fb      	strb	r3, [r7, #31]
 8003bdc:	e0cb      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003bde:	2302      	movs	r3, #2
 8003be0:	77fb      	strb	r3, [r7, #31]
 8003be2:	e0c8      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003be4:	2304      	movs	r3, #4
 8003be6:	77fb      	strb	r3, [r7, #31]
 8003be8:	e0c5      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003bea:	2308      	movs	r3, #8
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e0c2      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003bf0:	2310      	movs	r3, #16
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	bf00      	nop
 8003bf6:	e0be      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a4d      	ldr	r2, [pc, #308]	; (8003d34 <UART_SetConfig+0x30c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d124      	bne.n	8003c4c <UART_SetConfig+0x224>
 8003c02:	4b48      	ldr	r3, [pc, #288]	; (8003d24 <UART_SetConfig+0x2fc>)
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c10:	d012      	beq.n	8003c38 <UART_SetConfig+0x210>
 8003c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c16:	d802      	bhi.n	8003c1e <UART_SetConfig+0x1f6>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <UART_SetConfig+0x204>
 8003c1c:	e012      	b.n	8003c44 <UART_SetConfig+0x21c>
 8003c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c22:	d006      	beq.n	8003c32 <UART_SetConfig+0x20a>
 8003c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c28:	d009      	beq.n	8003c3e <UART_SetConfig+0x216>
 8003c2a:	e00b      	b.n	8003c44 <UART_SetConfig+0x21c>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	77fb      	strb	r3, [r7, #31]
 8003c30:	e0a1      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003c32:	2302      	movs	r3, #2
 8003c34:	77fb      	strb	r3, [r7, #31]
 8003c36:	e09e      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003c38:	2304      	movs	r3, #4
 8003c3a:	77fb      	strb	r3, [r7, #31]
 8003c3c:	e09b      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003c3e:	2308      	movs	r3, #8
 8003c40:	77fb      	strb	r3, [r7, #31]
 8003c42:	e098      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003c44:	2310      	movs	r3, #16
 8003c46:	77fb      	strb	r3, [r7, #31]
 8003c48:	bf00      	nop
 8003c4a:	e094      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a39      	ldr	r2, [pc, #228]	; (8003d38 <UART_SetConfig+0x310>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d124      	bne.n	8003ca0 <UART_SetConfig+0x278>
 8003c56:	4b33      	ldr	r3, [pc, #204]	; (8003d24 <UART_SetConfig+0x2fc>)
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c64:	d012      	beq.n	8003c8c <UART_SetConfig+0x264>
 8003c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c6a:	d802      	bhi.n	8003c72 <UART_SetConfig+0x24a>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <UART_SetConfig+0x258>
 8003c70:	e012      	b.n	8003c98 <UART_SetConfig+0x270>
 8003c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c76:	d006      	beq.n	8003c86 <UART_SetConfig+0x25e>
 8003c78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c7c:	d009      	beq.n	8003c92 <UART_SetConfig+0x26a>
 8003c7e:	e00b      	b.n	8003c98 <UART_SetConfig+0x270>
 8003c80:	2301      	movs	r3, #1
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e077      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003c86:	2302      	movs	r3, #2
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	e074      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e071      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003c92:	2308      	movs	r3, #8
 8003c94:	77fb      	strb	r3, [r7, #31]
 8003c96:	e06e      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	bf00      	nop
 8003c9e:	e06a      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a25      	ldr	r2, [pc, #148]	; (8003d3c <UART_SetConfig+0x314>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d124      	bne.n	8003cf4 <UART_SetConfig+0x2cc>
 8003caa:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <UART_SetConfig+0x2fc>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb8:	d012      	beq.n	8003ce0 <UART_SetConfig+0x2b8>
 8003cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cbe:	d802      	bhi.n	8003cc6 <UART_SetConfig+0x29e>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d007      	beq.n	8003cd4 <UART_SetConfig+0x2ac>
 8003cc4:	e012      	b.n	8003cec <UART_SetConfig+0x2c4>
 8003cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cca:	d006      	beq.n	8003cda <UART_SetConfig+0x2b2>
 8003ccc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cd0:	d009      	beq.n	8003ce6 <UART_SetConfig+0x2be>
 8003cd2:	e00b      	b.n	8003cec <UART_SetConfig+0x2c4>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e04d      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	77fb      	strb	r3, [r7, #31]
 8003cde:	e04a      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	77fb      	strb	r3, [r7, #31]
 8003ce4:	e047      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	77fb      	strb	r3, [r7, #31]
 8003cea:	e044      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003cec:	2310      	movs	r3, #16
 8003cee:	77fb      	strb	r3, [r7, #31]
 8003cf0:	bf00      	nop
 8003cf2:	e040      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a11      	ldr	r2, [pc, #68]	; (8003d40 <UART_SetConfig+0x318>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d139      	bne.n	8003d72 <UART_SetConfig+0x34a>
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <UART_SetConfig+0x2fc>)
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d0c:	d027      	beq.n	8003d5e <UART_SetConfig+0x336>
 8003d0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d12:	d817      	bhi.n	8003d44 <UART_SetConfig+0x31c>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01c      	beq.n	8003d52 <UART_SetConfig+0x32a>
 8003d18:	e027      	b.n	8003d6a <UART_SetConfig+0x342>
 8003d1a:	bf00      	nop
 8003d1c:	efff69f3 	.word	0xefff69f3
 8003d20:	40011000 	.word	0x40011000
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40004400 	.word	0x40004400
 8003d2c:	40004800 	.word	0x40004800
 8003d30:	40004c00 	.word	0x40004c00
 8003d34:	40005000 	.word	0x40005000
 8003d38:	40011400 	.word	0x40011400
 8003d3c:	40007800 	.word	0x40007800
 8003d40:	40007c00 	.word	0x40007c00
 8003d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d48:	d006      	beq.n	8003d58 <UART_SetConfig+0x330>
 8003d4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d4e:	d009      	beq.n	8003d64 <UART_SetConfig+0x33c>
 8003d50:	e00b      	b.n	8003d6a <UART_SetConfig+0x342>
 8003d52:	2300      	movs	r3, #0
 8003d54:	77fb      	strb	r3, [r7, #31]
 8003d56:	e00e      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	e00b      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003d5e:	2304      	movs	r3, #4
 8003d60:	77fb      	strb	r3, [r7, #31]
 8003d62:	e008      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003d64:	2308      	movs	r3, #8
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e005      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003d6a:	2310      	movs	r3, #16
 8003d6c:	77fb      	strb	r3, [r7, #31]
 8003d6e:	bf00      	nop
 8003d70:	e001      	b.n	8003d76 <UART_SetConfig+0x34e>
 8003d72:	2310      	movs	r3, #16
 8003d74:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7e:	d17c      	bne.n	8003e7a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8003d80:	7ffb      	ldrb	r3, [r7, #31]
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d859      	bhi.n	8003e3a <UART_SetConfig+0x412>
 8003d86:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <UART_SetConfig+0x364>)
 8003d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8c:	08003db1 	.word	0x08003db1
 8003d90:	08003dcf 	.word	0x08003dcf
 8003d94:	08003ded 	.word	0x08003ded
 8003d98:	08003e3b 	.word	0x08003e3b
 8003d9c:	08003e05 	.word	0x08003e05
 8003da0:	08003e3b 	.word	0x08003e3b
 8003da4:	08003e3b 	.word	0x08003e3b
 8003da8:	08003e3b 	.word	0x08003e3b
 8003dac:	08003e23 	.word	0x08003e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003db0:	f7fe ff16 	bl	8002be0 <HAL_RCC_GetPCLK1Freq>
 8003db4:	4603      	mov	r3, r0
 8003db6:	005a      	lsls	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	085b      	lsrs	r3, r3, #1
 8003dbe:	441a      	add	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	61bb      	str	r3, [r7, #24]
        break;
 8003dcc:	e038      	b.n	8003e40 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003dce:	f7fe ff1b 	bl	8002c08 <HAL_RCC_GetPCLK2Freq>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	005a      	lsls	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	085b      	lsrs	r3, r3, #1
 8003ddc:	441a      	add	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	61bb      	str	r3, [r7, #24]
        break;
 8003dea:	e029      	b.n	8003e40 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	085a      	lsrs	r2, r3, #1
 8003df2:	4b5d      	ldr	r3, [pc, #372]	; (8003f68 <UART_SetConfig+0x540>)
 8003df4:	4413      	add	r3, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6852      	ldr	r2, [r2, #4]
 8003dfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	61bb      	str	r3, [r7, #24]
        break;
 8003e02:	e01d      	b.n	8003e40 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e04:	f7fe fe08 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	005a      	lsls	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	085b      	lsrs	r3, r3, #1
 8003e12:	441a      	add	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	61bb      	str	r3, [r7, #24]
        break;
 8003e20:	e00e      	b.n	8003e40 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	61bb      	str	r3, [r7, #24]
        break;
 8003e38:	e002      	b.n	8003e40 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]
        break;
 8003e3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b0f      	cmp	r3, #15
 8003e44:	d916      	bls.n	8003e74 <UART_SetConfig+0x44c>
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e4c:	d212      	bcs.n	8003e74 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	f023 030f 	bic.w	r3, r3, #15
 8003e56:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	085b      	lsrs	r3, r3, #1
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	89fb      	ldrh	r3, [r7, #14]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	89fa      	ldrh	r2, [r7, #14]
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	e06e      	b.n	8003f52 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	75fb      	strb	r3, [r7, #23]
 8003e78:	e06b      	b.n	8003f52 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8003e7a:	7ffb      	ldrb	r3, [r7, #31]
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d857      	bhi.n	8003f30 <UART_SetConfig+0x508>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <UART_SetConfig+0x460>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003ead 	.word	0x08003ead
 8003e8c:	08003ec9 	.word	0x08003ec9
 8003e90:	08003ee5 	.word	0x08003ee5
 8003e94:	08003f31 	.word	0x08003f31
 8003e98:	08003efd 	.word	0x08003efd
 8003e9c:	08003f31 	.word	0x08003f31
 8003ea0:	08003f31 	.word	0x08003f31
 8003ea4:	08003f31 	.word	0x08003f31
 8003ea8:	08003f19 	.word	0x08003f19
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003eac:	f7fe fe98 	bl	8002be0 <HAL_RCC_GetPCLK1Freq>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	085b      	lsrs	r3, r3, #1
 8003eb8:	441a      	add	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	61bb      	str	r3, [r7, #24]
        break;
 8003ec6:	e036      	b.n	8003f36 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003ec8:	f7fe fe9e 	bl	8002c08 <HAL_RCC_GetPCLK2Freq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	441a      	add	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	61bb      	str	r3, [r7, #24]
        break;
 8003ee2:	e028      	b.n	8003f36 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	085a      	lsrs	r2, r3, #1
 8003eea:	4b20      	ldr	r3, [pc, #128]	; (8003f6c <UART_SetConfig+0x544>)
 8003eec:	4413      	add	r3, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6852      	ldr	r2, [r2, #4]
 8003ef2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	61bb      	str	r3, [r7, #24]
        break;
 8003efa:	e01c      	b.n	8003f36 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003efc:	f7fe fd8c 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 8003f00:	4602      	mov	r2, r0
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	441a      	add	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	61bb      	str	r3, [r7, #24]
        break;
 8003f16:	e00e      	b.n	8003f36 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	61bb      	str	r3, [r7, #24]
        break;
 8003f2e:	e002      	b.n	8003f36 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	75fb      	strb	r3, [r7, #23]
        break;
 8003f34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b0f      	cmp	r3, #15
 8003f3a:	d908      	bls.n	8003f4e <UART_SetConfig+0x526>
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f42:	d204      	bcs.n	8003f4e <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	60da      	str	r2, [r3, #12]
 8003f4c:	e001      	b.n	8003f52 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3720      	adds	r7, #32
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	01e84800 	.word	0x01e84800
 8003f6c:	00f42400 	.word	0x00f42400

08003f70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01a      	beq.n	8004086 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800406e:	d10a      	bne.n	8004086 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	605a      	str	r2, [r3, #4]
  }
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80040c2:	f7fc fac7 	bl	8000654 <HAL_GetTick>
 80040c6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d10e      	bne.n	80040f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f814 	bl	8004112 <UART_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e00a      	b.n	800410a <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	4613      	mov	r3, r2
 8004120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004122:	e02a      	b.n	800417a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412a:	d026      	beq.n	800417a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412c:	f7fc fa92 	bl	8000654 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	429a      	cmp	r2, r3
 800413a:	d302      	bcc.n	8004142 <UART_WaitOnFlagUntilTimeout+0x30>
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d11b      	bne.n	800417a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004150:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e00f      	b.n	800419a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69da      	ldr	r2, [r3, #28]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4013      	ands	r3, r2
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	429a      	cmp	r2, r3
 8004188:	bf0c      	ite	eq
 800418a:	2301      	moveq	r3, #1
 800418c:	2300      	movne	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	429a      	cmp	r2, r3
 8004196:	d0c5      	beq.n	8004124 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041b8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	661a      	str	r2, [r3, #96]	; 0x60
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff fc07 	bl	8003a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800421a:	2b21      	cmp	r3, #33	; 0x21
 800421c:	d12a      	bne.n	8004274 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d110      	bne.n	800424c <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004238:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004248:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800424a:	e013      	b.n	8004274 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004250:	781a      	ldrb	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800428c:	2b21      	cmp	r3, #33	; 0x21
 800428e:	d12f      	bne.n	80042f0 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d110      	bne.n	80042be <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042aa:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ba:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80042bc:	e018      	b.n	80042f0 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d8:	1c9a      	adds	r2, r3, #2
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004312:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff fb6d 	bl	8003a00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004326:	bf00      	nop
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800433c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004342:	2b22      	cmp	r3, #34	; 0x22
 8004344:	d13a      	bne.n	80043bc <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800434e:	89bb      	ldrh	r3, [r7, #12]
 8004350:	b2d9      	uxtb	r1, r3
 8004352:	89fb      	ldrh	r3, [r7, #14]
 8004354:	b2da      	uxtb	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	400a      	ands	r2, r1
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d121      	bne.n	80043cc <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004396:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0201 	bic.w	r2, r2, #1
 80043a6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2220      	movs	r2, #32
 80043ac:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 ff5d 	bl	8005274 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043ba:	e007      	b.n	80043cc <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0208 	orr.w	r2, r2, #8
 80043ca:	619a      	str	r2, [r3, #24]
}
 80043cc:	bf00      	nop
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80043e2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e8:	2b22      	cmp	r3, #34	; 0x22
 80043ea:	d13a      	bne.n	8004462 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80043fa:	89ba      	ldrh	r2, [r7, #12]
 80043fc:	89fb      	ldrh	r3, [r7, #14]
 80043fe:	4013      	ands	r3, r2
 8004400:	b29a      	uxth	r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	1c9a      	adds	r2, r3, #2
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d121      	bne.n	8004472 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800443c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0201 	bic.w	r2, r2, #1
 800444c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 ff0a 	bl	8005274 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004460:	e007      	b.n	8004472 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0208 	orr.w	r2, r2, #8
 8004470:	619a      	str	r2, [r3, #24]
}
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800447c:	b084      	sub	sp, #16
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	f107 001c 	add.w	r0, r7, #28
 800448a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004490:	2b01      	cmp	r3, #1
 8004492:	d120      	bne.n	80044d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	4b20      	ldr	r3, [pc, #128]	; (8004528 <USB_CoreInit+0xac>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d105      	bne.n	80044ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fa60 	bl	8004990 <USB_CoreReset>
 80044d0:	4603      	mov	r3, r0
 80044d2:	73fb      	strb	r3, [r7, #15]
 80044d4:	e010      	b.n	80044f8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fa54 	bl	8004990 <USB_CoreReset>
 80044e8:	4603      	mov	r3, r0
 80044ea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d10b      	bne.n	8004516 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f043 0206 	orr.w	r2, r3, #6
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f043 0220 	orr.w	r2, r3, #32
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004516:	7bfb      	ldrb	r3, [r7, #15]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004522:	b004      	add	sp, #16
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	ffbdffbf 	.word	0xffbdffbf

0800452c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f023 0201 	bic.w	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	460b      	mov	r3, r1
 8004558:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d106      	bne.n	800457a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	60da      	str	r2, [r3, #12]
 8004578:	e00b      	b.n	8004592 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800457a:	78fb      	ldrb	r3, [r7, #3]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	60da      	str	r2, [r3, #12]
 800458c:	e001      	b.n	8004592 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e003      	b.n	800459a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004592:	2032      	movs	r0, #50	; 0x32
 8004594:	f7fc f86a 	bl	800066c <HAL_Delay>

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045a4:	b084      	sub	sp, #16
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b086      	sub	sp, #24
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045be:	2300      	movs	r3, #0
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	e009      	b.n	80045d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	3340      	adds	r3, #64	; 0x40
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	2200      	movs	r2, #0
 80045d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	3301      	adds	r3, #1
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b0e      	cmp	r3, #14
 80045dc:	d9f2      	bls.n	80045c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d112      	bne.n	800460a <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e005      	b.n	8004616 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800461c:	461a      	mov	r2, r3
 800461e:	2300      	movs	r3, #0
 8004620:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004628:	4619      	mov	r1, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004630:	461a      	mov	r2, r3
 8004632:	680b      	ldr	r3, [r1, #0]
 8004634:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004638:	2b01      	cmp	r3, #1
 800463a:	d10c      	bne.n	8004656 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d104      	bne.n	800464c <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004642:	2100      	movs	r1, #0
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f971 	bl	800492c <USB_SetDevSpeed>
 800464a:	e018      	b.n	800467e <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800464c:	2101      	movs	r1, #1
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f96c 	bl	800492c <USB_SetDevSpeed>
 8004654:	e013      	b.n	800467e <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004658:	2b03      	cmp	r3, #3
 800465a:	d10c      	bne.n	8004676 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 800465c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465e:	2b00      	cmp	r3, #0
 8004660:	d104      	bne.n	800466c <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004662:	2100      	movs	r1, #0
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f961 	bl	800492c <USB_SetDevSpeed>
 800466a:	e008      	b.n	800467e <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800466c:	2101      	movs	r1, #1
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f95c 	bl	800492c <USB_SetDevSpeed>
 8004674:	e003      	b.n	800467e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004676:	2103      	movs	r1, #3
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f957 	bl	800492c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800467e:	2110      	movs	r1, #16
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f90b 	bl	800489c <USB_FlushTxFifo>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f929 	bl	80048e8 <USB_FlushRxFifo>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a6:	461a      	mov	r2, r3
 80046a8:	2300      	movs	r3, #0
 80046aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b2:	461a      	mov	r2, r3
 80046b4:	2300      	movs	r3, #0
 80046b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046be:	461a      	mov	r2, r3
 80046c0:	2300      	movs	r3, #0
 80046c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046c4:	2300      	movs	r3, #0
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	e043      	b.n	8004752 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046e0:	d118      	bne.n	8004714 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10a      	bne.n	80046fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f4:	461a      	mov	r2, r3
 80046f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	e013      	b.n	8004726 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470a:	461a      	mov	r2, r3
 800470c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	e008      	b.n	8004726 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004720:	461a      	mov	r2, r3
 8004722:	2300      	movs	r3, #0
 8004724:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004732:	461a      	mov	r2, r3
 8004734:	2300      	movs	r3, #0
 8004736:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004744:	461a      	mov	r2, r3
 8004746:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800474a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	3301      	adds	r3, #1
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	429a      	cmp	r2, r3
 8004758:	d3b7      	bcc.n	80046ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800475a:	2300      	movs	r3, #0
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	e043      	b.n	80047e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004776:	d118      	bne.n	80047aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10a      	bne.n	8004794 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478a:	461a      	mov	r2, r3
 800478c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	e013      	b.n	80047bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a0:	461a      	mov	r2, r3
 80047a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	e008      	b.n	80047bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b6:	461a      	mov	r2, r3
 80047b8:	2300      	movs	r3, #0
 80047ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c8:	461a      	mov	r2, r3
 80047ca:	2300      	movs	r3, #0
 80047cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047da:	461a      	mov	r2, r3
 80047dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	3301      	adds	r3, #1
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d3b7      	bcc.n	8004760 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004802:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	2b01      	cmp	r3, #1
 8004808:	d110      	bne.n	800482c <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004810:	461a      	mov	r2, r3
 8004812:	4b1e      	ldr	r3, [pc, #120]	; (800488c <USB_DevInit+0x2e8>)
 8004814:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004824:	4619      	mov	r1, r3
 8004826:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <USB_DevInit+0x2ec>)
 8004828:	4313      	orrs	r3, r2
 800482a:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004838:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	2b00      	cmp	r3, #0
 800483e:	d105      	bne.n	800484c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	f043 0210 	orr.w	r2, r3, #16
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	4b10      	ldr	r3, [pc, #64]	; (8004894 <USB_DevInit+0x2f0>)
 8004852:	4313      	orrs	r3, r2
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f043 0208 	orr.w	r2, r3, #8
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800486a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d105      	bne.n	800487c <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699a      	ldr	r2, [r3, #24]
 8004874:	4b08      	ldr	r3, [pc, #32]	; (8004898 <USB_DevInit+0x2f4>)
 8004876:	4313      	orrs	r3, r2
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800487c:	7dfb      	ldrb	r3, [r7, #23]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004888:	b004      	add	sp, #16
 800488a:	4770      	bx	lr
 800488c:	00800100 	.word	0x00800100
 8004890:	00010003 	.word	0x00010003
 8004894:	803c3800 	.word	0x803c3800
 8004898:	40000004 	.word	0x40000004

0800489c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	019b      	lsls	r3, r3, #6
 80048ae:	f043 0220 	orr.w	r2, r3, #32
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3301      	adds	r3, #1
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <USB_FlushTxFifo+0x48>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d901      	bls.n	80048c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e006      	b.n	80048d6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f003 0320 	and.w	r3, r3, #32
 80048d0:	2b20      	cmp	r3, #32
 80048d2:	d0f0      	beq.n	80048b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	00030d40 	.word	0x00030d40

080048e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2210      	movs	r2, #16
 80048f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3301      	adds	r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a09      	ldr	r2, [pc, #36]	; (8004928 <USB_FlushRxFifo+0x40>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d901      	bls.n	800490c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e006      	b.n	800491a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	2b10      	cmp	r3, #16
 8004916:	d0f0      	beq.n	80048fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	00030d40 	.word	0x00030d40

0800492c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	68f9      	ldr	r1, [r7, #12]
 8004948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800494c:	4313      	orrs	r3, r2
 800494e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004978:	f043 0302 	orr.w	r3, r3, #2
 800497c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800497e:	2003      	movs	r0, #3
 8004980:	f7fb fe74 	bl	800066c <HAL_Delay>

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3301      	adds	r3, #1
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4a13      	ldr	r2, [pc, #76]	; (80049f4 <USB_CoreReset+0x64>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e01b      	b.n	80049e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	daf2      	bge.n	800499c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f043 0201 	orr.w	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3301      	adds	r3, #1
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4a09      	ldr	r2, [pc, #36]	; (80049f4 <USB_CoreReset+0x64>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d901      	bls.n	80049d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e006      	b.n	80049e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d0f0      	beq.n	80049c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	00030d40 	.word	0x00030d40

080049f8 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8004a00:	4a0a      	ldr	r2, [pc, #40]	; (8004a2c <BH1750_Init+0x34>)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8004a06:	f000 f813 	bl	8004a30 <BH1750_Reset>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d107      	bne.n	8004a20 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8004a10:	2045      	movs	r0, #69	; 0x45
 8004a12:	f000 f859 	bl	8004ac8 <BH1750_SetMtreg>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <BH1750_Init+0x28>
			return BH1750_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	e000      	b.n	8004a22 <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8004a20:	2301      	movs	r3, #1
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	200000a4 	.word	0x200000a4

08004a30 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8004a36:	2307      	movs	r3, #7
 8004a38:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8004a3a:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <BH1750_Reset+0x30>)
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	1dfa      	adds	r2, r7, #7
 8004a40:	230a      	movs	r3, #10
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	2301      	movs	r3, #1
 8004a46:	2146      	movs	r1, #70	; 0x46
 8004a48:	f7fc f9ec 	bl	8000e24 <HAL_I2C_Master_Transmit>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <BH1750_Reset+0x26>
		return BH1750_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e000      	b.n	8004a58 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 8004a56:	2301      	movs	r3, #1
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	200000a4 	.word	0x200000a4

08004a64 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8004a6e:	79fb      	ldrb	r3, [r7, #7]
 8004a70:	091b      	lsrs	r3, r3, #4
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <BH1750_SetMode+0x22>
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	095b      	lsrs	r3, r3, #5
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <BH1750_SetMode+0x22>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e018      	b.n	8004ab8 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	dd01      	ble.n	8004a94 <BH1750_SetMode+0x30>
 8004a90:	2301      	movs	r3, #1
 8004a92:	e011      	b.n	8004ab8 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 8004a94:	79fa      	ldrb	r2, [r7, #7]
 8004a96:	4b0a      	ldr	r3, [pc, #40]	; (8004ac0 <BH1750_SetMode+0x5c>)
 8004a98:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <BH1750_SetMode+0x60>)
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	1dfa      	adds	r2, r7, #7
 8004aa0:	230a      	movs	r3, #10
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	2146      	movs	r1, #70	; 0x46
 8004aa8:	f7fc f9bc 	bl	8000e24 <HAL_I2C_Master_Transmit>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <BH1750_SetMode+0x52>
		return BH1750_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e000      	b.n	8004ab8 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 8004ab6:	2301      	movs	r3, #1
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	200000a0 	.word	0x200000a0
 8004ac4:	200000a4 	.word	0x200000a4

08004ac8 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	4603      	mov	r3, r0
 8004ad0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	2b1e      	cmp	r3, #30
 8004ad6:	d902      	bls.n	8004ade <BH1750_SetMtreg+0x16>
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	2bff      	cmp	r3, #255	; 0xff
 8004adc:	d101      	bne.n	8004ae2 <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e037      	b.n	8004b52 <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 8004ae2:	4a1e      	ldr	r2, [pc, #120]	; (8004b5c <BH1750_SetMtreg+0x94>)
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8004af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	b25b      	sxtb	r3, r3
 8004b00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b04:	b25b      	sxtb	r3, r3
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8004b0a:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <BH1750_SetMtreg+0x98>)
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	f107 020c 	add.w	r2, r7, #12
 8004b12:	230a      	movs	r3, #10
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	2301      	movs	r3, #1
 8004b18:	2146      	movs	r1, #70	; 0x46
 8004b1a:	f7fc f983 	bl	8000e24 <HAL_I2C_Master_Transmit>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e012      	b.n	8004b52 <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8004b2c:	4b0c      	ldr	r3, [pc, #48]	; (8004b60 <BH1750_SetMtreg+0x98>)
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	f107 030c 	add.w	r3, r7, #12
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	230a      	movs	r3, #10
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	2146      	movs	r1, #70	; 0x46
 8004b3e:	f7fc f971 	bl	8000e24 <HAL_I2C_Master_Transmit>
 8004b42:	4603      	mov	r3, r0
 8004b44:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e000      	b.n	8004b52 <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8004b50:	2301      	movs	r3, #1
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	200000a8 	.word	0x200000a8
 8004b60:	200000a4 	.word	0x200000a4

08004b64 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8004b6c:	4b25      	ldr	r3, [pc, #148]	; (8004c04 <BH1750_ReadLight+0xa0>)
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	f107 0208 	add.w	r2, r7, #8
 8004b74:	230a      	movs	r3, #10
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	2302      	movs	r3, #2
 8004b7a:	2146      	movs	r1, #70	; 0x46
 8004b7c:	f7fc fa46 	bl	800100c <HAL_I2C_Master_Receive>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d138      	bne.n	8004bf8 <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 8004b86:	7a3b      	ldrb	r3, [r7, #8]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	7a7a      	ldrb	r2, [r7, #9]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b96:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <BH1750_ReadLight+0xa4>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b45      	cmp	r3, #69	; 0x45
 8004ba0:	d00f      	beq.n	8004bc2 <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 8004ba2:	4b19      	ldr	r3, [pc, #100]	; (8004c08 <BH1750_ReadLight+0xa4>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	ee07 3a90 	vmov	s15, r3
 8004baa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bae:	eddf 6a17 	vldr	s13, [pc, #92]	; 8004c0c <BH1750_ReadLight+0xa8>
 8004bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb6:	ed97 7a03 	vldr	s14, [r7, #12]
 8004bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bbe:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 8004bc2:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <BH1750_ReadLight+0xac>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b21      	cmp	r3, #33	; 0x21
 8004bc8:	d003      	beq.n	8004bd2 <BH1750_ReadLight+0x6e>
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <BH1750_ReadLight+0xac>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b11      	cmp	r3, #17
 8004bd0:	d107      	bne.n	8004be2 <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 8004bd2:	ed97 7a03 	vldr	s14, [r7, #12]
 8004bd6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004bda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bde:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8004be2:	ed97 7a03 	vldr	s14, [r7, #12]
 8004be6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004c14 <BH1750_ReadLight+0xb0>
 8004bea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	e000      	b.n	8004bfa <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8004bf8:	2301      	movs	r3, #1
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	200000a4 	.word	0x200000a4
 8004c08:	200000a8 	.word	0x200000a8
 8004c0c:	428a0000 	.word	0x428a0000
 8004c10:	200000a0 	.word	0x200000a0
 8004c14:	3f99999a 	.word	0x3f99999a

08004c18 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08c      	sub	sp, #48	; 0x30
 8004c1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c1e:	f107 031c 	add.w	r3, r7, #28
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	605a      	str	r2, [r3, #4]
 8004c28:	609a      	str	r2, [r3, #8]
 8004c2a:	60da      	str	r2, [r3, #12]
 8004c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c2e:	4b6d      	ldr	r3, [pc, #436]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	4a6c      	ldr	r2, [pc, #432]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004c34:	f043 0304 	orr.w	r3, r3, #4
 8004c38:	6313      	str	r3, [r2, #48]	; 0x30
 8004c3a:	4b6a      	ldr	r3, [pc, #424]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	61bb      	str	r3, [r7, #24]
 8004c44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c46:	4b67      	ldr	r3, [pc, #412]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	4a66      	ldr	r2, [pc, #408]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004c4c:	f043 0320 	orr.w	r3, r3, #32
 8004c50:	6313      	str	r3, [r2, #48]	; 0x30
 8004c52:	4b64      	ldr	r3, [pc, #400]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c5e:	4b61      	ldr	r3, [pc, #388]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	4a60      	ldr	r2, [pc, #384]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c68:	6313      	str	r3, [r2, #48]	; 0x30
 8004c6a:	4b5e      	ldr	r3, [pc, #376]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c72:	613b      	str	r3, [r7, #16]
 8004c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c76:	4b5b      	ldr	r3, [pc, #364]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	4a5a      	ldr	r2, [pc, #360]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004c7c:	f043 0301 	orr.w	r3, r3, #1
 8004c80:	6313      	str	r3, [r2, #48]	; 0x30
 8004c82:	4b58      	ldr	r3, [pc, #352]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c8e:	4b55      	ldr	r3, [pc, #340]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	4a54      	ldr	r2, [pc, #336]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004c94:	f043 0302 	orr.w	r3, r3, #2
 8004c98:	6313      	str	r3, [r2, #48]	; 0x30
 8004c9a:	4b52      	ldr	r3, [pc, #328]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	60bb      	str	r3, [r7, #8]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ca6:	4b4f      	ldr	r3, [pc, #316]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	4a4e      	ldr	r2, [pc, #312]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004cac:	f043 0308 	orr.w	r3, r3, #8
 8004cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cb2:	4b4c      	ldr	r3, [pc, #304]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	607b      	str	r3, [r7, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004cbe:	4b49      	ldr	r3, [pc, #292]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	4a48      	ldr	r2, [pc, #288]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cca:	4b46      	ldr	r3, [pc, #280]	; (8004de4 <MX_GPIO_Init+0x1cc>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f244 0181 	movw	r1, #16513	; 0x4081
 8004cdc:	4842      	ldr	r0, [pc, #264]	; (8004de8 <MX_GPIO_Init+0x1d0>)
 8004cde:	f7fb ffdd 	bl	8000c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2140      	movs	r1, #64	; 0x40
 8004ce6:	4841      	ldr	r0, [pc, #260]	; (8004dec <MX_GPIO_Init+0x1d4>)
 8004ce8:	f7fb ffd8 	bl	8000c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004cf2:	4b3f      	ldr	r3, [pc, #252]	; (8004df0 <MX_GPIO_Init+0x1d8>)
 8004cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004cfa:	f107 031c 	add.w	r3, r7, #28
 8004cfe:	4619      	mov	r1, r3
 8004d00:	483c      	ldr	r0, [pc, #240]	; (8004df4 <MX_GPIO_Init+0x1dc>)
 8004d02:	f7fb fe09 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004d06:	2332      	movs	r3, #50	; 0x32
 8004d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d12:	2303      	movs	r3, #3
 8004d14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d16:	230b      	movs	r3, #11
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d1a:	f107 031c 	add.w	r3, r7, #28
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4834      	ldr	r0, [pc, #208]	; (8004df4 <MX_GPIO_Init+0x1dc>)
 8004d22:	f7fb fdf9 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004d26:	2386      	movs	r3, #134	; 0x86
 8004d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d32:	2303      	movs	r3, #3
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d36:	230b      	movs	r3, #11
 8004d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d3a:	f107 031c 	add.w	r3, r7, #28
 8004d3e:	4619      	mov	r1, r3
 8004d40:	482d      	ldr	r0, [pc, #180]	; (8004df8 <MX_GPIO_Init+0x1e0>)
 8004d42:	f7fb fde9 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8004d46:	f244 0381 	movw	r3, #16513	; 0x4081
 8004d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d54:	2300      	movs	r3, #0
 8004d56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d58:	f107 031c 	add.w	r3, r7, #28
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4822      	ldr	r0, [pc, #136]	; (8004de8 <MX_GPIO_Init+0x1d0>)
 8004d60:	f7fb fdda 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d72:	2303      	movs	r3, #3
 8004d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d76:	230b      	movs	r3, #11
 8004d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004d7a:	f107 031c 	add.w	r3, r7, #28
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4819      	ldr	r0, [pc, #100]	; (8004de8 <MX_GPIO_Init+0x1d0>)
 8004d82:	f7fb fdc9 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8004d86:	2340      	movs	r3, #64	; 0x40
 8004d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d92:	2300      	movs	r3, #0
 8004d94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004d96:	f107 031c 	add.w	r3, r7, #28
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4813      	ldr	r0, [pc, #76]	; (8004dec <MX_GPIO_Init+0x1d4>)
 8004d9e:	f7fb fdbb 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004da2:	2380      	movs	r3, #128	; 0x80
 8004da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004da6:	2300      	movs	r3, #0
 8004da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004dae:	f107 031c 	add.w	r3, r7, #28
 8004db2:	4619      	mov	r1, r3
 8004db4:	480d      	ldr	r0, [pc, #52]	; (8004dec <MX_GPIO_Init+0x1d4>)
 8004db6:	f7fb fdaf 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004dba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004dcc:	230b      	movs	r3, #11
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004dd0:	f107 031c 	add.w	r3, r7, #28
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4805      	ldr	r0, [pc, #20]	; (8004dec <MX_GPIO_Init+0x1d4>)
 8004dd8:	f7fb fd9e 	bl	8000918 <HAL_GPIO_Init>

}
 8004ddc:	bf00      	nop
 8004dde:	3730      	adds	r7, #48	; 0x30
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40023800 	.word	0x40023800
 8004de8:	40020400 	.word	0x40020400
 8004dec:	40021800 	.word	0x40021800
 8004df0:	10110000 	.word	0x10110000
 8004df4:	40020800 	.word	0x40020800
 8004df8:	40020000 	.word	0x40020000

08004dfc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004e00:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <MX_I2C1_Init+0x74>)
 8004e02:	4a1c      	ldr	r2, [pc, #112]	; (8004e74 <MX_I2C1_Init+0x78>)
 8004e04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8004e06:	4b1a      	ldr	r3, [pc, #104]	; (8004e70 <MX_I2C1_Init+0x74>)
 8004e08:	4a1b      	ldr	r2, [pc, #108]	; (8004e78 <MX_I2C1_Init+0x7c>)
 8004e0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004e0c:	4b18      	ldr	r3, [pc, #96]	; (8004e70 <MX_I2C1_Init+0x74>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e12:	4b17      	ldr	r3, [pc, #92]	; (8004e70 <MX_I2C1_Init+0x74>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e18:	4b15      	ldr	r3, [pc, #84]	; (8004e70 <MX_I2C1_Init+0x74>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004e1e:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <MX_I2C1_Init+0x74>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004e24:	4b12      	ldr	r3, [pc, #72]	; (8004e70 <MX_I2C1_Init+0x74>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e2a:	4b11      	ldr	r3, [pc, #68]	; (8004e70 <MX_I2C1_Init+0x74>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e30:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <MX_I2C1_Init+0x74>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004e36:	480e      	ldr	r0, [pc, #56]	; (8004e70 <MX_I2C1_Init+0x74>)
 8004e38:	f7fb ff64 	bl	8000d04 <HAL_I2C_Init>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004e42:	f000 fa43 	bl	80052cc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004e46:	2100      	movs	r1, #0
 8004e48:	4809      	ldr	r0, [pc, #36]	; (8004e70 <MX_I2C1_Init+0x74>)
 8004e4a:	f7fd f8aa 	bl	8001fa2 <HAL_I2CEx_ConfigAnalogFilter>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004e54:	f000 fa3a 	bl	80052cc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4805      	ldr	r0, [pc, #20]	; (8004e70 <MX_I2C1_Init+0x74>)
 8004e5c:	f7fd f8ec 	bl	8002038 <HAL_I2CEx_ConfigDigitalFilter>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004e66:	f000 fa31 	bl	80052cc <Error_Handler>
  }

}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	200000ac 	.word	0x200000ac
 8004e74:	40005400 	.word	0x40005400
 8004e78:	00808cd2 	.word	0x00808cd2

08004e7c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8004e80:	4b1b      	ldr	r3, [pc, #108]	; (8004ef0 <MX_I2C2_Init+0x74>)
 8004e82:	4a1c      	ldr	r2, [pc, #112]	; (8004ef4 <MX_I2C2_Init+0x78>)
 8004e84:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8004e86:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <MX_I2C2_Init+0x74>)
 8004e88:	4a1b      	ldr	r2, [pc, #108]	; (8004ef8 <MX_I2C2_Init+0x7c>)
 8004e8a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004e8c:	4b18      	ldr	r3, [pc, #96]	; (8004ef0 <MX_I2C2_Init+0x74>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e92:	4b17      	ldr	r3, [pc, #92]	; (8004ef0 <MX_I2C2_Init+0x74>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e98:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <MX_I2C2_Init+0x74>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004e9e:	4b14      	ldr	r3, [pc, #80]	; (8004ef0 <MX_I2C2_Init+0x74>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004ea4:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <MX_I2C2_Init+0x74>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004eaa:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <MX_I2C2_Init+0x74>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004eb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <MX_I2C2_Init+0x74>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004eb6:	480e      	ldr	r0, [pc, #56]	; (8004ef0 <MX_I2C2_Init+0x74>)
 8004eb8:	f7fb ff24 	bl	8000d04 <HAL_I2C_Init>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004ec2:	f000 fa03 	bl	80052cc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	4809      	ldr	r0, [pc, #36]	; (8004ef0 <MX_I2C2_Init+0x74>)
 8004eca:	f7fd f86a 	bl	8001fa2 <HAL_I2CEx_ConfigAnalogFilter>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004ed4:	f000 f9fa 	bl	80052cc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4805      	ldr	r0, [pc, #20]	; (8004ef0 <MX_I2C2_Init+0x74>)
 8004edc:	f7fd f8ac 	bl	8002038 <HAL_I2CEx_ConfigDigitalFilter>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004ee6:	f000 f9f1 	bl	80052cc <Error_Handler>
  }

}
 8004eea:	bf00      	nop
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	200000f8 	.word	0x200000f8
 8004ef4:	40005800 	.word	0x40005800
 8004ef8:	00808cd2 	.word	0x00808cd2

08004efc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08c      	sub	sp, #48	; 0x30
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f04:	f107 031c 	add.w	r3, r7, #28
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	605a      	str	r2, [r3, #4]
 8004f0e:	609a      	str	r2, [r3, #8]
 8004f10:	60da      	str	r2, [r3, #12]
 8004f12:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a3e      	ldr	r2, [pc, #248]	; (8005014 <HAL_I2C_MspInit+0x118>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d139      	bne.n	8004f92 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f1e:	4b3e      	ldr	r3, [pc, #248]	; (8005018 <HAL_I2C_MspInit+0x11c>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	4a3d      	ldr	r2, [pc, #244]	; (8005018 <HAL_I2C_MspInit+0x11c>)
 8004f24:	f043 0302 	orr.w	r3, r3, #2
 8004f28:	6313      	str	r3, [r2, #48]	; 0x30
 8004f2a:	4b3b      	ldr	r3, [pc, #236]	; (8005018 <HAL_I2C_MspInit+0x11c>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8004f36:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f3c:	2312      	movs	r3, #18
 8004f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f40:	2301      	movs	r3, #1
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f44:	2303      	movs	r3, #3
 8004f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f48:	2304      	movs	r3, #4
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f4c:	f107 031c 	add.w	r3, r7, #28
 8004f50:	4619      	mov	r1, r3
 8004f52:	4832      	ldr	r0, [pc, #200]	; (800501c <HAL_I2C_MspInit+0x120>)
 8004f54:	f7fb fce0 	bl	8000918 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f58:	4b2f      	ldr	r3, [pc, #188]	; (8005018 <HAL_I2C_MspInit+0x11c>)
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	4a2e      	ldr	r2, [pc, #184]	; (8005018 <HAL_I2C_MspInit+0x11c>)
 8004f5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f62:	6413      	str	r3, [r2, #64]	; 0x40
 8004f64:	4b2c      	ldr	r3, [pc, #176]	; (8005018 <HAL_I2C_MspInit+0x11c>)
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004f70:	2200      	movs	r2, #0
 8004f72:	2100      	movs	r1, #0
 8004f74:	201f      	movs	r0, #31
 8004f76:	f7fb fc76 	bl	8000866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004f7a:	201f      	movs	r0, #31
 8004f7c:	f7fb fc8f 	bl	800089e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004f80:	2200      	movs	r2, #0
 8004f82:	2100      	movs	r1, #0
 8004f84:	2020      	movs	r0, #32
 8004f86:	f7fb fc6e 	bl	8000866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004f8a:	2020      	movs	r0, #32
 8004f8c:	f7fb fc87 	bl	800089e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004f90:	e03c      	b.n	800500c <HAL_I2C_MspInit+0x110>
  else if(i2cHandle->Instance==I2C2)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a22      	ldr	r2, [pc, #136]	; (8005020 <HAL_I2C_MspInit+0x124>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d137      	bne.n	800500c <HAL_I2C_MspInit+0x110>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f9c:	4b1e      	ldr	r3, [pc, #120]	; (8005018 <HAL_I2C_MspInit+0x11c>)
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	4a1d      	ldr	r2, [pc, #116]	; (8005018 <HAL_I2C_MspInit+0x11c>)
 8004fa2:	f043 0320 	orr.w	r3, r3, #32
 8004fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa8:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <HAL_I2C_MspInit+0x11c>)
 8004faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	613b      	str	r3, [r7, #16]
 8004fb2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fb8:	2312      	movs	r3, #18
 8004fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004fc8:	f107 031c 	add.w	r3, r7, #28
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4815      	ldr	r0, [pc, #84]	; (8005024 <HAL_I2C_MspInit+0x128>)
 8004fd0:	f7fb fca2 	bl	8000918 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004fd4:	4b10      	ldr	r3, [pc, #64]	; (8005018 <HAL_I2C_MspInit+0x11c>)
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	4a0f      	ldr	r2, [pc, #60]	; (8005018 <HAL_I2C_MspInit+0x11c>)
 8004fda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fde:	6413      	str	r3, [r2, #64]	; 0x40
 8004fe0:	4b0d      	ldr	r3, [pc, #52]	; (8005018 <HAL_I2C_MspInit+0x11c>)
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8004fec:	2200      	movs	r2, #0
 8004fee:	2100      	movs	r1, #0
 8004ff0:	2021      	movs	r0, #33	; 0x21
 8004ff2:	f7fb fc38 	bl	8000866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004ff6:	2021      	movs	r0, #33	; 0x21
 8004ff8:	f7fb fc51 	bl	800089e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2100      	movs	r1, #0
 8005000:	2022      	movs	r0, #34	; 0x22
 8005002:	f7fb fc30 	bl	8000866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8005006:	2022      	movs	r0, #34	; 0x22
 8005008:	f7fb fc49 	bl	800089e <HAL_NVIC_EnableIRQ>
}
 800500c:	bf00      	nop
 800500e:	3730      	adds	r7, #48	; 0x30
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40005400 	.word	0x40005400
 8005018:	40023800 	.word	0x40023800
 800501c:	40020400 	.word	0x40020400
 8005020:	40005800 	.word	0x40005800
 8005024:	40021400 	.word	0x40021400

08005028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800502c:	f7fb fac0 	bl	80005b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005030:	f000 f88c 	bl	800514c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005034:	f7ff fdf0 	bl	8004c18 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8005038:	f000 fa36 	bl	80054a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800503c:	f000 fab0 	bl	80055a0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8005040:	f7ff fedc 	bl	8004dfc <MX_I2C1_Init>
  MX_I2C2_Init();
 8005044:	f7ff ff1a 	bl	8004e7c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, rx_buff, 4);
 8005048:	2204      	movs	r2, #4
 800504a:	4931      	ldr	r1, [pc, #196]	; (8005110 <main+0xe8>)
 800504c:	4831      	ldr	r0, [pc, #196]	; (8005114 <main+0xec>)
 800504e:	f7fe fb19 	bl	8003684 <HAL_UART_Receive_IT>
  BH1750_Init(&hi2c1);
 8005052:	4831      	ldr	r0, [pc, #196]	; (8005118 <main+0xf0>)
 8005054:	f7ff fcd0 	bl	80049f8 <BH1750_Init>
  BH1750_Init(&hi2c2);
 8005058:	4830      	ldr	r0, [pc, #192]	; (800511c <main+0xf4>)
 800505a:	f7ff fccd 	bl	80049f8 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 800505e:	2011      	movs	r0, #17
 8005060:	f7ff fd00 	bl	8004a64 <BH1750_SetMode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      //! testowa obsługa USARTA od przycisku
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)==GPIO_PIN_SET)
 8005064:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005068:	482d      	ldr	r0, [pc, #180]	; (8005120 <main+0xf8>)
 800506a:	f7fb fdff 	bl	8000c6c <HAL_GPIO_ReadPin>
 800506e:	4603      	mov	r3, r0
 8005070:	2b01      	cmp	r3, #1
 8005072:	d113      	bne.n	800509c <main+0x74>
	  {
		  n=sprintf(tx_buff,"test");
 8005074:	4b2b      	ldr	r3, [pc, #172]	; (8005124 <main+0xfc>)
 8005076:	4a2c      	ldr	r2, [pc, #176]	; (8005128 <main+0x100>)
 8005078:	6810      	ldr	r0, [r2, #0]
 800507a:	6018      	str	r0, [r3, #0]
 800507c:	7912      	ldrb	r2, [r2, #4]
 800507e:	711a      	strb	r2, [r3, #4]
 8005080:	2204      	movs	r2, #4
 8005082:	4b2a      	ldr	r3, [pc, #168]	; (800512c <main+0x104>)
 8005084:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart3, tx_buff, n);
 8005086:	4b29      	ldr	r3, [pc, #164]	; (800512c <main+0x104>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	4925      	ldr	r1, [pc, #148]	; (8005124 <main+0xfc>)
 8005090:	4820      	ldr	r0, [pc, #128]	; (8005114 <main+0xec>)
 8005092:	f7fe fa9b 	bl	80035cc <HAL_UART_Transmit_IT>
		  HAL_Delay(200);
 8005096:	20c8      	movs	r0, #200	; 0xc8
 8005098:	f7fb fae8 	bl	800066c <HAL_Delay>
	  }
	 // HAL_UART_Receive_IT(&huart3, &msg, 12);
	 	  if(BH1750_OK == BH1750_ReadLight(&BH1750_lux_1))
 800509c:	4824      	ldr	r0, [pc, #144]	; (8005130 <main+0x108>)
 800509e:	f7ff fd61 	bl	8004b64 <BH1750_ReadLight>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1dd      	bne.n	8005064 <main+0x3c>
	 	  	  {
	 		  	  BH1750_lux_int_1 = BH1750_lux_1;
 80050a8:	4b21      	ldr	r3, [pc, #132]	; (8005130 <main+0x108>)
 80050aa:	edd3 7a00 	vldr	s15, [r3]
 80050ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050b2:	ee17 2a90 	vmov	r2, s15
 80050b6:	4b1f      	ldr	r3, [pc, #124]	; (8005134 <main+0x10c>)
 80050b8:	601a      	str	r2, [r3, #0]
	 	  		  size = sprintf(buffer, "BH1750 Lux: %d", BH1750_lux_int_1);
 80050ba:	4b1e      	ldr	r3, [pc, #120]	; (8005134 <main+0x10c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	491d      	ldr	r1, [pc, #116]	; (8005138 <main+0x110>)
 80050c2:	481e      	ldr	r0, [pc, #120]	; (800513c <main+0x114>)
 80050c4:	f000 fb52 	bl	800576c <siprintf>
 80050c8:	4603      	mov	r3, r0
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	4b1c      	ldr	r3, [pc, #112]	; (8005140 <main+0x118>)
 80050ce:	701a      	strb	r2, [r3, #0]
	 	  	  	  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, size, 200);
 80050d0:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <main+0x118>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	23c8      	movs	r3, #200	; 0xc8
 80050d8:	4918      	ldr	r1, [pc, #96]	; (800513c <main+0x114>)
 80050da:	480e      	ldr	r0, [pc, #56]	; (8005114 <main+0xec>)
 80050dc:	f7fe f9e4 	bl	80034a8 <HAL_UART_Transmit>

	 	  	  	 size = sprintf(buffer, ", %d\n\r", wypelnienie);
 80050e0:	4b18      	ldr	r3, [pc, #96]	; (8005144 <main+0x11c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	4918      	ldr	r1, [pc, #96]	; (8005148 <main+0x120>)
 80050e8:	4814      	ldr	r0, [pc, #80]	; (800513c <main+0x114>)
 80050ea:	f000 fb3f 	bl	800576c <siprintf>
 80050ee:	4603      	mov	r3, r0
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	4b13      	ldr	r3, [pc, #76]	; (8005140 <main+0x118>)
 80050f4:	701a      	strb	r2, [r3, #0]
	 	  	  	 HAL_UART_Transmit(&huart3, (uint8_t*)buffer, size, 200);
 80050f6:	4b12      	ldr	r3, [pc, #72]	; (8005140 <main+0x118>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	23c8      	movs	r3, #200	; 0xc8
 80050fe:	490f      	ldr	r1, [pc, #60]	; (800513c <main+0x114>)
 8005100:	4804      	ldr	r0, [pc, #16]	; (8005114 <main+0xec>)
 8005102:	f7fe f9d1 	bl	80034a8 <HAL_UART_Transmit>
	 	  	  	  HAL_Delay(200);
 8005106:	20c8      	movs	r0, #200	; 0xc8
 8005108:	f7fb fab0 	bl	800066c <HAL_Delay>
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)==GPIO_PIN_SET)
 800510c:	e7aa      	b.n	8005064 <main+0x3c>
 800510e:	bf00      	nop
 8005110:	20000148 	.word	0x20000148
 8005114:	20000198 	.word	0x20000198
 8005118:	200000ac 	.word	0x200000ac
 800511c:	200000f8 	.word	0x200000f8
 8005120:	40020800 	.word	0x40020800
 8005124:	2000018c 	.word	0x2000018c
 8005128:	08005f90 	.word	0x08005f90
 800512c:	20000144 	.word	0x20000144
 8005130:	20000184 	.word	0x20000184
 8005134:	20000190 	.word	0x20000190
 8005138:	08005f98 	.word	0x08005f98
 800513c:	2000015c 	.word	0x2000015c
 8005140:	20000188 	.word	0x20000188
 8005144:	20000008 	.word	0x20000008
 8005148:	08005fa8 	.word	0x08005fa8

0800514c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b0b4      	sub	sp, #208	; 0xd0
 8005150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005152:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005156:	2230      	movs	r2, #48	; 0x30
 8005158:	2100      	movs	r1, #0
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fafe 	bl	800575c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005160:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	605a      	str	r2, [r3, #4]
 800516a:	609a      	str	r2, [r3, #8]
 800516c:	60da      	str	r2, [r3, #12]
 800516e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005170:	f107 0308 	add.w	r3, r7, #8
 8005174:	2284      	movs	r2, #132	; 0x84
 8005176:	2100      	movs	r1, #0
 8005178:	4618      	mov	r0, r3
 800517a:	f000 faef 	bl	800575c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800517e:	f7fd f8e3 	bl	8002348 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005182:	4b39      	ldr	r3, [pc, #228]	; (8005268 <SystemClock_Config+0x11c>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	4a38      	ldr	r2, [pc, #224]	; (8005268 <SystemClock_Config+0x11c>)
 8005188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518c:	6413      	str	r3, [r2, #64]	; 0x40
 800518e:	4b36      	ldr	r3, [pc, #216]	; (8005268 <SystemClock_Config+0x11c>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005196:	607b      	str	r3, [r7, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800519a:	4b34      	ldr	r3, [pc, #208]	; (800526c <SystemClock_Config+0x120>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80051a2:	4a32      	ldr	r2, [pc, #200]	; (800526c <SystemClock_Config+0x120>)
 80051a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	4b30      	ldr	r3, [pc, #192]	; (800526c <SystemClock_Config+0x120>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051b2:	603b      	str	r3, [r7, #0]
 80051b4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80051b6:	2301      	movs	r3, #1
 80051b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80051bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80051c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051c4:	2302      	movs	r3, #2
 80051c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80051ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80051ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80051d2:	2304      	movs	r3, #4
 80051d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80051d8:	2348      	movs	r3, #72	; 0x48
 80051da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80051de:	2302      	movs	r3, #2
 80051e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80051e4:	2303      	movs	r3, #3
 80051e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fd f8ba 	bl	8002368 <HAL_RCC_OscConfig>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80051fa:	f000 f867 	bl	80052cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051fe:	230f      	movs	r3, #15
 8005200:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005204:	2302      	movs	r3, #2
 8005206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800520a:	2300      	movs	r3, #0
 800520c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005218:	2300      	movs	r3, #0
 800521a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800521e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005222:	2102      	movs	r1, #2
 8005224:	4618      	mov	r0, r3
 8005226:	f7fd fb0f 	bl	8002848 <HAL_RCC_ClockConfig>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8005230:	f000 f84c 	bl	80052cc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8005234:	4b0e      	ldr	r3, [pc, #56]	; (8005270 <SystemClock_Config+0x124>)
 8005236:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005238:	2300      	movs	r3, #0
 800523a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800523c:	2300      	movs	r3, #0
 800523e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005240:	2300      	movs	r3, #0
 8005242:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8005244:	2300      	movs	r3, #0
 8005246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800524a:	f107 0308 	add.w	r3, r7, #8
 800524e:	4618      	mov	r0, r3
 8005250:	f7fd fcee 	bl	8002c30 <HAL_RCCEx_PeriphCLKConfig>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <SystemClock_Config+0x112>
  {
    Error_Handler();
 800525a:	f000 f837 	bl	80052cc <Error_Handler>
  }
}
 800525e:	bf00      	nop
 8005260:	37d0      	adds	r7, #208	; 0xd0
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40023800 	.word	0x40023800
 800526c:	40007000 	.word	0x40007000
 8005270:	0020c100 	.word	0x0020c100

08005274 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//! przerwanie od USARTA sterujące tymczasowo diodami na płytce
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
	if(rx_buff[3]=='R')
 800527c:	4b10      	ldr	r3, [pc, #64]	; (80052c0 <HAL_UART_RxCpltCallback+0x4c>)
 800527e:	78db      	ldrb	r3, [r3, #3]
 8005280:	2b52      	cmp	r3, #82	; 0x52
 8005282:	d104      	bne.n	800528e <HAL_UART_RxCpltCallback+0x1a>
		{
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8005284:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005288:	480e      	ldr	r0, [pc, #56]	; (80052c4 <HAL_UART_RxCpltCallback+0x50>)
 800528a:	f7fb fd20 	bl	8000cce <HAL_GPIO_TogglePin>
		}
	if(rx_buff[3]=='B')
 800528e:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <HAL_UART_RxCpltCallback+0x4c>)
 8005290:	78db      	ldrb	r3, [r3, #3]
 8005292:	2b42      	cmp	r3, #66	; 0x42
 8005294:	d103      	bne.n	800529e <HAL_UART_RxCpltCallback+0x2a>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8005296:	2180      	movs	r1, #128	; 0x80
 8005298:	480a      	ldr	r0, [pc, #40]	; (80052c4 <HAL_UART_RxCpltCallback+0x50>)
 800529a:	f7fb fd18 	bl	8000cce <HAL_GPIO_TogglePin>
		}
	if(rx_buff[3]=='G')
 800529e:	4b08      	ldr	r3, [pc, #32]	; (80052c0 <HAL_UART_RxCpltCallback+0x4c>)
 80052a0:	78db      	ldrb	r3, [r3, #3]
 80052a2:	2b47      	cmp	r3, #71	; 0x47
 80052a4:	d103      	bne.n	80052ae <HAL_UART_RxCpltCallback+0x3a>
		{
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80052a6:	2101      	movs	r1, #1
 80052a8:	4806      	ldr	r0, [pc, #24]	; (80052c4 <HAL_UART_RxCpltCallback+0x50>)
 80052aa:	f7fb fd10 	bl	8000cce <HAL_GPIO_TogglePin>
		}
	HAL_UART_Receive_IT(&huart3, rx_buff, 4);
 80052ae:	2204      	movs	r2, #4
 80052b0:	4903      	ldr	r1, [pc, #12]	; (80052c0 <HAL_UART_RxCpltCallback+0x4c>)
 80052b2:	4805      	ldr	r0, [pc, #20]	; (80052c8 <HAL_UART_RxCpltCallback+0x54>)
 80052b4:	f7fe f9e6 	bl	8003684 <HAL_UART_Receive_IT>
//	value_i2 = 10*(atoi(value2));
//	value_i3= 10*(atoi(value3));
//
//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, value_i1);

}
 80052b8:	bf00      	nop
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20000148 	.word	0x20000148
 80052c4:	40020400 	.word	0x40020400
 80052c8:	20000198 	.word	0x20000198

080052cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80052d0:	bf00      	nop
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80052e2:	4b0f      	ldr	r3, [pc, #60]	; (8005320 <HAL_MspInit+0x44>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	4a0e      	ldr	r2, [pc, #56]	; (8005320 <HAL_MspInit+0x44>)
 80052e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ec:	6413      	str	r3, [r2, #64]	; 0x40
 80052ee:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <HAL_MspInit+0x44>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f6:	607b      	str	r3, [r7, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052fa:	4b09      	ldr	r3, [pc, #36]	; (8005320 <HAL_MspInit+0x44>)
 80052fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fe:	4a08      	ldr	r2, [pc, #32]	; (8005320 <HAL_MspInit+0x44>)
 8005300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005304:	6453      	str	r3, [r2, #68]	; 0x44
 8005306:	4b06      	ldr	r3, [pc, #24]	; (8005320 <HAL_MspInit+0x44>)
 8005308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40023800 	.word	0x40023800

08005324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005328:	bf00      	nop
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005332:	b480      	push	{r7}
 8005334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005336:	e7fe      	b.n	8005336 <HardFault_Handler+0x4>

08005338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800533c:	e7fe      	b.n	800533c <MemManage_Handler+0x4>

0800533e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800533e:	b480      	push	{r7}
 8005340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005342:	e7fe      	b.n	8005342 <BusFault_Handler+0x4>

08005344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005348:	e7fe      	b.n	8005348 <UsageFault_Handler+0x4>

0800534a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800534a:	b480      	push	{r7}
 800534c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800534e:	bf00      	nop
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800535c:	bf00      	nop
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005366:	b480      	push	{r7}
 8005368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800536a:	bf00      	nop
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005378:	f7fb f958 	bl	800062c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800537c:	bf00      	nop
 800537e:	bd80      	pop	{r7, pc}

08005380 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005384:	4802      	ldr	r0, [pc, #8]	; (8005390 <I2C1_EV_IRQHandler+0x10>)
 8005386:	f7fb ff37 	bl	80011f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800538a:	bf00      	nop
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	200000ac 	.word	0x200000ac

08005394 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005398:	4802      	ldr	r0, [pc, #8]	; (80053a4 <I2C1_ER_IRQHandler+0x10>)
 800539a:	f7fb ff47 	bl	800122c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800539e:	bf00      	nop
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	200000ac 	.word	0x200000ac

080053a8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80053ac:	4802      	ldr	r0, [pc, #8]	; (80053b8 <I2C2_EV_IRQHandler+0x10>)
 80053ae:	f7fb ff23 	bl	80011f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80053b2:	bf00      	nop
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	200000f8 	.word	0x200000f8

080053bc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80053c0:	4802      	ldr	r0, [pc, #8]	; (80053cc <I2C2_ER_IRQHandler+0x10>)
 80053c2:	f7fb ff33 	bl	800122c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80053c6:	bf00      	nop
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	200000f8 	.word	0x200000f8

080053d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80053d4:	4802      	ldr	r0, [pc, #8]	; (80053e0 <USART3_IRQHandler+0x10>)
 80053d6:	f7fe f9f7 	bl	80037c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80053da:	bf00      	nop
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000198 	.word	0x20000198

080053e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80053ec:	4b11      	ldr	r3, [pc, #68]	; (8005434 <_sbrk+0x50>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d102      	bne.n	80053fa <_sbrk+0x16>
		heap_end = &end;
 80053f4:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <_sbrk+0x50>)
 80053f6:	4a10      	ldr	r2, [pc, #64]	; (8005438 <_sbrk+0x54>)
 80053f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80053fa:	4b0e      	ldr	r3, [pc, #56]	; (8005434 <_sbrk+0x50>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005400:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <_sbrk+0x50>)
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4413      	add	r3, r2
 8005408:	466a      	mov	r2, sp
 800540a:	4293      	cmp	r3, r2
 800540c:	d907      	bls.n	800541e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800540e:	f000 f97b 	bl	8005708 <__errno>
 8005412:	4602      	mov	r2, r0
 8005414:	230c      	movs	r3, #12
 8005416:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005418:	f04f 33ff 	mov.w	r3, #4294967295
 800541c:	e006      	b.n	800542c <_sbrk+0x48>
	}

	heap_end += incr;
 800541e:	4b05      	ldr	r3, [pc, #20]	; (8005434 <_sbrk+0x50>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4413      	add	r3, r2
 8005426:	4a03      	ldr	r2, [pc, #12]	; (8005434 <_sbrk+0x50>)
 8005428:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800542a:	68fb      	ldr	r3, [r7, #12]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	20000090 	.word	0x20000090
 8005438:	20000620 	.word	0x20000620

0800543c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005440:	4b15      	ldr	r3, [pc, #84]	; (8005498 <SystemInit+0x5c>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005446:	4a14      	ldr	r2, [pc, #80]	; (8005498 <SystemInit+0x5c>)
 8005448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800544c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005450:	4b12      	ldr	r3, [pc, #72]	; (800549c <SystemInit+0x60>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a11      	ldr	r2, [pc, #68]	; (800549c <SystemInit+0x60>)
 8005456:	f043 0301 	orr.w	r3, r3, #1
 800545a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800545c:	4b0f      	ldr	r3, [pc, #60]	; (800549c <SystemInit+0x60>)
 800545e:	2200      	movs	r2, #0
 8005460:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005462:	4b0e      	ldr	r3, [pc, #56]	; (800549c <SystemInit+0x60>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	490d      	ldr	r1, [pc, #52]	; (800549c <SystemInit+0x60>)
 8005468:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <SystemInit+0x64>)
 800546a:	4013      	ands	r3, r2
 800546c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800546e:	4b0b      	ldr	r3, [pc, #44]	; (800549c <SystemInit+0x60>)
 8005470:	4a0c      	ldr	r2, [pc, #48]	; (80054a4 <SystemInit+0x68>)
 8005472:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005474:	4b09      	ldr	r3, [pc, #36]	; (800549c <SystemInit+0x60>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a08      	ldr	r2, [pc, #32]	; (800549c <SystemInit+0x60>)
 800547a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800547e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005480:	4b06      	ldr	r3, [pc, #24]	; (800549c <SystemInit+0x60>)
 8005482:	2200      	movs	r2, #0
 8005484:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005486:	4b04      	ldr	r3, [pc, #16]	; (8005498 <SystemInit+0x5c>)
 8005488:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800548c:	609a      	str	r2, [r3, #8]
#endif
}
 800548e:	bf00      	nop
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	e000ed00 	.word	0xe000ed00
 800549c:	40023800 	.word	0x40023800
 80054a0:	fef6ffff 	.word	0xfef6ffff
 80054a4:	24003010 	.word	0x24003010

080054a8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80054ac:	4b14      	ldr	r3, [pc, #80]	; (8005500 <MX_USART3_UART_Init+0x58>)
 80054ae:	4a15      	ldr	r2, [pc, #84]	; (8005504 <MX_USART3_UART_Init+0x5c>)
 80054b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80054b2:	4b13      	ldr	r3, [pc, #76]	; (8005500 <MX_USART3_UART_Init+0x58>)
 80054b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80054b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80054ba:	4b11      	ldr	r3, [pc, #68]	; (8005500 <MX_USART3_UART_Init+0x58>)
 80054bc:	2200      	movs	r2, #0
 80054be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80054c0:	4b0f      	ldr	r3, [pc, #60]	; (8005500 <MX_USART3_UART_Init+0x58>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80054c6:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <MX_USART3_UART_Init+0x58>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80054cc:	4b0c      	ldr	r3, [pc, #48]	; (8005500 <MX_USART3_UART_Init+0x58>)
 80054ce:	220c      	movs	r2, #12
 80054d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054d2:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <MX_USART3_UART_Init+0x58>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80054d8:	4b09      	ldr	r3, [pc, #36]	; (8005500 <MX_USART3_UART_Init+0x58>)
 80054da:	2200      	movs	r2, #0
 80054dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80054de:	4b08      	ldr	r3, [pc, #32]	; (8005500 <MX_USART3_UART_Init+0x58>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80054e4:	4b06      	ldr	r3, [pc, #24]	; (8005500 <MX_USART3_UART_Init+0x58>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80054ea:	4805      	ldr	r0, [pc, #20]	; (8005500 <MX_USART3_UART_Init+0x58>)
 80054ec:	f7fd ff8e 	bl	800340c <HAL_UART_Init>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80054f6:	f7ff fee9 	bl	80052cc <Error_Handler>
  }

}
 80054fa:	bf00      	nop
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20000198 	.word	0x20000198
 8005504:	40004800 	.word	0x40004800

08005508 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08a      	sub	sp, #40	; 0x28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005510:	f107 0314 	add.w	r3, r7, #20
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	605a      	str	r2, [r3, #4]
 800551a:	609a      	str	r2, [r3, #8]
 800551c:	60da      	str	r2, [r3, #12]
 800551e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1b      	ldr	r2, [pc, #108]	; (8005594 <HAL_UART_MspInit+0x8c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d130      	bne.n	800558c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800552a:	4b1b      	ldr	r3, [pc, #108]	; (8005598 <HAL_UART_MspInit+0x90>)
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	4a1a      	ldr	r2, [pc, #104]	; (8005598 <HAL_UART_MspInit+0x90>)
 8005530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005534:	6413      	str	r3, [r2, #64]	; 0x40
 8005536:	4b18      	ldr	r3, [pc, #96]	; (8005598 <HAL_UART_MspInit+0x90>)
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005542:	4b15      	ldr	r3, [pc, #84]	; (8005598 <HAL_UART_MspInit+0x90>)
 8005544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005546:	4a14      	ldr	r2, [pc, #80]	; (8005598 <HAL_UART_MspInit+0x90>)
 8005548:	f043 0308 	orr.w	r3, r3, #8
 800554c:	6313      	str	r3, [r2, #48]	; 0x30
 800554e:	4b12      	ldr	r3, [pc, #72]	; (8005598 <HAL_UART_MspInit+0x90>)
 8005550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800555a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800555e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005560:	2302      	movs	r3, #2
 8005562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005564:	2300      	movs	r3, #0
 8005566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005568:	2303      	movs	r3, #3
 800556a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800556c:	2307      	movs	r3, #7
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005570:	f107 0314 	add.w	r3, r7, #20
 8005574:	4619      	mov	r1, r3
 8005576:	4809      	ldr	r0, [pc, #36]	; (800559c <HAL_UART_MspInit+0x94>)
 8005578:	f7fb f9ce 	bl	8000918 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800557c:	2200      	movs	r2, #0
 800557e:	2100      	movs	r1, #0
 8005580:	2027      	movs	r0, #39	; 0x27
 8005582:	f7fb f970 	bl	8000866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005586:	2027      	movs	r0, #39	; 0x27
 8005588:	f7fb f989 	bl	800089e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800558c:	bf00      	nop
 800558e:	3728      	adds	r7, #40	; 0x28
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40004800 	.word	0x40004800
 8005598:	40023800 	.word	0x40023800
 800559c:	40020c00 	.word	0x40020c00

080055a0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80055a4:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80055a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80055aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80055ac:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80055ae:	2206      	movs	r2, #6
 80055b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80055b2:	4b11      	ldr	r3, [pc, #68]	; (80055f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80055b4:	2202      	movs	r2, #2
 80055b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80055b8:	4b0f      	ldr	r3, [pc, #60]	; (80055f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80055be:	4b0e      	ldr	r3, [pc, #56]	; (80055f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80055c0:	2202      	movs	r2, #2
 80055c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80055c4:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80055ca:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80055d0:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80055d6:	4b08      	ldr	r3, [pc, #32]	; (80055f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80055d8:	2201      	movs	r2, #1
 80055da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80055dc:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80055de:	2200      	movs	r2, #0
 80055e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80055e2:	4805      	ldr	r0, [pc, #20]	; (80055f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80055e4:	f7fc fd74 	bl	80020d0 <HAL_PCD_Init>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80055ee:	f7ff fe6d 	bl	80052cc <Error_Handler>
  }

}
 80055f2:	bf00      	nop
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20000218 	.word	0x20000218

080055fc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08a      	sub	sp, #40	; 0x28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005604:	f107 0314 	add.w	r3, r7, #20
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	609a      	str	r2, [r3, #8]
 8005610:	60da      	str	r2, [r3, #12]
 8005612:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800561c:	d141      	bne.n	80056a2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800561e:	4b23      	ldr	r3, [pc, #140]	; (80056ac <HAL_PCD_MspInit+0xb0>)
 8005620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005622:	4a22      	ldr	r2, [pc, #136]	; (80056ac <HAL_PCD_MspInit+0xb0>)
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	6313      	str	r3, [r2, #48]	; 0x30
 800562a:	4b20      	ldr	r3, [pc, #128]	; (80056ac <HAL_PCD_MspInit+0xb0>)
 800562c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005636:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800563a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800563c:	2302      	movs	r3, #2
 800563e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005640:	2300      	movs	r3, #0
 8005642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005644:	2303      	movs	r3, #3
 8005646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005648:	230a      	movs	r3, #10
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800564c:	f107 0314 	add.w	r3, r7, #20
 8005650:	4619      	mov	r1, r3
 8005652:	4817      	ldr	r0, [pc, #92]	; (80056b0 <HAL_PCD_MspInit+0xb4>)
 8005654:	f7fb f960 	bl	8000918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800565c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800565e:	2300      	movs	r3, #0
 8005660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005662:	2300      	movs	r3, #0
 8005664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005666:	f107 0314 	add.w	r3, r7, #20
 800566a:	4619      	mov	r1, r3
 800566c:	4810      	ldr	r0, [pc, #64]	; (80056b0 <HAL_PCD_MspInit+0xb4>)
 800566e:	f7fb f953 	bl	8000918 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005672:	4b0e      	ldr	r3, [pc, #56]	; (80056ac <HAL_PCD_MspInit+0xb0>)
 8005674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005676:	4a0d      	ldr	r2, [pc, #52]	; (80056ac <HAL_PCD_MspInit+0xb0>)
 8005678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567c:	6353      	str	r3, [r2, #52]	; 0x34
 800567e:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <HAL_PCD_MspInit+0xb0>)
 8005680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4b08      	ldr	r3, [pc, #32]	; (80056ac <HAL_PCD_MspInit+0xb0>)
 800568c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568e:	4a07      	ldr	r2, [pc, #28]	; (80056ac <HAL_PCD_MspInit+0xb0>)
 8005690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005694:	6453      	str	r3, [r2, #68]	; 0x44
 8005696:	4b05      	ldr	r3, [pc, #20]	; (80056ac <HAL_PCD_MspInit+0xb0>)
 8005698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800569e:	60bb      	str	r3, [r7, #8]
 80056a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80056a2:	bf00      	nop
 80056a4:	3728      	adds	r7, #40	; 0x28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40023800 	.word	0x40023800
 80056b0:	40020000 	.word	0x40020000

080056b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80056b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80056b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80056ba:	e003      	b.n	80056c4 <LoopCopyDataInit>

080056bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80056bc:	4b0c      	ldr	r3, [pc, #48]	; (80056f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80056be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80056c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80056c2:	3104      	adds	r1, #4

080056c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80056c4:	480b      	ldr	r0, [pc, #44]	; (80056f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80056c6:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80056c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80056ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80056cc:	d3f6      	bcc.n	80056bc <CopyDataInit>
  ldr  r2, =_sbss
 80056ce:	4a0b      	ldr	r2, [pc, #44]	; (80056fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80056d0:	e002      	b.n	80056d8 <LoopFillZerobss>

080056d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80056d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80056d4:	f842 3b04 	str.w	r3, [r2], #4

080056d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80056d8:	4b09      	ldr	r3, [pc, #36]	; (8005700 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80056da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80056dc:	d3f9      	bcc.n	80056d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80056de:	f7ff fead 	bl	800543c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056e2:	f000 f817 	bl	8005714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056e6:	f7ff fc9f 	bl	8005028 <main>
  bx  lr    
 80056ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80056ec:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80056f0:	0800600c 	.word	0x0800600c
  ldr  r0, =_sdata
 80056f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80056f8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80056fc:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8005700:	20000620 	.word	0x20000620

08005704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005704:	e7fe      	b.n	8005704 <ADC_IRQHandler>
	...

08005708 <__errno>:
 8005708:	4b01      	ldr	r3, [pc, #4]	; (8005710 <__errno+0x8>)
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	20000010 	.word	0x20000010

08005714 <__libc_init_array>:
 8005714:	b570      	push	{r4, r5, r6, lr}
 8005716:	4e0d      	ldr	r6, [pc, #52]	; (800574c <__libc_init_array+0x38>)
 8005718:	4c0d      	ldr	r4, [pc, #52]	; (8005750 <__libc_init_array+0x3c>)
 800571a:	1ba4      	subs	r4, r4, r6
 800571c:	10a4      	asrs	r4, r4, #2
 800571e:	2500      	movs	r5, #0
 8005720:	42a5      	cmp	r5, r4
 8005722:	d109      	bne.n	8005738 <__libc_init_array+0x24>
 8005724:	4e0b      	ldr	r6, [pc, #44]	; (8005754 <__libc_init_array+0x40>)
 8005726:	4c0c      	ldr	r4, [pc, #48]	; (8005758 <__libc_init_array+0x44>)
 8005728:	f000 fc26 	bl	8005f78 <_init>
 800572c:	1ba4      	subs	r4, r4, r6
 800572e:	10a4      	asrs	r4, r4, #2
 8005730:	2500      	movs	r5, #0
 8005732:	42a5      	cmp	r5, r4
 8005734:	d105      	bne.n	8005742 <__libc_init_array+0x2e>
 8005736:	bd70      	pop	{r4, r5, r6, pc}
 8005738:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800573c:	4798      	blx	r3
 800573e:	3501      	adds	r5, #1
 8005740:	e7ee      	b.n	8005720 <__libc_init_array+0xc>
 8005742:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005746:	4798      	blx	r3
 8005748:	3501      	adds	r5, #1
 800574a:	e7f2      	b.n	8005732 <__libc_init_array+0x1e>
 800574c:	08006004 	.word	0x08006004
 8005750:	08006004 	.word	0x08006004
 8005754:	08006004 	.word	0x08006004
 8005758:	08006008 	.word	0x08006008

0800575c <memset>:
 800575c:	4402      	add	r2, r0
 800575e:	4603      	mov	r3, r0
 8005760:	4293      	cmp	r3, r2
 8005762:	d100      	bne.n	8005766 <memset+0xa>
 8005764:	4770      	bx	lr
 8005766:	f803 1b01 	strb.w	r1, [r3], #1
 800576a:	e7f9      	b.n	8005760 <memset+0x4>

0800576c <siprintf>:
 800576c:	b40e      	push	{r1, r2, r3}
 800576e:	b500      	push	{lr}
 8005770:	b09c      	sub	sp, #112	; 0x70
 8005772:	ab1d      	add	r3, sp, #116	; 0x74
 8005774:	9002      	str	r0, [sp, #8]
 8005776:	9006      	str	r0, [sp, #24]
 8005778:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800577c:	4809      	ldr	r0, [pc, #36]	; (80057a4 <siprintf+0x38>)
 800577e:	9107      	str	r1, [sp, #28]
 8005780:	9104      	str	r1, [sp, #16]
 8005782:	4909      	ldr	r1, [pc, #36]	; (80057a8 <siprintf+0x3c>)
 8005784:	f853 2b04 	ldr.w	r2, [r3], #4
 8005788:	9105      	str	r1, [sp, #20]
 800578a:	6800      	ldr	r0, [r0, #0]
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	a902      	add	r1, sp, #8
 8005790:	f000 f866 	bl	8005860 <_svfiprintf_r>
 8005794:	9b02      	ldr	r3, [sp, #8]
 8005796:	2200      	movs	r2, #0
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	b01c      	add	sp, #112	; 0x70
 800579c:	f85d eb04 	ldr.w	lr, [sp], #4
 80057a0:	b003      	add	sp, #12
 80057a2:	4770      	bx	lr
 80057a4:	20000010 	.word	0x20000010
 80057a8:	ffff0208 	.word	0xffff0208

080057ac <__ssputs_r>:
 80057ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b0:	688e      	ldr	r6, [r1, #8]
 80057b2:	429e      	cmp	r6, r3
 80057b4:	4682      	mov	sl, r0
 80057b6:	460c      	mov	r4, r1
 80057b8:	4690      	mov	r8, r2
 80057ba:	4699      	mov	r9, r3
 80057bc:	d837      	bhi.n	800582e <__ssputs_r+0x82>
 80057be:	898a      	ldrh	r2, [r1, #12]
 80057c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057c4:	d031      	beq.n	800582a <__ssputs_r+0x7e>
 80057c6:	6825      	ldr	r5, [r4, #0]
 80057c8:	6909      	ldr	r1, [r1, #16]
 80057ca:	1a6f      	subs	r7, r5, r1
 80057cc:	6965      	ldr	r5, [r4, #20]
 80057ce:	2302      	movs	r3, #2
 80057d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80057d8:	f109 0301 	add.w	r3, r9, #1
 80057dc:	443b      	add	r3, r7
 80057de:	429d      	cmp	r5, r3
 80057e0:	bf38      	it	cc
 80057e2:	461d      	movcc	r5, r3
 80057e4:	0553      	lsls	r3, r2, #21
 80057e6:	d530      	bpl.n	800584a <__ssputs_r+0x9e>
 80057e8:	4629      	mov	r1, r5
 80057ea:	f000 fb2b 	bl	8005e44 <_malloc_r>
 80057ee:	4606      	mov	r6, r0
 80057f0:	b950      	cbnz	r0, 8005808 <__ssputs_r+0x5c>
 80057f2:	230c      	movs	r3, #12
 80057f4:	f8ca 3000 	str.w	r3, [sl]
 80057f8:	89a3      	ldrh	r3, [r4, #12]
 80057fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057fe:	81a3      	strh	r3, [r4, #12]
 8005800:	f04f 30ff 	mov.w	r0, #4294967295
 8005804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005808:	463a      	mov	r2, r7
 800580a:	6921      	ldr	r1, [r4, #16]
 800580c:	f000 faa8 	bl	8005d60 <memcpy>
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800581a:	81a3      	strh	r3, [r4, #12]
 800581c:	6126      	str	r6, [r4, #16]
 800581e:	6165      	str	r5, [r4, #20]
 8005820:	443e      	add	r6, r7
 8005822:	1bed      	subs	r5, r5, r7
 8005824:	6026      	str	r6, [r4, #0]
 8005826:	60a5      	str	r5, [r4, #8]
 8005828:	464e      	mov	r6, r9
 800582a:	454e      	cmp	r6, r9
 800582c:	d900      	bls.n	8005830 <__ssputs_r+0x84>
 800582e:	464e      	mov	r6, r9
 8005830:	4632      	mov	r2, r6
 8005832:	4641      	mov	r1, r8
 8005834:	6820      	ldr	r0, [r4, #0]
 8005836:	f000 fa9e 	bl	8005d76 <memmove>
 800583a:	68a3      	ldr	r3, [r4, #8]
 800583c:	1b9b      	subs	r3, r3, r6
 800583e:	60a3      	str	r3, [r4, #8]
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	441e      	add	r6, r3
 8005844:	6026      	str	r6, [r4, #0]
 8005846:	2000      	movs	r0, #0
 8005848:	e7dc      	b.n	8005804 <__ssputs_r+0x58>
 800584a:	462a      	mov	r2, r5
 800584c:	f000 fb54 	bl	8005ef8 <_realloc_r>
 8005850:	4606      	mov	r6, r0
 8005852:	2800      	cmp	r0, #0
 8005854:	d1e2      	bne.n	800581c <__ssputs_r+0x70>
 8005856:	6921      	ldr	r1, [r4, #16]
 8005858:	4650      	mov	r0, sl
 800585a:	f000 faa5 	bl	8005da8 <_free_r>
 800585e:	e7c8      	b.n	80057f2 <__ssputs_r+0x46>

08005860 <_svfiprintf_r>:
 8005860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005864:	461d      	mov	r5, r3
 8005866:	898b      	ldrh	r3, [r1, #12]
 8005868:	061f      	lsls	r7, r3, #24
 800586a:	b09d      	sub	sp, #116	; 0x74
 800586c:	4680      	mov	r8, r0
 800586e:	460c      	mov	r4, r1
 8005870:	4616      	mov	r6, r2
 8005872:	d50f      	bpl.n	8005894 <_svfiprintf_r+0x34>
 8005874:	690b      	ldr	r3, [r1, #16]
 8005876:	b96b      	cbnz	r3, 8005894 <_svfiprintf_r+0x34>
 8005878:	2140      	movs	r1, #64	; 0x40
 800587a:	f000 fae3 	bl	8005e44 <_malloc_r>
 800587e:	6020      	str	r0, [r4, #0]
 8005880:	6120      	str	r0, [r4, #16]
 8005882:	b928      	cbnz	r0, 8005890 <_svfiprintf_r+0x30>
 8005884:	230c      	movs	r3, #12
 8005886:	f8c8 3000 	str.w	r3, [r8]
 800588a:	f04f 30ff 	mov.w	r0, #4294967295
 800588e:	e0c8      	b.n	8005a22 <_svfiprintf_r+0x1c2>
 8005890:	2340      	movs	r3, #64	; 0x40
 8005892:	6163      	str	r3, [r4, #20]
 8005894:	2300      	movs	r3, #0
 8005896:	9309      	str	r3, [sp, #36]	; 0x24
 8005898:	2320      	movs	r3, #32
 800589a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800589e:	2330      	movs	r3, #48	; 0x30
 80058a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058a4:	9503      	str	r5, [sp, #12]
 80058a6:	f04f 0b01 	mov.w	fp, #1
 80058aa:	4637      	mov	r7, r6
 80058ac:	463d      	mov	r5, r7
 80058ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80058b2:	b10b      	cbz	r3, 80058b8 <_svfiprintf_r+0x58>
 80058b4:	2b25      	cmp	r3, #37	; 0x25
 80058b6:	d13e      	bne.n	8005936 <_svfiprintf_r+0xd6>
 80058b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80058bc:	d00b      	beq.n	80058d6 <_svfiprintf_r+0x76>
 80058be:	4653      	mov	r3, sl
 80058c0:	4632      	mov	r2, r6
 80058c2:	4621      	mov	r1, r4
 80058c4:	4640      	mov	r0, r8
 80058c6:	f7ff ff71 	bl	80057ac <__ssputs_r>
 80058ca:	3001      	adds	r0, #1
 80058cc:	f000 80a4 	beq.w	8005a18 <_svfiprintf_r+0x1b8>
 80058d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d2:	4453      	add	r3, sl
 80058d4:	9309      	str	r3, [sp, #36]	; 0x24
 80058d6:	783b      	ldrb	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 809d 	beq.w	8005a18 <_svfiprintf_r+0x1b8>
 80058de:	2300      	movs	r3, #0
 80058e0:	f04f 32ff 	mov.w	r2, #4294967295
 80058e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058e8:	9304      	str	r3, [sp, #16]
 80058ea:	9307      	str	r3, [sp, #28]
 80058ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058f0:	931a      	str	r3, [sp, #104]	; 0x68
 80058f2:	462f      	mov	r7, r5
 80058f4:	2205      	movs	r2, #5
 80058f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80058fa:	4850      	ldr	r0, [pc, #320]	; (8005a3c <_svfiprintf_r+0x1dc>)
 80058fc:	f7fa fc88 	bl	8000210 <memchr>
 8005900:	9b04      	ldr	r3, [sp, #16]
 8005902:	b9d0      	cbnz	r0, 800593a <_svfiprintf_r+0xda>
 8005904:	06d9      	lsls	r1, r3, #27
 8005906:	bf44      	itt	mi
 8005908:	2220      	movmi	r2, #32
 800590a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800590e:	071a      	lsls	r2, r3, #28
 8005910:	bf44      	itt	mi
 8005912:	222b      	movmi	r2, #43	; 0x2b
 8005914:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005918:	782a      	ldrb	r2, [r5, #0]
 800591a:	2a2a      	cmp	r2, #42	; 0x2a
 800591c:	d015      	beq.n	800594a <_svfiprintf_r+0xea>
 800591e:	9a07      	ldr	r2, [sp, #28]
 8005920:	462f      	mov	r7, r5
 8005922:	2000      	movs	r0, #0
 8005924:	250a      	movs	r5, #10
 8005926:	4639      	mov	r1, r7
 8005928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800592c:	3b30      	subs	r3, #48	; 0x30
 800592e:	2b09      	cmp	r3, #9
 8005930:	d94d      	bls.n	80059ce <_svfiprintf_r+0x16e>
 8005932:	b1b8      	cbz	r0, 8005964 <_svfiprintf_r+0x104>
 8005934:	e00f      	b.n	8005956 <_svfiprintf_r+0xf6>
 8005936:	462f      	mov	r7, r5
 8005938:	e7b8      	b.n	80058ac <_svfiprintf_r+0x4c>
 800593a:	4a40      	ldr	r2, [pc, #256]	; (8005a3c <_svfiprintf_r+0x1dc>)
 800593c:	1a80      	subs	r0, r0, r2
 800593e:	fa0b f000 	lsl.w	r0, fp, r0
 8005942:	4318      	orrs	r0, r3
 8005944:	9004      	str	r0, [sp, #16]
 8005946:	463d      	mov	r5, r7
 8005948:	e7d3      	b.n	80058f2 <_svfiprintf_r+0x92>
 800594a:	9a03      	ldr	r2, [sp, #12]
 800594c:	1d11      	adds	r1, r2, #4
 800594e:	6812      	ldr	r2, [r2, #0]
 8005950:	9103      	str	r1, [sp, #12]
 8005952:	2a00      	cmp	r2, #0
 8005954:	db01      	blt.n	800595a <_svfiprintf_r+0xfa>
 8005956:	9207      	str	r2, [sp, #28]
 8005958:	e004      	b.n	8005964 <_svfiprintf_r+0x104>
 800595a:	4252      	negs	r2, r2
 800595c:	f043 0302 	orr.w	r3, r3, #2
 8005960:	9207      	str	r2, [sp, #28]
 8005962:	9304      	str	r3, [sp, #16]
 8005964:	783b      	ldrb	r3, [r7, #0]
 8005966:	2b2e      	cmp	r3, #46	; 0x2e
 8005968:	d10c      	bne.n	8005984 <_svfiprintf_r+0x124>
 800596a:	787b      	ldrb	r3, [r7, #1]
 800596c:	2b2a      	cmp	r3, #42	; 0x2a
 800596e:	d133      	bne.n	80059d8 <_svfiprintf_r+0x178>
 8005970:	9b03      	ldr	r3, [sp, #12]
 8005972:	1d1a      	adds	r2, r3, #4
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	9203      	str	r2, [sp, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	bfb8      	it	lt
 800597c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005980:	3702      	adds	r7, #2
 8005982:	9305      	str	r3, [sp, #20]
 8005984:	4d2e      	ldr	r5, [pc, #184]	; (8005a40 <_svfiprintf_r+0x1e0>)
 8005986:	7839      	ldrb	r1, [r7, #0]
 8005988:	2203      	movs	r2, #3
 800598a:	4628      	mov	r0, r5
 800598c:	f7fa fc40 	bl	8000210 <memchr>
 8005990:	b138      	cbz	r0, 80059a2 <_svfiprintf_r+0x142>
 8005992:	2340      	movs	r3, #64	; 0x40
 8005994:	1b40      	subs	r0, r0, r5
 8005996:	fa03 f000 	lsl.w	r0, r3, r0
 800599a:	9b04      	ldr	r3, [sp, #16]
 800599c:	4303      	orrs	r3, r0
 800599e:	3701      	adds	r7, #1
 80059a0:	9304      	str	r3, [sp, #16]
 80059a2:	7839      	ldrb	r1, [r7, #0]
 80059a4:	4827      	ldr	r0, [pc, #156]	; (8005a44 <_svfiprintf_r+0x1e4>)
 80059a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059aa:	2206      	movs	r2, #6
 80059ac:	1c7e      	adds	r6, r7, #1
 80059ae:	f7fa fc2f 	bl	8000210 <memchr>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d038      	beq.n	8005a28 <_svfiprintf_r+0x1c8>
 80059b6:	4b24      	ldr	r3, [pc, #144]	; (8005a48 <_svfiprintf_r+0x1e8>)
 80059b8:	bb13      	cbnz	r3, 8005a00 <_svfiprintf_r+0x1a0>
 80059ba:	9b03      	ldr	r3, [sp, #12]
 80059bc:	3307      	adds	r3, #7
 80059be:	f023 0307 	bic.w	r3, r3, #7
 80059c2:	3308      	adds	r3, #8
 80059c4:	9303      	str	r3, [sp, #12]
 80059c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059c8:	444b      	add	r3, r9
 80059ca:	9309      	str	r3, [sp, #36]	; 0x24
 80059cc:	e76d      	b.n	80058aa <_svfiprintf_r+0x4a>
 80059ce:	fb05 3202 	mla	r2, r5, r2, r3
 80059d2:	2001      	movs	r0, #1
 80059d4:	460f      	mov	r7, r1
 80059d6:	e7a6      	b.n	8005926 <_svfiprintf_r+0xc6>
 80059d8:	2300      	movs	r3, #0
 80059da:	3701      	adds	r7, #1
 80059dc:	9305      	str	r3, [sp, #20]
 80059de:	4619      	mov	r1, r3
 80059e0:	250a      	movs	r5, #10
 80059e2:	4638      	mov	r0, r7
 80059e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059e8:	3a30      	subs	r2, #48	; 0x30
 80059ea:	2a09      	cmp	r2, #9
 80059ec:	d903      	bls.n	80059f6 <_svfiprintf_r+0x196>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0c8      	beq.n	8005984 <_svfiprintf_r+0x124>
 80059f2:	9105      	str	r1, [sp, #20]
 80059f4:	e7c6      	b.n	8005984 <_svfiprintf_r+0x124>
 80059f6:	fb05 2101 	mla	r1, r5, r1, r2
 80059fa:	2301      	movs	r3, #1
 80059fc:	4607      	mov	r7, r0
 80059fe:	e7f0      	b.n	80059e2 <_svfiprintf_r+0x182>
 8005a00:	ab03      	add	r3, sp, #12
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	4622      	mov	r2, r4
 8005a06:	4b11      	ldr	r3, [pc, #68]	; (8005a4c <_svfiprintf_r+0x1ec>)
 8005a08:	a904      	add	r1, sp, #16
 8005a0a:	4640      	mov	r0, r8
 8005a0c:	f3af 8000 	nop.w
 8005a10:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005a14:	4681      	mov	r9, r0
 8005a16:	d1d6      	bne.n	80059c6 <_svfiprintf_r+0x166>
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	065b      	lsls	r3, r3, #25
 8005a1c:	f53f af35 	bmi.w	800588a <_svfiprintf_r+0x2a>
 8005a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a22:	b01d      	add	sp, #116	; 0x74
 8005a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a28:	ab03      	add	r3, sp, #12
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	4622      	mov	r2, r4
 8005a2e:	4b07      	ldr	r3, [pc, #28]	; (8005a4c <_svfiprintf_r+0x1ec>)
 8005a30:	a904      	add	r1, sp, #16
 8005a32:	4640      	mov	r0, r8
 8005a34:	f000 f882 	bl	8005b3c <_printf_i>
 8005a38:	e7ea      	b.n	8005a10 <_svfiprintf_r+0x1b0>
 8005a3a:	bf00      	nop
 8005a3c:	08005fc8 	.word	0x08005fc8
 8005a40:	08005fce 	.word	0x08005fce
 8005a44:	08005fd2 	.word	0x08005fd2
 8005a48:	00000000 	.word	0x00000000
 8005a4c:	080057ad 	.word	0x080057ad

08005a50 <_printf_common>:
 8005a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a54:	4691      	mov	r9, r2
 8005a56:	461f      	mov	r7, r3
 8005a58:	688a      	ldr	r2, [r1, #8]
 8005a5a:	690b      	ldr	r3, [r1, #16]
 8005a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a60:	4293      	cmp	r3, r2
 8005a62:	bfb8      	it	lt
 8005a64:	4613      	movlt	r3, r2
 8005a66:	f8c9 3000 	str.w	r3, [r9]
 8005a6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a6e:	4606      	mov	r6, r0
 8005a70:	460c      	mov	r4, r1
 8005a72:	b112      	cbz	r2, 8005a7a <_printf_common+0x2a>
 8005a74:	3301      	adds	r3, #1
 8005a76:	f8c9 3000 	str.w	r3, [r9]
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	0699      	lsls	r1, r3, #26
 8005a7e:	bf42      	ittt	mi
 8005a80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005a84:	3302      	addmi	r3, #2
 8005a86:	f8c9 3000 	strmi.w	r3, [r9]
 8005a8a:	6825      	ldr	r5, [r4, #0]
 8005a8c:	f015 0506 	ands.w	r5, r5, #6
 8005a90:	d107      	bne.n	8005aa2 <_printf_common+0x52>
 8005a92:	f104 0a19 	add.w	sl, r4, #25
 8005a96:	68e3      	ldr	r3, [r4, #12]
 8005a98:	f8d9 2000 	ldr.w	r2, [r9]
 8005a9c:	1a9b      	subs	r3, r3, r2
 8005a9e:	42ab      	cmp	r3, r5
 8005aa0:	dc28      	bgt.n	8005af4 <_printf_common+0xa4>
 8005aa2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005aa6:	6822      	ldr	r2, [r4, #0]
 8005aa8:	3300      	adds	r3, #0
 8005aaa:	bf18      	it	ne
 8005aac:	2301      	movne	r3, #1
 8005aae:	0692      	lsls	r2, r2, #26
 8005ab0:	d42d      	bmi.n	8005b0e <_printf_common+0xbe>
 8005ab2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ab6:	4639      	mov	r1, r7
 8005ab8:	4630      	mov	r0, r6
 8005aba:	47c0      	blx	r8
 8005abc:	3001      	adds	r0, #1
 8005abe:	d020      	beq.n	8005b02 <_printf_common+0xb2>
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	68e5      	ldr	r5, [r4, #12]
 8005ac4:	f8d9 2000 	ldr.w	r2, [r9]
 8005ac8:	f003 0306 	and.w	r3, r3, #6
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	bf08      	it	eq
 8005ad0:	1aad      	subeq	r5, r5, r2
 8005ad2:	68a3      	ldr	r3, [r4, #8]
 8005ad4:	6922      	ldr	r2, [r4, #16]
 8005ad6:	bf0c      	ite	eq
 8005ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005adc:	2500      	movne	r5, #0
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	bfc4      	itt	gt
 8005ae2:	1a9b      	subgt	r3, r3, r2
 8005ae4:	18ed      	addgt	r5, r5, r3
 8005ae6:	f04f 0900 	mov.w	r9, #0
 8005aea:	341a      	adds	r4, #26
 8005aec:	454d      	cmp	r5, r9
 8005aee:	d11a      	bne.n	8005b26 <_printf_common+0xd6>
 8005af0:	2000      	movs	r0, #0
 8005af2:	e008      	b.n	8005b06 <_printf_common+0xb6>
 8005af4:	2301      	movs	r3, #1
 8005af6:	4652      	mov	r2, sl
 8005af8:	4639      	mov	r1, r7
 8005afa:	4630      	mov	r0, r6
 8005afc:	47c0      	blx	r8
 8005afe:	3001      	adds	r0, #1
 8005b00:	d103      	bne.n	8005b0a <_printf_common+0xba>
 8005b02:	f04f 30ff 	mov.w	r0, #4294967295
 8005b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b0a:	3501      	adds	r5, #1
 8005b0c:	e7c3      	b.n	8005a96 <_printf_common+0x46>
 8005b0e:	18e1      	adds	r1, r4, r3
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	2030      	movs	r0, #48	; 0x30
 8005b14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b18:	4422      	add	r2, r4
 8005b1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b22:	3302      	adds	r3, #2
 8005b24:	e7c5      	b.n	8005ab2 <_printf_common+0x62>
 8005b26:	2301      	movs	r3, #1
 8005b28:	4622      	mov	r2, r4
 8005b2a:	4639      	mov	r1, r7
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	47c0      	blx	r8
 8005b30:	3001      	adds	r0, #1
 8005b32:	d0e6      	beq.n	8005b02 <_printf_common+0xb2>
 8005b34:	f109 0901 	add.w	r9, r9, #1
 8005b38:	e7d8      	b.n	8005aec <_printf_common+0x9c>
	...

08005b3c <_printf_i>:
 8005b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005b44:	460c      	mov	r4, r1
 8005b46:	7e09      	ldrb	r1, [r1, #24]
 8005b48:	b085      	sub	sp, #20
 8005b4a:	296e      	cmp	r1, #110	; 0x6e
 8005b4c:	4617      	mov	r7, r2
 8005b4e:	4606      	mov	r6, r0
 8005b50:	4698      	mov	r8, r3
 8005b52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b54:	f000 80b3 	beq.w	8005cbe <_printf_i+0x182>
 8005b58:	d822      	bhi.n	8005ba0 <_printf_i+0x64>
 8005b5a:	2963      	cmp	r1, #99	; 0x63
 8005b5c:	d036      	beq.n	8005bcc <_printf_i+0x90>
 8005b5e:	d80a      	bhi.n	8005b76 <_printf_i+0x3a>
 8005b60:	2900      	cmp	r1, #0
 8005b62:	f000 80b9 	beq.w	8005cd8 <_printf_i+0x19c>
 8005b66:	2958      	cmp	r1, #88	; 0x58
 8005b68:	f000 8083 	beq.w	8005c72 <_printf_i+0x136>
 8005b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005b74:	e032      	b.n	8005bdc <_printf_i+0xa0>
 8005b76:	2964      	cmp	r1, #100	; 0x64
 8005b78:	d001      	beq.n	8005b7e <_printf_i+0x42>
 8005b7a:	2969      	cmp	r1, #105	; 0x69
 8005b7c:	d1f6      	bne.n	8005b6c <_printf_i+0x30>
 8005b7e:	6820      	ldr	r0, [r4, #0]
 8005b80:	6813      	ldr	r3, [r2, #0]
 8005b82:	0605      	lsls	r5, r0, #24
 8005b84:	f103 0104 	add.w	r1, r3, #4
 8005b88:	d52a      	bpl.n	8005be0 <_printf_i+0xa4>
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6011      	str	r1, [r2, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	da03      	bge.n	8005b9a <_printf_i+0x5e>
 8005b92:	222d      	movs	r2, #45	; 0x2d
 8005b94:	425b      	negs	r3, r3
 8005b96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005b9a:	486f      	ldr	r0, [pc, #444]	; (8005d58 <_printf_i+0x21c>)
 8005b9c:	220a      	movs	r2, #10
 8005b9e:	e039      	b.n	8005c14 <_printf_i+0xd8>
 8005ba0:	2973      	cmp	r1, #115	; 0x73
 8005ba2:	f000 809d 	beq.w	8005ce0 <_printf_i+0x1a4>
 8005ba6:	d808      	bhi.n	8005bba <_printf_i+0x7e>
 8005ba8:	296f      	cmp	r1, #111	; 0x6f
 8005baa:	d020      	beq.n	8005bee <_printf_i+0xb2>
 8005bac:	2970      	cmp	r1, #112	; 0x70
 8005bae:	d1dd      	bne.n	8005b6c <_printf_i+0x30>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	f043 0320 	orr.w	r3, r3, #32
 8005bb6:	6023      	str	r3, [r4, #0]
 8005bb8:	e003      	b.n	8005bc2 <_printf_i+0x86>
 8005bba:	2975      	cmp	r1, #117	; 0x75
 8005bbc:	d017      	beq.n	8005bee <_printf_i+0xb2>
 8005bbe:	2978      	cmp	r1, #120	; 0x78
 8005bc0:	d1d4      	bne.n	8005b6c <_printf_i+0x30>
 8005bc2:	2378      	movs	r3, #120	; 0x78
 8005bc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bc8:	4864      	ldr	r0, [pc, #400]	; (8005d5c <_printf_i+0x220>)
 8005bca:	e055      	b.n	8005c78 <_printf_i+0x13c>
 8005bcc:	6813      	ldr	r3, [r2, #0]
 8005bce:	1d19      	adds	r1, r3, #4
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6011      	str	r1, [r2, #0]
 8005bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e08c      	b.n	8005cfa <_printf_i+0x1be>
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6011      	str	r1, [r2, #0]
 8005be4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005be8:	bf18      	it	ne
 8005bea:	b21b      	sxthne	r3, r3
 8005bec:	e7cf      	b.n	8005b8e <_printf_i+0x52>
 8005bee:	6813      	ldr	r3, [r2, #0]
 8005bf0:	6825      	ldr	r5, [r4, #0]
 8005bf2:	1d18      	adds	r0, r3, #4
 8005bf4:	6010      	str	r0, [r2, #0]
 8005bf6:	0628      	lsls	r0, r5, #24
 8005bf8:	d501      	bpl.n	8005bfe <_printf_i+0xc2>
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	e002      	b.n	8005c04 <_printf_i+0xc8>
 8005bfe:	0668      	lsls	r0, r5, #25
 8005c00:	d5fb      	bpl.n	8005bfa <_printf_i+0xbe>
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	4854      	ldr	r0, [pc, #336]	; (8005d58 <_printf_i+0x21c>)
 8005c06:	296f      	cmp	r1, #111	; 0x6f
 8005c08:	bf14      	ite	ne
 8005c0a:	220a      	movne	r2, #10
 8005c0c:	2208      	moveq	r2, #8
 8005c0e:	2100      	movs	r1, #0
 8005c10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c14:	6865      	ldr	r5, [r4, #4]
 8005c16:	60a5      	str	r5, [r4, #8]
 8005c18:	2d00      	cmp	r5, #0
 8005c1a:	f2c0 8095 	blt.w	8005d48 <_printf_i+0x20c>
 8005c1e:	6821      	ldr	r1, [r4, #0]
 8005c20:	f021 0104 	bic.w	r1, r1, #4
 8005c24:	6021      	str	r1, [r4, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d13d      	bne.n	8005ca6 <_printf_i+0x16a>
 8005c2a:	2d00      	cmp	r5, #0
 8005c2c:	f040 808e 	bne.w	8005d4c <_printf_i+0x210>
 8005c30:	4665      	mov	r5, ip
 8005c32:	2a08      	cmp	r2, #8
 8005c34:	d10b      	bne.n	8005c4e <_printf_i+0x112>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	07db      	lsls	r3, r3, #31
 8005c3a:	d508      	bpl.n	8005c4e <_printf_i+0x112>
 8005c3c:	6923      	ldr	r3, [r4, #16]
 8005c3e:	6862      	ldr	r2, [r4, #4]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	bfde      	ittt	le
 8005c44:	2330      	movle	r3, #48	; 0x30
 8005c46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c4e:	ebac 0305 	sub.w	r3, ip, r5
 8005c52:	6123      	str	r3, [r4, #16]
 8005c54:	f8cd 8000 	str.w	r8, [sp]
 8005c58:	463b      	mov	r3, r7
 8005c5a:	aa03      	add	r2, sp, #12
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f7ff fef6 	bl	8005a50 <_printf_common>
 8005c64:	3001      	adds	r0, #1
 8005c66:	d14d      	bne.n	8005d04 <_printf_i+0x1c8>
 8005c68:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6c:	b005      	add	sp, #20
 8005c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c72:	4839      	ldr	r0, [pc, #228]	; (8005d58 <_printf_i+0x21c>)
 8005c74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005c78:	6813      	ldr	r3, [r2, #0]
 8005c7a:	6821      	ldr	r1, [r4, #0]
 8005c7c:	1d1d      	adds	r5, r3, #4
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6015      	str	r5, [r2, #0]
 8005c82:	060a      	lsls	r2, r1, #24
 8005c84:	d50b      	bpl.n	8005c9e <_printf_i+0x162>
 8005c86:	07ca      	lsls	r2, r1, #31
 8005c88:	bf44      	itt	mi
 8005c8a:	f041 0120 	orrmi.w	r1, r1, #32
 8005c8e:	6021      	strmi	r1, [r4, #0]
 8005c90:	b91b      	cbnz	r3, 8005c9a <_printf_i+0x15e>
 8005c92:	6822      	ldr	r2, [r4, #0]
 8005c94:	f022 0220 	bic.w	r2, r2, #32
 8005c98:	6022      	str	r2, [r4, #0]
 8005c9a:	2210      	movs	r2, #16
 8005c9c:	e7b7      	b.n	8005c0e <_printf_i+0xd2>
 8005c9e:	064d      	lsls	r5, r1, #25
 8005ca0:	bf48      	it	mi
 8005ca2:	b29b      	uxthmi	r3, r3
 8005ca4:	e7ef      	b.n	8005c86 <_printf_i+0x14a>
 8005ca6:	4665      	mov	r5, ip
 8005ca8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cac:	fb02 3311 	mls	r3, r2, r1, r3
 8005cb0:	5cc3      	ldrb	r3, [r0, r3]
 8005cb2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	2900      	cmp	r1, #0
 8005cba:	d1f5      	bne.n	8005ca8 <_printf_i+0x16c>
 8005cbc:	e7b9      	b.n	8005c32 <_printf_i+0xf6>
 8005cbe:	6813      	ldr	r3, [r2, #0]
 8005cc0:	6825      	ldr	r5, [r4, #0]
 8005cc2:	6961      	ldr	r1, [r4, #20]
 8005cc4:	1d18      	adds	r0, r3, #4
 8005cc6:	6010      	str	r0, [r2, #0]
 8005cc8:	0628      	lsls	r0, r5, #24
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	d501      	bpl.n	8005cd2 <_printf_i+0x196>
 8005cce:	6019      	str	r1, [r3, #0]
 8005cd0:	e002      	b.n	8005cd8 <_printf_i+0x19c>
 8005cd2:	066a      	lsls	r2, r5, #25
 8005cd4:	d5fb      	bpl.n	8005cce <_printf_i+0x192>
 8005cd6:	8019      	strh	r1, [r3, #0]
 8005cd8:	2300      	movs	r3, #0
 8005cda:	6123      	str	r3, [r4, #16]
 8005cdc:	4665      	mov	r5, ip
 8005cde:	e7b9      	b.n	8005c54 <_printf_i+0x118>
 8005ce0:	6813      	ldr	r3, [r2, #0]
 8005ce2:	1d19      	adds	r1, r3, #4
 8005ce4:	6011      	str	r1, [r2, #0]
 8005ce6:	681d      	ldr	r5, [r3, #0]
 8005ce8:	6862      	ldr	r2, [r4, #4]
 8005cea:	2100      	movs	r1, #0
 8005cec:	4628      	mov	r0, r5
 8005cee:	f7fa fa8f 	bl	8000210 <memchr>
 8005cf2:	b108      	cbz	r0, 8005cf8 <_printf_i+0x1bc>
 8005cf4:	1b40      	subs	r0, r0, r5
 8005cf6:	6060      	str	r0, [r4, #4]
 8005cf8:	6863      	ldr	r3, [r4, #4]
 8005cfa:	6123      	str	r3, [r4, #16]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d02:	e7a7      	b.n	8005c54 <_printf_i+0x118>
 8005d04:	6923      	ldr	r3, [r4, #16]
 8005d06:	462a      	mov	r2, r5
 8005d08:	4639      	mov	r1, r7
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	47c0      	blx	r8
 8005d0e:	3001      	adds	r0, #1
 8005d10:	d0aa      	beq.n	8005c68 <_printf_i+0x12c>
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	079b      	lsls	r3, r3, #30
 8005d16:	d413      	bmi.n	8005d40 <_printf_i+0x204>
 8005d18:	68e0      	ldr	r0, [r4, #12]
 8005d1a:	9b03      	ldr	r3, [sp, #12]
 8005d1c:	4298      	cmp	r0, r3
 8005d1e:	bfb8      	it	lt
 8005d20:	4618      	movlt	r0, r3
 8005d22:	e7a3      	b.n	8005c6c <_printf_i+0x130>
 8005d24:	2301      	movs	r3, #1
 8005d26:	464a      	mov	r2, r9
 8005d28:	4639      	mov	r1, r7
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	47c0      	blx	r8
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d09a      	beq.n	8005c68 <_printf_i+0x12c>
 8005d32:	3501      	adds	r5, #1
 8005d34:	68e3      	ldr	r3, [r4, #12]
 8005d36:	9a03      	ldr	r2, [sp, #12]
 8005d38:	1a9b      	subs	r3, r3, r2
 8005d3a:	42ab      	cmp	r3, r5
 8005d3c:	dcf2      	bgt.n	8005d24 <_printf_i+0x1e8>
 8005d3e:	e7eb      	b.n	8005d18 <_printf_i+0x1dc>
 8005d40:	2500      	movs	r5, #0
 8005d42:	f104 0919 	add.w	r9, r4, #25
 8005d46:	e7f5      	b.n	8005d34 <_printf_i+0x1f8>
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1ac      	bne.n	8005ca6 <_printf_i+0x16a>
 8005d4c:	7803      	ldrb	r3, [r0, #0]
 8005d4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d56:	e76c      	b.n	8005c32 <_printf_i+0xf6>
 8005d58:	08005fd9 	.word	0x08005fd9
 8005d5c:	08005fea 	.word	0x08005fea

08005d60 <memcpy>:
 8005d60:	b510      	push	{r4, lr}
 8005d62:	1e43      	subs	r3, r0, #1
 8005d64:	440a      	add	r2, r1
 8005d66:	4291      	cmp	r1, r2
 8005d68:	d100      	bne.n	8005d6c <memcpy+0xc>
 8005d6a:	bd10      	pop	{r4, pc}
 8005d6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d74:	e7f7      	b.n	8005d66 <memcpy+0x6>

08005d76 <memmove>:
 8005d76:	4288      	cmp	r0, r1
 8005d78:	b510      	push	{r4, lr}
 8005d7a:	eb01 0302 	add.w	r3, r1, r2
 8005d7e:	d807      	bhi.n	8005d90 <memmove+0x1a>
 8005d80:	1e42      	subs	r2, r0, #1
 8005d82:	4299      	cmp	r1, r3
 8005d84:	d00a      	beq.n	8005d9c <memmove+0x26>
 8005d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d8a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005d8e:	e7f8      	b.n	8005d82 <memmove+0xc>
 8005d90:	4283      	cmp	r3, r0
 8005d92:	d9f5      	bls.n	8005d80 <memmove+0xa>
 8005d94:	1881      	adds	r1, r0, r2
 8005d96:	1ad2      	subs	r2, r2, r3
 8005d98:	42d3      	cmn	r3, r2
 8005d9a:	d100      	bne.n	8005d9e <memmove+0x28>
 8005d9c:	bd10      	pop	{r4, pc}
 8005d9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005da2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005da6:	e7f7      	b.n	8005d98 <memmove+0x22>

08005da8 <_free_r>:
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	4605      	mov	r5, r0
 8005dac:	2900      	cmp	r1, #0
 8005dae:	d045      	beq.n	8005e3c <_free_r+0x94>
 8005db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005db4:	1f0c      	subs	r4, r1, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	bfb8      	it	lt
 8005dba:	18e4      	addlt	r4, r4, r3
 8005dbc:	f000 f8d2 	bl	8005f64 <__malloc_lock>
 8005dc0:	4a1f      	ldr	r2, [pc, #124]	; (8005e40 <_free_r+0x98>)
 8005dc2:	6813      	ldr	r3, [r2, #0]
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	b933      	cbnz	r3, 8005dd6 <_free_r+0x2e>
 8005dc8:	6063      	str	r3, [r4, #4]
 8005dca:	6014      	str	r4, [r2, #0]
 8005dcc:	4628      	mov	r0, r5
 8005dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dd2:	f000 b8c8 	b.w	8005f66 <__malloc_unlock>
 8005dd6:	42a3      	cmp	r3, r4
 8005dd8:	d90c      	bls.n	8005df4 <_free_r+0x4c>
 8005dda:	6821      	ldr	r1, [r4, #0]
 8005ddc:	1862      	adds	r2, r4, r1
 8005dde:	4293      	cmp	r3, r2
 8005de0:	bf04      	itt	eq
 8005de2:	681a      	ldreq	r2, [r3, #0]
 8005de4:	685b      	ldreq	r3, [r3, #4]
 8005de6:	6063      	str	r3, [r4, #4]
 8005de8:	bf04      	itt	eq
 8005dea:	1852      	addeq	r2, r2, r1
 8005dec:	6022      	streq	r2, [r4, #0]
 8005dee:	6004      	str	r4, [r0, #0]
 8005df0:	e7ec      	b.n	8005dcc <_free_r+0x24>
 8005df2:	4613      	mov	r3, r2
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	b10a      	cbz	r2, 8005dfc <_free_r+0x54>
 8005df8:	42a2      	cmp	r2, r4
 8005dfa:	d9fa      	bls.n	8005df2 <_free_r+0x4a>
 8005dfc:	6819      	ldr	r1, [r3, #0]
 8005dfe:	1858      	adds	r0, r3, r1
 8005e00:	42a0      	cmp	r0, r4
 8005e02:	d10b      	bne.n	8005e1c <_free_r+0x74>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	4401      	add	r1, r0
 8005e08:	1858      	adds	r0, r3, r1
 8005e0a:	4282      	cmp	r2, r0
 8005e0c:	6019      	str	r1, [r3, #0]
 8005e0e:	d1dd      	bne.n	8005dcc <_free_r+0x24>
 8005e10:	6810      	ldr	r0, [r2, #0]
 8005e12:	6852      	ldr	r2, [r2, #4]
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	4401      	add	r1, r0
 8005e18:	6019      	str	r1, [r3, #0]
 8005e1a:	e7d7      	b.n	8005dcc <_free_r+0x24>
 8005e1c:	d902      	bls.n	8005e24 <_free_r+0x7c>
 8005e1e:	230c      	movs	r3, #12
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	e7d3      	b.n	8005dcc <_free_r+0x24>
 8005e24:	6820      	ldr	r0, [r4, #0]
 8005e26:	1821      	adds	r1, r4, r0
 8005e28:	428a      	cmp	r2, r1
 8005e2a:	bf04      	itt	eq
 8005e2c:	6811      	ldreq	r1, [r2, #0]
 8005e2e:	6852      	ldreq	r2, [r2, #4]
 8005e30:	6062      	str	r2, [r4, #4]
 8005e32:	bf04      	itt	eq
 8005e34:	1809      	addeq	r1, r1, r0
 8005e36:	6021      	streq	r1, [r4, #0]
 8005e38:	605c      	str	r4, [r3, #4]
 8005e3a:	e7c7      	b.n	8005dcc <_free_r+0x24>
 8005e3c:	bd38      	pop	{r3, r4, r5, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000094 	.word	0x20000094

08005e44 <_malloc_r>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	1ccd      	adds	r5, r1, #3
 8005e48:	f025 0503 	bic.w	r5, r5, #3
 8005e4c:	3508      	adds	r5, #8
 8005e4e:	2d0c      	cmp	r5, #12
 8005e50:	bf38      	it	cc
 8005e52:	250c      	movcc	r5, #12
 8005e54:	2d00      	cmp	r5, #0
 8005e56:	4606      	mov	r6, r0
 8005e58:	db01      	blt.n	8005e5e <_malloc_r+0x1a>
 8005e5a:	42a9      	cmp	r1, r5
 8005e5c:	d903      	bls.n	8005e66 <_malloc_r+0x22>
 8005e5e:	230c      	movs	r3, #12
 8005e60:	6033      	str	r3, [r6, #0]
 8005e62:	2000      	movs	r0, #0
 8005e64:	bd70      	pop	{r4, r5, r6, pc}
 8005e66:	f000 f87d 	bl	8005f64 <__malloc_lock>
 8005e6a:	4a21      	ldr	r2, [pc, #132]	; (8005ef0 <_malloc_r+0xac>)
 8005e6c:	6814      	ldr	r4, [r2, #0]
 8005e6e:	4621      	mov	r1, r4
 8005e70:	b991      	cbnz	r1, 8005e98 <_malloc_r+0x54>
 8005e72:	4c20      	ldr	r4, [pc, #128]	; (8005ef4 <_malloc_r+0xb0>)
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	b91b      	cbnz	r3, 8005e80 <_malloc_r+0x3c>
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f000 f863 	bl	8005f44 <_sbrk_r>
 8005e7e:	6020      	str	r0, [r4, #0]
 8005e80:	4629      	mov	r1, r5
 8005e82:	4630      	mov	r0, r6
 8005e84:	f000 f85e 	bl	8005f44 <_sbrk_r>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	d124      	bne.n	8005ed6 <_malloc_r+0x92>
 8005e8c:	230c      	movs	r3, #12
 8005e8e:	6033      	str	r3, [r6, #0]
 8005e90:	4630      	mov	r0, r6
 8005e92:	f000 f868 	bl	8005f66 <__malloc_unlock>
 8005e96:	e7e4      	b.n	8005e62 <_malloc_r+0x1e>
 8005e98:	680b      	ldr	r3, [r1, #0]
 8005e9a:	1b5b      	subs	r3, r3, r5
 8005e9c:	d418      	bmi.n	8005ed0 <_malloc_r+0x8c>
 8005e9e:	2b0b      	cmp	r3, #11
 8005ea0:	d90f      	bls.n	8005ec2 <_malloc_r+0x7e>
 8005ea2:	600b      	str	r3, [r1, #0]
 8005ea4:	50cd      	str	r5, [r1, r3]
 8005ea6:	18cc      	adds	r4, r1, r3
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f000 f85c 	bl	8005f66 <__malloc_unlock>
 8005eae:	f104 000b 	add.w	r0, r4, #11
 8005eb2:	1d23      	adds	r3, r4, #4
 8005eb4:	f020 0007 	bic.w	r0, r0, #7
 8005eb8:	1ac3      	subs	r3, r0, r3
 8005eba:	d0d3      	beq.n	8005e64 <_malloc_r+0x20>
 8005ebc:	425a      	negs	r2, r3
 8005ebe:	50e2      	str	r2, [r4, r3]
 8005ec0:	e7d0      	b.n	8005e64 <_malloc_r+0x20>
 8005ec2:	428c      	cmp	r4, r1
 8005ec4:	684b      	ldr	r3, [r1, #4]
 8005ec6:	bf16      	itet	ne
 8005ec8:	6063      	strne	r3, [r4, #4]
 8005eca:	6013      	streq	r3, [r2, #0]
 8005ecc:	460c      	movne	r4, r1
 8005ece:	e7eb      	b.n	8005ea8 <_malloc_r+0x64>
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	6849      	ldr	r1, [r1, #4]
 8005ed4:	e7cc      	b.n	8005e70 <_malloc_r+0x2c>
 8005ed6:	1cc4      	adds	r4, r0, #3
 8005ed8:	f024 0403 	bic.w	r4, r4, #3
 8005edc:	42a0      	cmp	r0, r4
 8005ede:	d005      	beq.n	8005eec <_malloc_r+0xa8>
 8005ee0:	1a21      	subs	r1, r4, r0
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f000 f82e 	bl	8005f44 <_sbrk_r>
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d0cf      	beq.n	8005e8c <_malloc_r+0x48>
 8005eec:	6025      	str	r5, [r4, #0]
 8005eee:	e7db      	b.n	8005ea8 <_malloc_r+0x64>
 8005ef0:	20000094 	.word	0x20000094
 8005ef4:	20000098 	.word	0x20000098

08005ef8 <_realloc_r>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	4607      	mov	r7, r0
 8005efc:	4614      	mov	r4, r2
 8005efe:	460e      	mov	r6, r1
 8005f00:	b921      	cbnz	r1, 8005f0c <_realloc_r+0x14>
 8005f02:	4611      	mov	r1, r2
 8005f04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f08:	f7ff bf9c 	b.w	8005e44 <_malloc_r>
 8005f0c:	b922      	cbnz	r2, 8005f18 <_realloc_r+0x20>
 8005f0e:	f7ff ff4b 	bl	8005da8 <_free_r>
 8005f12:	4625      	mov	r5, r4
 8005f14:	4628      	mov	r0, r5
 8005f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f18:	f000 f826 	bl	8005f68 <_malloc_usable_size_r>
 8005f1c:	42a0      	cmp	r0, r4
 8005f1e:	d20f      	bcs.n	8005f40 <_realloc_r+0x48>
 8005f20:	4621      	mov	r1, r4
 8005f22:	4638      	mov	r0, r7
 8005f24:	f7ff ff8e 	bl	8005e44 <_malloc_r>
 8005f28:	4605      	mov	r5, r0
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	d0f2      	beq.n	8005f14 <_realloc_r+0x1c>
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4622      	mov	r2, r4
 8005f32:	f7ff ff15 	bl	8005d60 <memcpy>
 8005f36:	4631      	mov	r1, r6
 8005f38:	4638      	mov	r0, r7
 8005f3a:	f7ff ff35 	bl	8005da8 <_free_r>
 8005f3e:	e7e9      	b.n	8005f14 <_realloc_r+0x1c>
 8005f40:	4635      	mov	r5, r6
 8005f42:	e7e7      	b.n	8005f14 <_realloc_r+0x1c>

08005f44 <_sbrk_r>:
 8005f44:	b538      	push	{r3, r4, r5, lr}
 8005f46:	4c06      	ldr	r4, [pc, #24]	; (8005f60 <_sbrk_r+0x1c>)
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4605      	mov	r5, r0
 8005f4c:	4608      	mov	r0, r1
 8005f4e:	6023      	str	r3, [r4, #0]
 8005f50:	f7ff fa48 	bl	80053e4 <_sbrk>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d102      	bne.n	8005f5e <_sbrk_r+0x1a>
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	b103      	cbz	r3, 8005f5e <_sbrk_r+0x1a>
 8005f5c:	602b      	str	r3, [r5, #0]
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	2000061c 	.word	0x2000061c

08005f64 <__malloc_lock>:
 8005f64:	4770      	bx	lr

08005f66 <__malloc_unlock>:
 8005f66:	4770      	bx	lr

08005f68 <_malloc_usable_size_r>:
 8005f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f6c:	1f18      	subs	r0, r3, #4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	bfbc      	itt	lt
 8005f72:	580b      	ldrlt	r3, [r1, r0]
 8005f74:	18c0      	addlt	r0, r0, r3
 8005f76:	4770      	bx	lr

08005f78 <_init>:
 8005f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7a:	bf00      	nop
 8005f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7e:	bc08      	pop	{r3}
 8005f80:	469e      	mov	lr, r3
 8005f82:	4770      	bx	lr

08005f84 <_fini>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	bf00      	nop
 8005f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8a:	bc08      	pop	{r3}
 8005f8c:	469e      	mov	lr, r3
 8005f8e:	4770      	bx	lr
